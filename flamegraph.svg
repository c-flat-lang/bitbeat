<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="8137"><g><title>0x10324a793 (1 samples, 0.01%)</title><rect x="0.0000%" y="501" width="0.0123%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>0x10328f363 (1 samples, 0.01%)</title><rect x="0.0000%" y="485" width="0.0123%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>0x1032ad8c7 (1 samples, 0.01%)</title><rect x="0.0000%" y="469" width="0.0123%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>0x1032ae125 (1 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0123%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (1 samples, 0.01%)</title><rect x="0.0123%" y="453" width="0.0123%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2623%" y="463.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.01%)</title><rect x="0.0123%" y="437" width="0.0123%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2623%" y="447.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.01%)</title><rect x="0.0123%" y="421" width="0.0123%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2623%" y="431.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.01%)</title><rect x="0.0123%" y="405" width="0.0123%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2623%" y="415.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0123%" y="389" width="0.0123%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2623%" y="399.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0123%" y="373" width="0.0123%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2623%" y="383.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0123%" y="357" width="0.0123%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2623%" y="367.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.01%)</title><rect x="0.0123%" y="341" width="0.0123%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2623%" y="351.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.01%)</title><rect x="0.0123%" y="325" width="0.0123%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2623%" y="335.50"></text></g><g><title>libSystem_initializer (1 samples, 0.01%)</title><rect x="0.0123%" y="309" width="0.0123%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2623%" y="319.50"></text></g><g><title>_libxpc_initializer (1 samples, 0.01%)</title><rect x="0.0123%" y="293" width="0.0123%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.2623%" y="303.50"></text></g><g><title>_xpc_collect_images (1 samples, 0.01%)</title><rect x="0.0123%" y="277" width="0.0123%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.2623%" y="287.50"></text></g><g><title>xpc_bundle_copy_services (1 samples, 0.01%)</title><rect x="0.0123%" y="261" width="0.0123%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.2623%" y="271.50"></text></g><g><title>_xpc_bundle_resolve (1 samples, 0.01%)</title><rect x="0.0123%" y="245" width="0.0123%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.2623%" y="255.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.01%)</title><rect x="0.0123%" y="229" width="0.0123%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.2623%" y="239.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.01%)</title><rect x="0.0123%" y="213" width="0.0123%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.2623%" y="223.50"></text></g><g><title>___xpc_bundle_resolve_block_invoke (1 samples, 0.01%)</title><rect x="0.0123%" y="197" width="0.0123%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.2623%" y="207.50"></text></g><g><title>_xpc_bundle_resolve_sync (1 samples, 0.01%)</title><rect x="0.0123%" y="181" width="0.0123%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.2623%" y="191.50"></text></g><g><title>_xpc_bundle_resolve_root (1 samples, 0.01%)</title><rect x="0.0123%" y="165" width="0.0123%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.2623%" y="175.50"></text></g><g><title>_resolve_and_stat_path (1 samples, 0.01%)</title><rect x="0.0123%" y="149" width="0.0123%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.2623%" y="159.50"></text></g><g><title>__mac_syscall (1 samples, 0.01%)</title><rect x="0.0123%" y="133" width="0.0123%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.2623%" y="143.50"></text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 0.01%)</title><rect x="0.0246%" y="453" width="0.0123%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="0.2746%" y="463.50"></text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0246%" y="437" width="0.0123%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="0.2746%" y="447.50"></text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0246%" y="421" width="0.0123%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="0.2746%" y="431.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0246%" y="405" width="0.0123%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.2746%" y="415.50"></text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0246%" y="389" width="0.0123%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="0.2746%" y="399.50"></text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0246%" y="373" width="0.0123%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="0.2746%" y="383.50"></text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0246%" y="357" width="0.0123%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="0.2746%" y="367.50"></text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0246%" y="341" width="0.0123%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="0.2746%" y="351.50"></text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0246%" y="325" width="0.0123%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="0.2746%" y="335.50"></text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 0.01%)</title><rect x="0.0246%" y="309" width="0.0123%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="0.2746%" y="319.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.01%)</title><rect x="0.0246%" y="293" width="0.0123%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="1"/><text x="0.2746%" y="303.50"></text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 0.01%)</title><rect x="0.0246%" y="277" width="0.0123%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="1"/><text x="0.2746%" y="287.50"></text></g><g><title>dyld3::MachOFile::trieWalk(Diagnostics&amp;, unsigned char const*, unsigned char const*, char const*) (1 samples, 0.01%)</title><rect x="0.0246%" y="261" width="0.0123%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="1"/><text x="0.2746%" y="271.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="453" width="0.0123%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1"/><text x="0.2869%" y="463.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="437" width="0.0123%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="0.2869%" y="447.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="421" width="0.0123%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="0.2869%" y="431.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="405" width="0.0123%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="0.2869%" y="415.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="389" width="0.0123%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="0.2869%" y="399.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="373" width="0.0123%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="0.2869%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="357" width="0.0123%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="0.2869%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="341" width="0.0123%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="0.2869%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="325" width="0.0123%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1"/><text x="0.2869%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="309" width="0.0123%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1"/><text x="0.2869%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="293" width="0.0123%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="1"/><text x="0.2869%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="277" width="0.0123%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="1"/><text x="0.2869%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="261" width="0.0123%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="1"/><text x="0.2869%" y="271.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="245" width="0.0123%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="1"/><text x="0.2869%" y="255.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="229" width="0.0123%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="1"/><text x="0.2869%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="213" width="0.0123%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="1"/><text x="0.2869%" y="223.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="197" width="0.0123%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="1"/><text x="0.2869%" y="207.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="181" width="0.0123%" height="15" fill="rgb(251,118,11)" fg:x="3" fg:w="1"/><text x="0.2869%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="165" width="0.0123%" height="15" fill="rgb(217,147,25)" fg:x="3" fg:w="1"/><text x="0.2869%" y="175.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0369%" y="149" width="0.0123%" height="15" fill="rgb(247,81,37)" fg:x="3" fg:w="1"/><text x="0.2869%" y="159.50"></text></g><g><title>dyld4::PrebuiltLoader::dependent(dyld4::RuntimeState const&amp;, unsigned int, mach_o::LinkedDylibAttributes*) const (1 samples, 0.01%)</title><rect x="0.0369%" y="133" width="0.0123%" height="15" fill="rgb(209,12,38)" fg:x="3" fg:w="1"/><text x="0.2869%" y="143.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (4 samples, 0.05%)</title><rect x="0.0123%" y="485" width="0.0492%" height="15" fill="rgb(227,1,9)" fg:x="1" fg:w="4"/><text x="0.2623%" y="495.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (4 samples, 0.05%)</title><rect x="0.0123%" y="469" width="0.0492%" height="15" fill="rgb(248,47,43)" fg:x="1" fg:w="4"/><text x="0.2623%" y="479.50"></text></g><g><title>dyld4::JustInTimeLoader::makeLaunchLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld3::MachOAnalyzer const*, char const*, mach_o::Layout const*) (1 samples, 0.01%)</title><rect x="0.0492%" y="453" width="0.0123%" height="15" fill="rgb(221,10,30)" fg:x="4" fg:w="1"/><text x="0.2992%" y="463.50"></text></g><g><title>dyld4::Loader::getOnDiskBinarySliceOffset(dyld4::RuntimeState&amp;, dyld3::MachOAnalyzer const*, char const*) (1 samples, 0.01%)</title><rect x="0.0492%" y="437" width="0.0123%" height="15" fill="rgb(210,229,1)" fg:x="4" fg:w="1"/><text x="0.2992%" y="447.50"></text></g><g><title>dyld4::SyscallDelegate::withReadOnlyMappedFile(Diagnostics&amp;, char const*, bool, void (void const*, unsigned long, bool, dyld4::FileID const&amp;, char const*, int) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0492%" y="421" width="0.0123%" height="15" fill="rgb(222,148,37)" fg:x="4" fg:w="1"/><text x="0.2992%" y="431.50"></text></g><g><title>dyld4::SyscallDelegate::mapFileReadOnly(Diagnostics&amp;, char const*, int*, unsigned long*, dyld4::FileID*, bool*, char*) const (1 samples, 0.01%)</title><rect x="0.0492%" y="405" width="0.0123%" height="15" fill="rgb(234,67,33)" fg:x="4" fg:w="1"/><text x="0.2992%" y="415.50"></text></g><g><title>dyld3::open(char const*, int, int) (1 samples, 0.01%)</title><rect x="0.0492%" y="389" width="0.0123%" height="15" fill="rgb(247,98,35)" fg:x="4" fg:w="1"/><text x="0.2992%" y="399.50"></text></g><g><title>open_with_subsystem (1 samples, 0.01%)</title><rect x="0.0492%" y="373" width="0.0123%" height="15" fill="rgb(247,138,52)" fg:x="4" fg:w="1"/><text x="0.2992%" y="383.50"></text></g><g><title>__open (1 samples, 0.01%)</title><rect x="0.0492%" y="357" width="0.0123%" height="15" fill="rgb(213,79,30)" fg:x="4" fg:w="1"/><text x="0.2992%" y="367.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.05%)</title><rect x="0.8357%" y="357" width="0.0492%" height="15" fill="rgb(246,177,23)" fg:x="68" fg:w="4"/><text x="1.0857%" y="367.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.05%)</title><rect x="0.8848%" y="357" width="0.0492%" height="15" fill="rgb(230,62,27)" fg:x="72" fg:w="4"/><text x="1.1348%" y="367.50"></text></g><g><title>_platform_memmove (22 samples, 0.27%)</title><rect x="0.9340%" y="357" width="0.2704%" height="15" fill="rgb(216,154,8)" fg:x="76" fg:w="22"/><text x="1.1840%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.02%)</title><rect x="1.3764%" y="341" width="0.0246%" height="15" fill="rgb(244,35,45)" fg:x="112" fg:w="2"/><text x="1.6264%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (26 samples, 0.32%)</title><rect x="1.4010%" y="341" width="0.3195%" height="15" fill="rgb(251,115,12)" fg:x="114" fg:w="26"/><text x="1.6510%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (10 samples, 0.12%)</title><rect x="1.5976%" y="325" width="0.1229%" height="15" fill="rgb(240,54,50)" fg:x="130" fg:w="10"/><text x="1.8476%" y="335.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (7 samples, 0.09%)</title><rect x="1.7205%" y="341" width="0.0860%" height="15" fill="rgb(233,84,52)" fg:x="140" fg:w="7"/><text x="1.9705%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (8 samples, 0.10%)</title><rect x="3.6623%" y="325" width="0.0983%" height="15" fill="rgb(207,117,47)" fg:x="298" fg:w="8"/><text x="3.9123%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="3.7237%" y="309" width="0.0369%" height="15" fill="rgb(249,43,39)" fg:x="303" fg:w="3"/><text x="3.9737%" y="319.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (9 samples, 0.11%)</title><rect x="7.4475%" y="309" width="0.1106%" height="15" fill="rgb(209,38,44)" fg:x="606" fg:w="9"/><text x="7.6975%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (392 samples, 4.82%)</title><rect x="7.5581%" y="309" width="4.8175%" height="15" fill="rgb(236,212,23)" fg:x="615" fg:w="392"/><text x="7.8081%" y="319.50">&lt;core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (199 samples, 2.45%)</title><rect x="9.9299%" y="293" width="2.4456%" height="15" fill="rgb(242,79,21)" fg:x="808" fg:w="199"/><text x="10.1799%" y="303.50">&lt;c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (13 samples, 0.16%)</title><rect x="12.3756%" y="309" width="0.1598%" height="15" fill="rgb(211,96,35)" fg:x="1007" fg:w="13"/><text x="12.6256%" y="319.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (72 samples, 0.88%)</title><rect x="12.5353%" y="309" width="0.8848%" height="15" fill="rgb(253,215,40)" fg:x="1020" fg:w="72"/><text x="12.7853%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (11 samples, 0.14%)</title><rect x="13.2850%" y="293" width="0.1352%" height="15" fill="rgb(211,81,21)" fg:x="1081" fg:w="11"/><text x="13.5350%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1,042 samples, 12.81%)</title><rect x="1.2044%" y="357" width="12.8057%" height="15" fill="rgb(208,190,38)" fg:x="98" fg:w="1042"/><text x="1.4544%" y="367.50">alloc::collections:..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (993 samples, 12.20%)</title><rect x="1.8066%" y="341" width="12.2035%" height="15" fill="rgb(235,213,38)" fg:x="147" fg:w="993"/><text x="2.0566%" y="351.50">alloc::collections..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (834 samples, 10.25%)</title><rect x="3.7606%" y="325" width="10.2495%" height="15" fill="rgb(237,122,38)" fg:x="306" fg:w="834"/><text x="4.0106%" y="335.50">alloc::collecti..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (48 samples, 0.59%)</title><rect x="13.4202%" y="309" width="0.5899%" height="15" fill="rgb(244,218,35)" fg:x="1092" fg:w="48"/><text x="13.6702%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="14.2804%" y="309" width="0.0123%" height="15" fill="rgb(240,68,47)" fg:x="1162" fg:w="1"/><text x="14.5304%" y="319.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (3 samples, 0.04%)</title><rect x="14.2927%" y="309" width="0.0369%" height="15" fill="rgb(210,16,53)" fg:x="1163" fg:w="3"/><text x="14.5427%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (1 samples, 0.01%)</title><rect x="14.4033%" y="293" width="0.0123%" height="15" fill="rgb(235,124,12)" fg:x="1172" fg:w="1"/><text x="14.6533%" y="303.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="14.6368%" y="277" width="0.0123%" height="15" fill="rgb(224,169,11)" fg:x="1191" fg:w="1"/><text x="14.8868%" y="287.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_and_affected_ancestors (7 samples, 0.09%)</title><rect x="14.6491%" y="277" width="0.0860%" height="15" fill="rgb(250,166,2)" fg:x="1192" fg:w="7"/><text x="14.8991%" y="287.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_through_parent (7 samples, 0.09%)</title><rect x="14.6491%" y="261" width="0.0860%" height="15" fill="rgb(242,216,29)" fg:x="1192" fg:w="7"/><text x="14.8991%" y="271.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (4 samples, 0.05%)</title><rect x="14.6860%" y="245" width="0.0492%" height="15" fill="rgb(230,116,27)" fg:x="1195" fg:w="4"/><text x="14.9360%" y="255.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="14.7474%" y="261" width="0.0123%" height="15" fill="rgb(228,99,48)" fg:x="1200" fg:w="1"/><text x="14.9974%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="14.8581%" y="245" width="0.0369%" height="15" fill="rgb(253,11,6)" fg:x="1209" fg:w="3"/><text x="15.1081%" y="255.50"></text></g><g><title>_nanov2_free (3 samples, 0.04%)</title><rect x="14.8581%" y="229" width="0.0369%" height="15" fill="rgb(247,143,39)" fg:x="1209" fg:w="3"/><text x="15.1081%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (6 samples, 0.07%)</title><rect x="14.8949%" y="245" width="0.0737%" height="15" fill="rgb(236,97,10)" fg:x="1212" fg:w="6"/><text x="15.1449%" y="255.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child::_{{closure}} (1 samples, 0.01%)</title><rect x="14.9687%" y="245" width="0.0123%" height="15" fill="rgb(233,208,19)" fg:x="1218" fg:w="1"/><text x="15.2187%" y="255.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (2 samples, 0.02%)</title><rect x="14.9810%" y="245" width="0.0246%" height="15" fill="rgb(216,164,2)" fg:x="1219" fg:w="2"/><text x="15.2310%" y="255.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="14.9932%" y="229" width="0.0123%" height="15" fill="rgb(220,129,5)" fg:x="1220" fg:w="1"/><text x="15.2432%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.01%)</title><rect x="14.9932%" y="213" width="0.0123%" height="15" fill="rgb(242,17,10)" fg:x="1220" fg:w="1"/><text x="15.2432%" y="223.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (8 samples, 0.10%)</title><rect x="15.0055%" y="245" width="0.0983%" height="15" fill="rgb(242,107,0)" fg:x="1221" fg:w="8"/><text x="15.2555%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.06%)</title><rect x="15.0424%" y="229" width="0.0614%" height="15" fill="rgb(251,28,31)" fg:x="1224" fg:w="5"/><text x="15.2924%" y="239.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (44 samples, 0.54%)</title><rect x="14.7352%" y="277" width="0.5407%" height="15" fill="rgb(233,223,10)" fg:x="1199" fg:w="44"/><text x="14.9852%" y="287.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (42 samples, 0.52%)</title><rect x="14.7597%" y="261" width="0.5162%" height="15" fill="rgb(215,21,27)" fg:x="1201" fg:w="42"/><text x="15.0097%" y="271.50"></text></g><g><title>alloc::collections::btree::node::slice_remove (14 samples, 0.17%)</title><rect x="15.1038%" y="245" width="0.1721%" height="15" fill="rgb(232,23,21)" fg:x="1229" fg:w="14"/><text x="15.3538%" y="255.50"></text></g><g><title>core::intrinsics::copy::precondition_check (2 samples, 0.02%)</title><rect x="15.2513%" y="229" width="0.0246%" height="15" fill="rgb(244,5,23)" fg:x="1241" fg:w="2"/><text x="15.5013%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (17 samples, 0.21%)</title><rect x="15.6937%" y="261" width="0.2089%" height="15" fill="rgb(226,81,46)" fg:x="1277" fg:w="17"/><text x="15.9437%" y="271.50"></text></g><g><title>DYLD-STUB$$memmove (2 samples, 0.02%)</title><rect x="16.9227%" y="245" width="0.0246%" height="15" fill="rgb(247,70,30)" fg:x="1377" fg:w="2"/><text x="17.1727%" y="255.50"></text></g><g><title>_platform_memmove (2 samples, 0.02%)</title><rect x="16.9473%" y="245" width="0.0246%" height="15" fill="rgb(212,68,19)" fg:x="1379" fg:w="2"/><text x="17.1973%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (154 samples, 1.89%)</title><rect x="15.2759%" y="277" width="1.8926%" height="15" fill="rgb(240,187,13)" fg:x="1243" fg:w="154"/><text x="15.5259%" y="287.50">a..</text></g><g><title>alloc::collections::btree::node::slice_remove (103 samples, 1.27%)</title><rect x="15.9027%" y="261" width="1.2658%" height="15" fill="rgb(223,113,26)" fg:x="1294" fg:w="103"/><text x="16.1527%" y="271.50"></text></g><g><title>core::intrinsics::copy::precondition_check (16 samples, 0.20%)</title><rect x="16.9719%" y="245" width="0.1966%" height="15" fill="rgb(206,192,2)" fg:x="1381" fg:w="16"/><text x="17.2219%" y="255.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (3 samples, 0.04%)</title><rect x="17.1685%" y="277" width="0.0369%" height="15" fill="rgb(241,108,4)" fg:x="1397" fg:w="3"/><text x="17.4185%" y="287.50"></text></g><g><title>_platform_memmove (4 samples, 0.05%)</title><rect x="17.2299%" y="261" width="0.0492%" height="15" fill="rgb(247,173,49)" fg:x="1402" fg:w="4"/><text x="17.4799%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (252 samples, 3.10%)</title><rect x="14.1944%" y="325" width="3.0970%" height="15" fill="rgb(224,114,35)" fg:x="1155" fg:w="252"/><text x="14.4444%" y="335.50">all..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (241 samples, 2.96%)</title><rect x="14.3296%" y="309" width="2.9618%" height="15" fill="rgb(245,159,27)" fg:x="1166" fg:w="241"/><text x="14.5796%" y="319.50">all..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (234 samples, 2.88%)</title><rect x="14.4156%" y="293" width="2.8758%" height="15" fill="rgb(245,172,44)" fg:x="1173" fg:w="234"/><text x="14.6656%" y="303.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (7 samples, 0.09%)</title><rect x="17.2054%" y="277" width="0.0860%" height="15" fill="rgb(236,23,11)" fg:x="1400" fg:w="7"/><text x="17.4554%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.01%)</title><rect x="17.2791%" y="261" width="0.0123%" height="15" fill="rgb(205,117,38)" fg:x="1406" fg:w="1"/><text x="17.5291%" y="271.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (1 samples, 0.01%)</title><rect x="17.2914%" y="325" width="0.0123%" height="15" fill="rgb(237,72,25)" fg:x="1407" fg:w="1"/><text x="17.5414%" y="335.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.01%)</title><rect x="17.3037%" y="325" width="0.0123%" height="15" fill="rgb(244,70,9)" fg:x="1408" fg:w="1"/><text x="17.5537%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (10 samples, 0.12%)</title><rect x="18.2868%" y="309" width="0.1229%" height="15" fill="rgb(217,125,39)" fg:x="1488" fg:w="10"/><text x="18.5368%" y="319.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (7 samples, 0.09%)</title><rect x="19.9828%" y="293" width="0.0860%" height="15" fill="rgb(235,36,10)" fg:x="1626" fg:w="7"/><text x="20.2328%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (199 samples, 2.45%)</title><rect x="20.0688%" y="293" width="2.4456%" height="15" fill="rgb(251,123,47)" fg:x="1633" fg:w="199"/><text x="20.3188%" y="303.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 1.13%)</title><rect x="21.3838%" y="277" width="1.1306%" height="15" fill="rgb(221,13,13)" fg:x="1740" fg:w="92"/><text x="21.6338%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (12 samples, 0.15%)</title><rect x="22.5144%" y="293" width="0.1475%" height="15" fill="rgb(238,131,9)" fg:x="1832" fg:w="12"/><text x="22.7644%" y="303.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (19 samples, 0.23%)</title><rect x="22.6619%" y="293" width="0.2335%" height="15" fill="rgb(211,50,8)" fg:x="1844" fg:w="19"/><text x="22.9119%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="22.8463%" y="277" width="0.0492%" height="15" fill="rgb(245,182,24)" fg:x="1859" fg:w="4"/><text x="23.0963%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (755 samples, 9.28%)</title><rect x="14.0101%" y="357" width="9.2786%" height="15" fill="rgb(242,14,37)" fg:x="1140" fg:w="755"/><text x="14.2601%" y="367.50">alloc::collec..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (750 samples, 9.22%)</title><rect x="14.0715%" y="341" width="9.2172%" height="15" fill="rgb(246,228,12)" fg:x="1145" fg:w="750"/><text x="14.3215%" y="351.50">alloc::collec..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (486 samples, 5.97%)</title><rect x="17.3160%" y="325" width="5.9727%" height="15" fill="rgb(213,55,15)" fg:x="1409" fg:w="486"/><text x="17.5660%" y="335.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (397 samples, 4.88%)</title><rect x="18.4097%" y="309" width="4.8789%" height="15" fill="rgb(209,9,3)" fg:x="1498" fg:w="397"/><text x="18.6597%" y="319.50">alloc:..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (32 samples, 0.39%)</title><rect x="22.8954%" y="293" width="0.3933%" height="15" fill="rgb(230,59,30)" fg:x="1863" fg:w="32"/><text x="23.1454%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (2 samples, 0.02%)</title><rect x="23.2887%" y="357" width="0.0246%" height="15" fill="rgb(209,121,21)" fg:x="1895" fg:w="2"/><text x="23.5387%" y="367.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (5 samples, 0.06%)</title><rect x="23.3133%" y="357" width="0.0614%" height="15" fill="rgb(220,109,13)" fg:x="1897" fg:w="5"/><text x="23.5633%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (74 samples, 0.91%)</title><rect x="23.3747%" y="357" width="0.9094%" height="15" fill="rgb(232,18,1)" fg:x="1902" fg:w="74"/><text x="23.6247%" y="367.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="24.2473%" y="341" width="0.0369%" height="15" fill="rgb(215,41,42)" fg:x="1973" fg:w="3"/><text x="24.4973%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (32 samples, 0.39%)</title><rect x="24.2841%" y="357" width="0.3933%" height="15" fill="rgb(224,123,36)" fg:x="1976" fg:w="32"/><text x="24.5341%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (14 samples, 0.17%)</title><rect x="24.5053%" y="341" width="0.1721%" height="15" fill="rgb(240,125,3)" fg:x="1994" fg:w="14"/><text x="24.7553%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (2 samples, 0.02%)</title><rect x="24.6528%" y="325" width="0.0246%" height="15" fill="rgb(205,98,50)" fg:x="2006" fg:w="2"/><text x="24.9028%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="24.9601%" y="325" width="0.0246%" height="15" fill="rgb(205,185,37)" fg:x="2031" fg:w="2"/><text x="25.2101%" y="335.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (2 samples, 0.02%)</title><rect x="25.1321%" y="309" width="0.0246%" height="15" fill="rgb(238,207,15)" fg:x="2045" fg:w="2"/><text x="25.3821%" y="319.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.33%)</title><rect x="24.8495%" y="341" width="0.3318%" height="15" fill="rgb(213,199,42)" fg:x="2022" fg:w="27"/><text x="25.0995%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (16 samples, 0.20%)</title><rect x="24.9846%" y="325" width="0.1966%" height="15" fill="rgb(235,201,11)" fg:x="2033" fg:w="16"/><text x="25.2346%" y="335.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (2 samples, 0.02%)</title><rect x="25.1567%" y="309" width="0.0246%" height="15" fill="rgb(207,46,11)" fg:x="2047" fg:w="2"/><text x="25.4067%" y="319.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (46 samples, 0.57%)</title><rect x="24.6774%" y="357" width="0.5653%" height="15" fill="rgb(241,35,35)" fg:x="2008" fg:w="46"/><text x="24.9274%" y="367.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (5 samples, 0.06%)</title><rect x="25.1813%" y="341" width="0.0614%" height="15" fill="rgb(243,32,47)" fg:x="2049" fg:w="5"/><text x="25.4313%" y="351.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="25.4762%" y="309" width="0.0123%" height="15" fill="rgb(247,202,23)" fg:x="2073" fg:w="1"/><text x="25.7262%" y="319.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.04%)</title><rect x="26.3856%" y="245" width="0.0369%" height="15" fill="rgb(219,102,11)" fg:x="2147" fg:w="3"/><text x="26.6356%" y="255.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.01%)</title><rect x="26.4225%" y="245" width="0.0123%" height="15" fill="rgb(243,110,44)" fg:x="2150" fg:w="1"/><text x="26.6725%" y="255.50"></text></g><g><title>_free (7 samples, 0.09%)</title><rect x="26.4348%" y="245" width="0.0860%" height="15" fill="rgb(222,74,54)" fg:x="2151" fg:w="7"/><text x="26.6848%" y="255.50"></text></g><g><title>_nanov2_free (2 samples, 0.02%)</title><rect x="26.5208%" y="245" width="0.0246%" height="15" fill="rgb(216,99,12)" fg:x="2158" fg:w="2"/><text x="26.7708%" y="255.50"></text></g><g><title>_szone_free (2 samples, 0.02%)</title><rect x="26.5454%" y="245" width="0.0246%" height="15" fill="rgb(226,22,26)" fg:x="2160" fg:w="2"/><text x="26.7954%" y="255.50"></text></g><g><title>DYLD-STUB$$_platform_memset (1 samples, 0.01%)</title><rect x="26.8526%" y="229" width="0.0123%" height="15" fill="rgb(217,163,10)" fg:x="2185" fg:w="1"/><text x="27.1026%" y="239.50"></text></g><g><title>_platform_memset (3 samples, 0.04%)</title><rect x="26.8649%" y="229" width="0.0369%" height="15" fill="rgb(213,25,53)" fg:x="2186" fg:w="3"/><text x="27.1149%" y="239.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.01%)</title><rect x="26.9018%" y="229" width="0.0123%" height="15" fill="rgb(252,105,26)" fg:x="2189" fg:w="1"/><text x="27.1518%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (81 samples, 1.00%)</title><rect x="26.2259%" y="261" width="0.9955%" height="15" fill="rgb(220,39,43)" fg:x="2134" fg:w="81"/><text x="26.4759%" y="271.50"></text></g><g><title>free_tiny (53 samples, 0.65%)</title><rect x="26.5700%" y="245" width="0.6513%" height="15" fill="rgb(229,68,48)" fg:x="2162" fg:w="53"/><text x="26.8200%" y="255.50"></text></g><g><title>tiny_free_no_lock (25 samples, 0.31%)</title><rect x="26.9141%" y="229" width="0.3072%" height="15" fill="rgb(252,8,32)" fg:x="2190" fg:w="25"/><text x="27.1641%" y="239.50"></text></g><g><title>get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="27.1968%" y="213" width="0.0246%" height="15" fill="rgb(223,20,43)" fg:x="2213" fg:w="2"/><text x="27.4468%" y="223.50"></text></g><g><title>_nanov2_free (2 samples, 0.02%)</title><rect x="27.2213%" y="261" width="0.0246%" height="15" fill="rgb(229,81,49)" fg:x="2215" fg:w="2"/><text x="27.4713%" y="271.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (88 samples, 1.08%)</title><rect x="26.1767%" y="277" width="1.0815%" height="15" fill="rgb(236,28,36)" fg:x="2130" fg:w="88"/><text x="26.4267%" y="287.50"></text></g><g><title>_szone_free (1 samples, 0.01%)</title><rect x="27.2459%" y="261" width="0.0123%" height="15" fill="rgb(249,185,26)" fg:x="2217" fg:w="1"/><text x="27.4959%" y="271.50"></text></g><g><title>alloc::rc::RcInnerPtr::weak (1 samples, 0.01%)</title><rect x="27.2582%" y="277" width="0.0123%" height="15" fill="rgb(249,174,33)" fg:x="2218" fg:w="1"/><text x="27.5082%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;core::cell::RefCell&lt;bitbeat::Process&gt;,&amp;alloc::alloc::Global&gt;&gt; (151 samples, 1.86%)</title><rect x="25.4885%" y="309" width="1.8557%" height="15" fill="rgb(233,201,37)" fg:x="2074" fg:w="151"/><text x="25.7385%" y="319.50">c..</text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (148 samples, 1.82%)</title><rect x="25.5254%" y="293" width="1.8189%" height="15" fill="rgb(221,78,26)" fg:x="2077" fg:w="148"/><text x="25.7754%" y="303.50">&lt;..</text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (6 samples, 0.07%)</title><rect x="27.2705%" y="277" width="0.0737%" height="15" fill="rgb(250,127,30)" fg:x="2219" fg:w="6"/><text x="27.5205%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (3 samples, 0.04%)</title><rect x="27.3074%" y="261" width="0.0369%" height="15" fill="rgb(230,49,44)" fg:x="2222" fg:w="3"/><text x="27.5574%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::end_bound (1 samples, 0.01%)</title><rect x="27.8481%" y="197" width="0.0123%" height="15" fill="rgb(229,67,23)" fg:x="2266" fg:w="1"/><text x="28.0981%" y="207.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (49 samples, 0.60%)</title><rect x="27.5532%" y="229" width="0.6022%" height="15" fill="rgb(249,83,47)" fg:x="2242" fg:w="49"/><text x="27.8032%" y="239.50"></text></g><g><title>core::slice::index::range (47 samples, 0.58%)</title><rect x="27.5777%" y="213" width="0.5776%" height="15" fill="rgb(215,43,3)" fg:x="2244" fg:w="47"/><text x="27.8277%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::start_bound (24 samples, 0.29%)</title><rect x="27.8604%" y="197" width="0.2949%" height="15" fill="rgb(238,154,13)" fg:x="2267" fg:w="24"/><text x="28.1104%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;i64&gt;&gt; (9 samples, 0.11%)</title><rect x="28.1553%" y="229" width="0.1106%" height="15" fill="rgb(219,56,2)" fg:x="2291" fg:w="9"/><text x="28.4053%" y="239.50"></text></g><g><title>&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="28.2537%" y="213" width="0.0123%" height="15" fill="rgb(233,0,4)" fg:x="2299" fg:w="1"/><text x="28.5037%" y="223.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.80%)</title><rect x="27.5163%" y="245" width="0.7988%" height="15" fill="rgb(235,30,7)" fg:x="2239" fg:w="65"/><text x="27.7663%" y="255.50"></text></g><g><title>core::slice::index::range (4 samples, 0.05%)</title><rect x="28.2659%" y="229" width="0.0492%" height="15" fill="rgb(250,79,13)" fg:x="2300" fg:w="4"/><text x="28.5159%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (2 samples, 0.02%)</title><rect x="28.3151%" y="245" width="0.0246%" height="15" fill="rgb(211,146,34)" fg:x="2304" fg:w="2"/><text x="28.5651%" y="255.50"></text></g><g><title>_free (3 samples, 0.04%)</title><rect x="28.4011%" y="213" width="0.0369%" height="15" fill="rgb(228,22,38)" fg:x="2311" fg:w="3"/><text x="28.6511%" y="223.50"></text></g><g><title>__bzero (1 samples, 0.01%)</title><rect x="28.4749%" y="197" width="0.0123%" height="15" fill="rgb(235,168,5)" fg:x="2317" fg:w="1"/><text x="28.7249%" y="207.50"></text></g><g><title>_nanov2_free (5 samples, 0.06%)</title><rect x="28.4380%" y="213" width="0.0614%" height="15" fill="rgb(221,155,16)" fg:x="2314" fg:w="5"/><text x="28.6880%" y="223.50"></text></g><g><title>_platform_memset (1 samples, 0.01%)</title><rect x="28.4872%" y="197" width="0.0123%" height="15" fill="rgb(215,215,53)" fg:x="2318" fg:w="1"/><text x="28.7372%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;i64&gt;&gt; (92 samples, 1.13%)</title><rect x="27.4548%" y="261" width="1.1306%" height="15" fill="rgb(223,4,10)" fg:x="2234" fg:w="92"/><text x="27.7048%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (20 samples, 0.25%)</title><rect x="28.3397%" y="245" width="0.2458%" height="15" fill="rgb(234,103,6)" fg:x="2306" fg:w="20"/><text x="28.5897%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.21%)</title><rect x="28.3766%" y="229" width="0.2089%" height="15" fill="rgb(227,97,0)" fg:x="2309" fg:w="17"/><text x="28.6266%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7 samples, 0.09%)</title><rect x="28.4994%" y="213" width="0.0860%" height="15" fill="rgb(234,150,53)" fg:x="2319" fg:w="7"/><text x="28.7494%" y="223.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (298 samples, 3.66%)</title><rect x="25.4762%" y="325" width="3.6623%" height="15" fill="rgb(228,201,54)" fg:x="2073" fg:w="298"/><text x="25.7262%" y="335.50">allo..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt; (146 samples, 1.79%)</title><rect x="27.3442%" y="309" width="1.7943%" height="15" fill="rgb(222,22,37)" fg:x="2225" fg:w="146"/><text x="27.5942%" y="319.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;bitbeat::Process&gt;&gt; (141 samples, 1.73%)</title><rect x="27.4057%" y="293" width="1.7328%" height="15" fill="rgb(237,53,32)" fg:x="2230" fg:w="141"/><text x="27.6557%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitbeat::Process&gt; (139 samples, 1.71%)</title><rect x="27.4303%" y="277" width="1.7082%" height="15" fill="rgb(233,25,53)" fg:x="2232" fg:w="139"/><text x="27.6803%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitbeat::Function&gt;&gt; (45 samples, 0.55%)</title><rect x="28.5855%" y="261" width="0.5530%" height="15" fill="rgb(210,40,34)" fg:x="2326" fg:w="45"/><text x="28.8355%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.54%)</title><rect x="28.5978%" y="245" width="0.5407%" height="15" fill="rgb(241,220,44)" fg:x="2327" fg:w="44"/><text x="28.8478%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (332 samples, 4.08%)</title><rect x="25.2427%" y="357" width="4.0801%" height="15" fill="rgb(235,28,35)" fg:x="2054" fg:w="332"/><text x="25.4927%" y="367.50">core..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (329 samples, 4.04%)</title><rect x="25.2796%" y="341" width="4.0433%" height="15" fill="rgb(210,56,17)" fg:x="2057" fg:w="329"/><text x="25.5296%" y="351.50">&lt;all..</text></g><g><title>alloc::rc::RcInnerPtr::strong (15 samples, 0.18%)</title><rect x="29.1385%" y="325" width="0.1843%" height="15" fill="rgb(224,130,29)" fg:x="2371" fg:w="15"/><text x="29.3885%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (12 samples, 0.15%)</title><rect x="29.3228%" y="357" width="0.1475%" height="15" fill="rgb(235,212,8)" fg:x="2386" fg:w="12"/><text x="29.5728%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (8 samples, 0.10%)</title><rect x="29.3720%" y="341" width="0.0983%" height="15" fill="rgb(223,33,50)" fg:x="2390" fg:w="8"/><text x="29.6220%" y="351.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (6 samples, 0.07%)</title><rect x="29.3966%" y="325" width="0.0737%" height="15" fill="rgb(219,149,13)" fg:x="2392" fg:w="6"/><text x="29.6466%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (16 samples, 0.20%)</title><rect x="29.4703%" y="357" width="0.1966%" height="15" fill="rgb(250,156,29)" fg:x="2398" fg:w="16"/><text x="29.7203%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (14 samples, 0.17%)</title><rect x="29.4949%" y="341" width="0.1721%" height="15" fill="rgb(216,193,19)" fg:x="2400" fg:w="14"/><text x="29.7449%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.12%)</title><rect x="29.5441%" y="325" width="0.1229%" height="15" fill="rgb(216,135,14)" fg:x="2404" fg:w="10"/><text x="29.7941%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="29.6670%" y="357" width="0.0246%" height="15" fill="rgb(241,47,5)" fg:x="2414" fg:w="2"/><text x="29.9170%" y="367.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.06%)</title><rect x="29.7776%" y="341" width="0.0614%" height="15" fill="rgb(233,42,35)" fg:x="2423" fg:w="5"/><text x="30.0276%" y="351.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="30.1094%" y="293" width="0.0246%" height="15" fill="rgb(231,13,6)" fg:x="2450" fg:w="2"/><text x="30.3594%" y="303.50"></text></g><g><title>_platform_memmove (19 samples, 0.23%)</title><rect x="30.1340%" y="293" width="0.2335%" height="15" fill="rgb(207,181,40)" fg:x="2452" fg:w="19"/><text x="30.3840%" y="303.50"></text></g><g><title>bitbeat::Machine::run::_{{closure}} (1 samples, 0.01%)</title><rect x="30.3675%" y="293" width="0.0123%" height="15" fill="rgb(254,173,49)" fg:x="2471" fg:w="1"/><text x="30.6175%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.04%)</title><rect x="30.4289%" y="277" width="0.0369%" height="15" fill="rgb(221,1,38)" fg:x="2476" fg:w="3"/><text x="30.6789%" y="287.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (7 samples, 0.09%)</title><rect x="30.4658%" y="277" width="0.0860%" height="15" fill="rgb(206,124,46)" fg:x="2479" fg:w="7"/><text x="30.7158%" y="287.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.10%)</title><rect x="32.7148%" y="261" width="0.0983%" height="15" fill="rgb(249,21,11)" fg:x="2662" fg:w="8"/><text x="32.9648%" y="271.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (13 samples, 0.16%)</title><rect x="32.8131%" y="261" width="0.1598%" height="15" fill="rgb(222,201,40)" fg:x="2670" fg:w="13"/><text x="33.0631%" y="271.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="32.9728%" y="261" width="0.0246%" height="15" fill="rgb(235,61,29)" fg:x="2683" fg:w="2"/><text x="33.2228%" y="271.50"></text></g><g><title>_platform_memmove (11 samples, 0.14%)</title><rect x="32.9974%" y="261" width="0.1352%" height="15" fill="rgb(219,207,3)" fg:x="2685" fg:w="11"/><text x="33.2474%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (4 samples, 0.05%)</title><rect x="33.1326%" y="261" width="0.0492%" height="15" fill="rgb(222,56,46)" fg:x="2696" fg:w="4"/><text x="33.3826%" y="271.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="33.3169%" y="245" width="0.0246%" height="15" fill="rgb(239,76,54)" fg:x="2711" fg:w="2"/><text x="33.5669%" y="255.50"></text></g><g><title>_platform_memmove (12 samples, 0.15%)</title><rect x="33.3415%" y="245" width="0.1475%" height="15" fill="rgb(231,124,27)" fg:x="2713" fg:w="12"/><text x="33.5915%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="33.6733%" y="229" width="0.0246%" height="15" fill="rgb(249,195,6)" fg:x="2740" fg:w="2"/><text x="33.9233%" y="239.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="33.6979%" y="229" width="0.0123%" height="15" fill="rgb(237,174,47)" fg:x="2742" fg:w="1"/><text x="33.9479%" y="239.50"></text></g><g><title>_platform_memmove (6 samples, 0.07%)</title><rect x="33.7102%" y="229" width="0.0737%" height="15" fill="rgb(206,201,31)" fg:x="2743" fg:w="6"/><text x="33.9602%" y="239.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.04%)</title><rect x="33.7839%" y="229" width="0.0369%" height="15" fill="rgb(231,57,52)" fg:x="2749" fg:w="3"/><text x="34.0339%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="34.9760%" y="213" width="0.0123%" height="15" fill="rgb(248,177,22)" fg:x="2846" fg:w="1"/><text x="35.2260%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (8 samples, 0.10%)</title><rect x="34.9883%" y="213" width="0.0983%" height="15" fill="rgb(215,211,37)" fg:x="2847" fg:w="8"/><text x="35.2383%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.02%)</title><rect x="35.0621%" y="197" width="0.0246%" height="15" fill="rgb(241,128,51)" fg:x="2853" fg:w="2"/><text x="35.3121%" y="207.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (7 samples, 0.09%)</title><rect x="36.2296%" y="197" width="0.0860%" height="15" fill="rgb(227,165,31)" fg:x="2948" fg:w="7"/><text x="36.4796%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (260 samples, 3.20%)</title><rect x="36.3156%" y="197" width="3.1953%" height="15" fill="rgb(228,167,24)" fg:x="2955" fg:w="260"/><text x="36.5656%" y="207.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 1.84%)</title><rect x="37.6674%" y="181" width="1.8434%" height="15" fill="rgb(228,143,12)" fg:x="3065" fg:w="150"/><text x="37.9174%" y="191.50">&lt;..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="39.5109%" y="197" width="0.0492%" height="15" fill="rgb(249,149,8)" fg:x="3215" fg:w="4"/><text x="39.7609%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (26 samples, 0.32%)</title><rect x="39.5600%" y="197" width="0.3195%" height="15" fill="rgb(243,35,44)" fg:x="3219" fg:w="26"/><text x="39.8100%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (6 samples, 0.07%)</title><rect x="39.8058%" y="181" width="0.0737%" height="15" fill="rgb(246,89,9)" fg:x="3239" fg:w="6"/><text x="40.0558%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (543 samples, 6.67%)</title><rect x="33.4890%" y="245" width="6.6732%" height="15" fill="rgb(233,213,13)" fg:x="2725" fg:w="543"/><text x="33.7390%" y="255.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (516 samples, 6.34%)</title><rect x="33.8208%" y="229" width="6.3414%" height="15" fill="rgb(233,141,41)" fg:x="2752" fg:w="516"/><text x="34.0708%" y="239.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (413 samples, 5.08%)</title><rect x="35.0866%" y="213" width="5.0756%" height="15" fill="rgb(239,167,4)" fg:x="2855" fg:w="413"/><text x="35.3366%" y="223.50">alloc:..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (23 samples, 0.28%)</title><rect x="39.8796%" y="197" width="0.2827%" height="15" fill="rgb(209,217,16)" fg:x="3245" fg:w="23"/><text x="40.1296%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::into_mut (11 samples, 0.14%)</title><rect x="40.1622%" y="245" width="0.1352%" height="15" fill="rgb(219,88,35)" fg:x="3268" fg:w="11"/><text x="40.4122%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (6 samples, 0.07%)</title><rect x="40.2237%" y="229" width="0.0737%" height="15" fill="rgb(220,193,23)" fg:x="3273" fg:w="6"/><text x="40.4737%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (1 samples, 0.01%)</title><rect x="40.2851%" y="213" width="0.0123%" height="15" fill="rgb(230,90,52)" fg:x="3278" fg:w="1"/><text x="40.5351%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="40.4203%" y="229" width="0.0246%" height="15" fill="rgb(252,106,19)" fg:x="3289" fg:w="2"/><text x="40.6703%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.01%)</title><rect x="40.4449%" y="229" width="0.0123%" height="15" fill="rgb(206,74,20)" fg:x="3291" fg:w="1"/><text x="40.6949%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (4 samples, 0.05%)</title><rect x="40.4572%" y="229" width="0.0492%" height="15" fill="rgb(230,138,44)" fg:x="3292" fg:w="4"/><text x="40.7072%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="40.5678%" y="213" width="0.0246%" height="15" fill="rgb(235,182,43)" fg:x="3301" fg:w="2"/><text x="40.8178%" y="223.50"></text></g><g><title>_platform_memmove (4 samples, 0.05%)</title><rect x="40.5924%" y="213" width="0.0492%" height="15" fill="rgb(242,16,51)" fg:x="3303" fg:w="4"/><text x="40.8424%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (2 samples, 0.02%)</title><rect x="40.6661%" y="181" width="0.0246%" height="15" fill="rgb(248,9,4)" fg:x="3309" fg:w="2"/><text x="40.9161%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (3 samples, 0.04%)</title><rect x="40.6907%" y="149" width="0.0369%" height="15" fill="rgb(210,31,22)" fg:x="3311" fg:w="3"/><text x="40.9407%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (4 samples, 0.05%)</title><rect x="40.6907%" y="165" width="0.0492%" height="15" fill="rgb(239,54,39)" fg:x="3311" fg:w="4"/><text x="40.9407%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="40.7275%" y="149" width="0.0123%" height="15" fill="rgb(230,99,41)" fg:x="3314" fg:w="1"/><text x="40.9775%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (9 samples, 0.11%)</title><rect x="40.6907%" y="181" width="0.1106%" height="15" fill="rgb(253,106,12)" fg:x="3311" fg:w="9"/><text x="40.9407%" y="191.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.06%)</title><rect x="40.7398%" y="165" width="0.0614%" height="15" fill="rgb(213,46,41)" fg:x="3315" fg:w="5"/><text x="40.9898%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.05%)</title><rect x="40.7521%" y="149" width="0.0492%" height="15" fill="rgb(215,133,35)" fg:x="3316" fg:w="4"/><text x="41.0021%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (27 samples, 0.33%)</title><rect x="40.6415%" y="213" width="0.3318%" height="15" fill="rgb(213,28,5)" fg:x="3307" fg:w="27"/><text x="40.8915%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (25 samples, 0.31%)</title><rect x="40.6661%" y="197" width="0.3072%" height="15" fill="rgb(215,77,49)" fg:x="3309" fg:w="25"/><text x="40.9161%" y="207.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (14 samples, 0.17%)</title><rect x="40.8013%" y="181" width="0.1721%" height="15" fill="rgb(248,100,22)" fg:x="3320" fg:w="14"/><text x="41.0513%" y="191.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="41.4403%" y="197" width="0.0246%" height="15" fill="rgb(208,67,9)" fg:x="3372" fg:w="2"/><text x="41.6903%" y="207.50"></text></g><g><title>_platform_memmove (8 samples, 0.10%)</title><rect x="41.4649%" y="197" width="0.0983%" height="15" fill="rgb(219,133,21)" fg:x="3374" fg:w="8"/><text x="41.7149%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (13 samples, 0.16%)</title><rect x="41.8459%" y="181" width="0.1598%" height="15" fill="rgb(246,46,29)" fg:x="3405" fg:w="13"/><text x="42.0959%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (69 samples, 0.85%)</title><rect x="41.5632%" y="197" width="0.8480%" height="15" fill="rgb(246,185,52)" fg:x="3382" fg:w="69"/><text x="41.8132%" y="207.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (33 samples, 0.41%)</title><rect x="42.0057%" y="181" width="0.4056%" height="15" fill="rgb(252,136,11)" fg:x="3418" fg:w="33"/><text x="42.2557%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="42.5218%" y="165" width="0.0123%" height="15" fill="rgb(219,138,53)" fg:x="3460" fg:w="1"/><text x="42.7718%" y="175.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="42.5341%" y="165" width="0.0123%" height="15" fill="rgb(211,51,23)" fg:x="3461" fg:w="1"/><text x="42.7841%" y="175.50"></text></g><g><title>_platform_memmove (5 samples, 0.06%)</title><rect x="42.5587%" y="149" width="0.0614%" height="15" fill="rgb(247,221,28)" fg:x="3463" fg:w="5"/><text x="42.8087%" y="159.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (11 samples, 0.14%)</title><rect x="42.5464%" y="165" width="0.1352%" height="15" fill="rgb(251,222,45)" fg:x="3462" fg:w="11"/><text x="42.7964%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.06%)</title><rect x="42.6201%" y="149" width="0.0614%" height="15" fill="rgb(217,162,53)" fg:x="3468" fg:w="5"/><text x="42.8701%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.01%)</title><rect x="42.6693%" y="133" width="0.0123%" height="15" fill="rgb(229,93,14)" fg:x="3472" fg:w="1"/><text x="42.9193%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (23 samples, 0.28%)</title><rect x="42.4112%" y="181" width="0.2827%" height="15" fill="rgb(209,67,49)" fg:x="3451" fg:w="23"/><text x="42.6612%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.01%)</title><rect x="42.6816%" y="165" width="0.0123%" height="15" fill="rgb(213,87,29)" fg:x="3473" fg:w="1"/><text x="42.9316%" y="175.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (1 samples, 0.01%)</title><rect x="42.7184%" y="85" width="0.0123%" height="15" fill="rgb(205,151,52)" fg:x="3476" fg:w="1"/><text x="42.9684%" y="95.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (3 samples, 0.04%)</title><rect x="42.7062%" y="149" width="0.0369%" height="15" fill="rgb(253,215,39)" fg:x="3475" fg:w="3"/><text x="42.9562%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="42.7184%" y="133" width="0.0246%" height="15" fill="rgb(221,220,41)" fg:x="3476" fg:w="2"/><text x="42.9684%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="42.7184%" y="117" width="0.0246%" height="15" fill="rgb(218,133,21)" fg:x="3476" fg:w="2"/><text x="42.9684%" y="127.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="42.7184%" y="101" width="0.0246%" height="15" fill="rgb(221,193,43)" fg:x="3476" fg:w="2"/><text x="42.9684%" y="111.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.01%)</title><rect x="42.7307%" y="85" width="0.0123%" height="15" fill="rgb(240,128,52)" fg:x="3477" fg:w="1"/><text x="42.9807%" y="95.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (28 samples, 0.34%)</title><rect x="42.4112%" y="197" width="0.3441%" height="15" fill="rgb(253,114,12)" fg:x="3451" fg:w="28"/><text x="42.6612%" y="207.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (5 samples, 0.06%)</title><rect x="42.6939%" y="181" width="0.0614%" height="15" fill="rgb(215,223,47)" fg:x="3474" fg:w="5"/><text x="42.9439%" y="191.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (5 samples, 0.06%)</title><rect x="42.6939%" y="165" width="0.0614%" height="15" fill="rgb(248,225,23)" fg:x="3474" fg:w="5"/><text x="42.9439%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="42.7430%" y="149" width="0.0123%" height="15" fill="rgb(250,108,0)" fg:x="3478" fg:w="1"/><text x="42.9930%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (1 samples, 0.01%)</title><rect x="42.7430%" y="133" width="0.0123%" height="15" fill="rgb(228,208,7)" fg:x="3478" fg:w="1"/><text x="42.9930%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (146 samples, 1.79%)</title><rect x="40.9733%" y="213" width="1.7943%" height="15" fill="rgb(244,45,10)" fg:x="3334" fg:w="146"/><text x="41.2233%" y="223.50">a..</text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.01%)</title><rect x="42.7553%" y="197" width="0.0123%" height="15" fill="rgb(207,125,25)" fg:x="3479" fg:w="1"/><text x="43.0053%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (203 samples, 2.49%)</title><rect x="40.2974%" y="245" width="2.4948%" height="15" fill="rgb(210,195,18)" fg:x="3279" fg:w="203"/><text x="40.5474%" y="255.50">al..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (186 samples, 2.29%)</title><rect x="40.5063%" y="229" width="2.2859%" height="15" fill="rgb(249,80,12)" fg:x="3296" fg:w="186"/><text x="40.7563%" y="239.50">a..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.02%)</title><rect x="42.7676%" y="213" width="0.0246%" height="15" fill="rgb(221,65,9)" fg:x="3480" fg:w="2"/><text x="43.0176%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.02%)</title><rect x="42.7922%" y="245" width="0.0246%" height="15" fill="rgb(235,49,36)" fg:x="3482" fg:w="2"/><text x="43.0422%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (786 samples, 9.66%)</title><rect x="33.1818%" y="261" width="9.6596%" height="15" fill="rgb(225,32,20)" fg:x="2700" fg:w="786"/><text x="33.4318%" y="271.50">alloc::collect..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.02%)</title><rect x="42.8168%" y="245" width="0.0246%" height="15" fill="rgb(215,141,46)" fg:x="3484" fg:w="2"/><text x="43.0668%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (1 samples, 0.01%)</title><rect x="42.8413%" y="261" width="0.0123%" height="15" fill="rgb(250,160,47)" fg:x="3486" fg:w="1"/><text x="43.0913%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (10 samples, 0.12%)</title><rect x="42.8536%" y="261" width="0.1229%" height="15" fill="rgb(216,222,40)" fg:x="3487" fg:w="10"/><text x="43.1036%" y="271.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="43.0503%" y="245" width="0.0123%" height="15" fill="rgb(234,217,39)" fg:x="3503" fg:w="1"/><text x="43.3003%" y="255.50"></text></g><g><title>_platform_memmove (16 samples, 0.20%)</title><rect x="43.0626%" y="245" width="0.1966%" height="15" fill="rgb(207,178,40)" fg:x="3504" fg:w="16"/><text x="43.3126%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.04%)</title><rect x="43.2592%" y="245" width="0.0369%" height="15" fill="rgb(221,136,13)" fg:x="3520" fg:w="3"/><text x="43.5092%" y="255.50"></text></g><g><title>_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="43.6893%" y="213" width="0.0246%" height="15" fill="rgb(249,199,10)" fg:x="3555" fg:w="2"/><text x="43.9393%" y="223.50"></text></g><g><title>DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="43.7508%" y="197" width="0.0246%" height="15" fill="rgb(249,222,13)" fg:x="3560" fg:w="2"/><text x="44.0008%" y="207.50"></text></g><g><title>_malloc_zone_malloc (13 samples, 0.16%)</title><rect x="43.7753%" y="197" width="0.1598%" height="15" fill="rgb(244,185,38)" fg:x="3562" fg:w="13"/><text x="44.0253%" y="207.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (25 samples, 0.31%)</title><rect x="43.9351%" y="197" width="0.3072%" height="15" fill="rgb(236,202,9)" fg:x="3575" fg:w="25"/><text x="44.1851%" y="207.50"></text></g><g><title>rack_get_thread_index (1 samples, 0.01%)</title><rect x="44.2669%" y="181" width="0.0123%" height="15" fill="rgb(250,229,37)" fg:x="3602" fg:w="1"/><text x="44.5169%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (4 samples, 0.05%)</title><rect x="44.2792%" y="181" width="0.0492%" height="15" fill="rgb(206,174,23)" fg:x="3603" fg:w="4"/><text x="44.5292%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="44.5004%" y="165" width="0.0246%" height="15" fill="rgb(211,33,43)" fg:x="3621" fg:w="2"/><text x="44.7504%" y="175.50"></text></g><g><title>rack_get_thread_index (7 samples, 0.09%)</title><rect x="44.5250%" y="165" width="0.0860%" height="15" fill="rgb(245,58,50)" fg:x="3623" fg:w="7"/><text x="44.7750%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.01%)</title><rect x="44.9551%" y="149" width="0.0123%" height="15" fill="rgb(244,68,36)" fg:x="3658" fg:w="1"/><text x="45.2051%" y="159.50"></text></g><g><title>alloc::alloc::alloc (103 samples, 1.27%)</title><rect x="43.7139%" y="213" width="1.2658%" height="15" fill="rgb(232,229,15)" fg:x="3557" fg:w="103"/><text x="43.9639%" y="223.50"></text></g><g><title>szone_malloc_should_clear (60 samples, 0.74%)</title><rect x="44.2423%" y="197" width="0.7374%" height="15" fill="rgb(254,30,23)" fg:x="3600" fg:w="60"/><text x="44.4923%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (53 samples, 0.65%)</title><rect x="44.3284%" y="181" width="0.6513%" height="15" fill="rgb(235,160,14)" fg:x="3607" fg:w="53"/><text x="44.5784%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (30 samples, 0.37%)</title><rect x="44.6110%" y="165" width="0.3687%" height="15" fill="rgb(212,155,44)" fg:x="3630" fg:w="30"/><text x="44.8610%" y="175.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="44.9674%" y="149" width="0.0123%" height="15" fill="rgb(226,2,50)" fg:x="3659" fg:w="1"/><text x="45.2174%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="44.9797%" y="213" width="0.0123%" height="15" fill="rgb(234,177,6)" fg:x="3660" fg:w="1"/><text x="45.2297%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (122 samples, 1.50%)</title><rect x="43.5050%" y="229" width="1.4993%" height="15" fill="rgb(217,24,9)" fg:x="3540" fg:w="122"/><text x="43.7550%" y="239.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.01%)</title><rect x="44.9920%" y="213" width="0.0123%" height="15" fill="rgb(220,13,46)" fg:x="3661" fg:w="1"/><text x="45.2420%" y="223.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (169 samples, 2.08%)</title><rect x="42.9765%" y="261" width="2.0769%" height="15" fill="rgb(239,221,27)" fg:x="3497" fg:w="169"/><text x="43.2265%" y="271.50">a..</text></g><g><title>alloc::alloc::exchange_malloc (143 samples, 1.76%)</title><rect x="43.2961%" y="245" width="1.7574%" height="15" fill="rgb(222,198,25)" fg:x="3523" fg:w="143"/><text x="43.5461%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="45.0043%" y="229" width="0.0492%" height="15" fill="rgb(211,99,13)" fg:x="3662" fg:w="4"/><text x="45.2543%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (2 samples, 0.02%)</title><rect x="45.0289%" y="213" width="0.0246%" height="15" fill="rgb(232,111,31)" fg:x="3664" fg:w="2"/><text x="45.2789%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.25%)</title><rect x="47.3393%" y="245" width="0.2458%" height="15" fill="rgb(245,82,37)" fg:x="3852" fg:w="20"/><text x="47.5893%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (47 samples, 0.58%)</title><rect x="48.3471%" y="229" width="0.5776%" height="15" fill="rgb(227,149,46)" fg:x="3934" fg:w="47"/><text x="48.5971%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (180 samples, 2.21%)</title><rect x="47.5851%" y="245" width="2.2121%" height="15" fill="rgb(218,36,50)" fg:x="3872" fg:w="180"/><text x="47.8351%" y="255.50">&lt;..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (71 samples, 0.87%)</title><rect x="48.9247%" y="229" width="0.8726%" height="15" fill="rgb(226,80,48)" fg:x="3981" fg:w="71"/><text x="49.1747%" y="239.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="49.7972%" y="245" width="0.0123%" height="15" fill="rgb(238,224,15)" fg:x="4052" fg:w="1"/><text x="50.0472%" y="255.50"></text></g><g><title>alloc::string::String::from_utf8 (1 samples, 0.01%)</title><rect x="49.8095%" y="245" width="0.0123%" height="15" fill="rgb(241,136,10)" fg:x="4053" fg:w="1"/><text x="50.0595%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (1 samples, 0.01%)</title><rect x="49.8218%" y="245" width="0.0123%" height="15" fill="rgb(208,32,45)" fg:x="4054" fg:w="1"/><text x="50.0718%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (10 samples, 0.12%)</title><rect x="49.8341%" y="245" width="0.1229%" height="15" fill="rgb(207,135,9)" fg:x="4055" fg:w="10"/><text x="50.0841%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.06%)</title><rect x="50.2519%" y="229" width="0.0614%" height="15" fill="rgb(206,86,44)" fg:x="4089" fg:w="5"/><text x="50.5019%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.07%)</title><rect x="50.4117%" y="213" width="0.0737%" height="15" fill="rgb(245,177,15)" fg:x="4102" fg:w="6"/><text x="50.6617%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (20 samples, 0.25%)</title><rect x="50.3134%" y="229" width="0.2458%" height="15" fill="rgb(206,64,50)" fg:x="4094" fg:w="20"/><text x="50.5634%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (6 samples, 0.07%)</title><rect x="50.4854%" y="213" width="0.0737%" height="15" fill="rgb(234,36,40)" fg:x="4108" fg:w="6"/><text x="50.7354%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="50.5592%" y="229" width="0.0123%" height="15" fill="rgb(213,64,8)" fg:x="4114" fg:w="1"/><text x="50.8092%" y="239.50"></text></g><g><title>bitbeat::handle_add (53 samples, 0.65%)</title><rect x="49.9570%" y="245" width="0.6513%" height="15" fill="rgb(210,75,36)" fg:x="4065" fg:w="53"/><text x="50.2070%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (3 samples, 0.04%)</title><rect x="50.5715%" y="229" width="0.0369%" height="15" fill="rgb(229,88,21)" fg:x="4115" fg:w="3"/><text x="50.8215%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.07%)</title><rect x="51.3211%" y="229" width="0.0737%" height="15" fill="rgb(252,204,47)" fg:x="4176" fg:w="6"/><text x="51.5711%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.14%)</title><rect x="51.6161%" y="213" width="0.1352%" height="15" fill="rgb(208,77,27)" fg:x="4200" fg:w="11"/><text x="51.8661%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (50 samples, 0.61%)</title><rect x="51.3949%" y="229" width="0.6145%" height="15" fill="rgb(221,76,26)" fg:x="4182" fg:w="50"/><text x="51.6449%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (21 samples, 0.26%)</title><rect x="51.7513%" y="213" width="0.2581%" height="15" fill="rgb(225,139,18)" fg:x="4211" fg:w="21"/><text x="52.0013%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.04%)</title><rect x="52.0093%" y="229" width="0.0369%" height="15" fill="rgb(230,137,11)" fg:x="4232" fg:w="3"/><text x="52.2593%" y="239.50"></text></g><g><title>bitbeat::handle_cmp_le (123 samples, 1.51%)</title><rect x="50.6083%" y="245" width="1.5116%" height="15" fill="rgb(212,28,1)" fg:x="4118" fg:w="123"/><text x="50.8583%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (6 samples, 0.07%)</title><rect x="52.0462%" y="229" width="0.0737%" height="15" fill="rgb(248,164,17)" fg:x="4235" fg:w="6"/><text x="52.2962%" y="239.50"></text></g><g><title>bitbeat::handle_halt (1 samples, 0.01%)</title><rect x="52.1199%" y="245" width="0.0123%" height="15" fill="rgb(222,171,42)" fg:x="4241" fg:w="1"/><text x="52.3699%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (33 samples, 0.41%)</title><rect x="52.8819%" y="229" width="0.4056%" height="15" fill="rgb(243,84,45)" fg:x="4303" fg:w="33"/><text x="53.1319%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (22 samples, 0.27%)</title><rect x="53.0171%" y="213" width="0.2704%" height="15" fill="rgb(252,49,23)" fg:x="4314" fg:w="22"/><text x="53.2671%" y="223.50"></text></g><g><title> N]&gt;::try_from (22 samples, 0.27%)</title><rect x="53.0171%" y="197" width="0.2704%" height="15" fill="rgb(215,19,7)" fg:x="4314" fg:w="22"/><text x="53.2671%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.05%)</title><rect x="53.2875%" y="229" width="0.0492%" height="15" fill="rgb(238,81,41)" fg:x="4336" fg:w="4"/><text x="53.5375%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.05%)</title><rect x="53.5701%" y="213" width="0.0492%" height="15" fill="rgb(210,199,37)" fg:x="4359" fg:w="4"/><text x="53.8201%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (33 samples, 0.41%)</title><rect x="53.3366%" y="229" width="0.4056%" height="15" fill="rgb(244,192,49)" fg:x="4340" fg:w="33"/><text x="53.5866%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.12%)</title><rect x="53.6193%" y="213" width="0.1229%" height="15" fill="rgb(226,211,11)" fg:x="4363" fg:w="10"/><text x="53.8693%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (17 samples, 0.21%)</title><rect x="53.7422%" y="229" width="0.2089%" height="15" fill="rgb(236,162,54)" fg:x="4373" fg:w="17"/><text x="53.9922%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.02%)</title><rect x="53.9511%" y="229" width="0.0246%" height="15" fill="rgb(220,229,9)" fg:x="4390" fg:w="2"/><text x="54.2011%" y="239.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (1 samples, 0.01%)</title><rect x="53.9757%" y="229" width="0.0123%" height="15" fill="rgb(250,87,22)" fg:x="4392" fg:w="1"/><text x="54.2257%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u32,anyhow::Error&gt;&gt; (1 samples, 0.01%)</title><rect x="53.9880%" y="229" width="0.0123%" height="15" fill="rgb(239,43,17)" fg:x="4393" fg:w="1"/><text x="54.2380%" y="239.50"></text></g><g><title>bitbeat::handle_jump_if (155 samples, 1.90%)</title><rect x="52.1322%" y="245" width="1.9049%" height="15" fill="rgb(231,177,25)" fg:x="4242" fg:w="155"/><text x="52.3822%" y="255.50">b..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (3 samples, 0.04%)</title><rect x="54.0002%" y="229" width="0.0369%" height="15" fill="rgb(219,179,1)" fg:x="4394" fg:w="3"/><text x="54.2502%" y="239.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (40 samples, 0.49%)</title><rect x="55.8068%" y="229" width="0.4916%" height="15" fill="rgb(238,219,53)" fg:x="4541" fg:w="40"/><text x="56.0568%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (34 samples, 0.42%)</title><rect x="55.8805%" y="213" width="0.4178%" height="15" fill="rgb(232,167,36)" fg:x="4547" fg:w="34"/><text x="56.1305%" y="223.50"></text></g><g><title> N]&gt;::try_from (34 samples, 0.42%)</title><rect x="55.8805%" y="197" width="0.4178%" height="15" fill="rgb(244,19,51)" fg:x="4547" fg:w="34"/><text x="56.1305%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.07%)</title><rect x="56.2984%" y="229" width="0.0737%" height="15" fill="rgb(224,6,22)" fg:x="4581" fg:w="6"/><text x="56.5484%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.07%)</title><rect x="56.7531%" y="213" width="0.0737%" height="15" fill="rgb(224,145,5)" fg:x="4618" fg:w="6"/><text x="57.0031%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (64 samples, 0.79%)</title><rect x="56.3721%" y="229" width="0.7865%" height="15" fill="rgb(234,130,49)" fg:x="4587" fg:w="64"/><text x="56.6221%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (27 samples, 0.33%)</title><rect x="56.8268%" y="213" width="0.3318%" height="15" fill="rgb(254,6,2)" fg:x="4624" fg:w="27"/><text x="57.0768%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (14 samples, 0.17%)</title><rect x="57.1587%" y="229" width="0.1721%" height="15" fill="rgb(208,96,46)" fg:x="4651" fg:w="14"/><text x="57.4087%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.05%)</title><rect x="57.3307%" y="229" width="0.0492%" height="15" fill="rgb(239,3,39)" fg:x="4665" fg:w="4"/><text x="57.5807%" y="239.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_le_bytes (2 samples, 0.02%)</title><rect x="57.3799%" y="229" width="0.0246%" height="15" fill="rgb(233,210,1)" fg:x="4669" fg:w="2"/><text x="57.6299%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;i64,anyhow::Error&gt;&gt; (4 samples, 0.05%)</title><rect x="57.4044%" y="229" width="0.0492%" height="15" fill="rgb(244,137,37)" fg:x="4671" fg:w="4"/><text x="57.6544%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (7 samples, 0.09%)</title><rect x="57.4536%" y="229" width="0.0860%" height="15" fill="rgb(240,136,2)" fg:x="4675" fg:w="7"/><text x="57.7036%" y="239.50"></text></g><g><title>bitbeat::handle_load_imm (286 samples, 3.51%)</title><rect x="54.0371%" y="245" width="3.5148%" height="15" fill="rgb(239,18,37)" fg:x="4397" fg:w="286"/><text x="54.2871%" y="255.50">bit..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.01%)</title><rect x="57.5396%" y="229" width="0.0123%" height="15" fill="rgb(218,185,22)" fg:x="4682" fg:w="1"/><text x="57.7896%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="58.2401%" y="229" width="0.0369%" height="15" fill="rgb(225,218,4)" fg:x="4739" fg:w="3"/><text x="58.4901%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.11%)</title><rect x="58.5228%" y="213" width="0.1106%" height="15" fill="rgb(230,182,32)" fg:x="4762" fg:w="9"/><text x="58.7728%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (45 samples, 0.55%)</title><rect x="58.2770%" y="229" width="0.5530%" height="15" fill="rgb(242,56,43)" fg:x="4742" fg:w="45"/><text x="58.5270%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (16 samples, 0.20%)</title><rect x="58.6334%" y="213" width="0.1966%" height="15" fill="rgb(233,99,24)" fg:x="4771" fg:w="16"/><text x="58.8834%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (26 samples, 0.32%)</title><rect x="58.8300%" y="229" width="0.3195%" height="15" fill="rgb(234,209,42)" fg:x="4787" fg:w="26"/><text x="59.0800%" y="239.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (2 samples, 0.02%)</title><rect x="59.1250%" y="213" width="0.0246%" height="15" fill="rgb(227,7,12)" fg:x="4811" fg:w="2"/><text x="59.3750%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="59.1496%" y="229" width="0.0123%" height="15" fill="rgb(245,203,43)" fg:x="4813" fg:w="1"/><text x="59.3996%" y="239.50"></text></g><g><title>bitbeat::handle_recv (136 samples, 1.67%)</title><rect x="57.5519%" y="245" width="1.6714%" height="15" fill="rgb(238,205,33)" fg:x="4683" fg:w="136"/><text x="57.8019%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (5 samples, 0.06%)</title><rect x="59.1619%" y="229" width="0.0614%" height="15" fill="rgb(231,56,7)" fg:x="4814" fg:w="5"/><text x="59.4119%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.05%)</title><rect x="60.0836%" y="229" width="0.0492%" height="15" fill="rgb(244,186,29)" fg:x="4889" fg:w="4"/><text x="60.3336%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.04%)</title><rect x="60.2310%" y="213" width="0.0369%" height="15" fill="rgb(234,111,31)" fg:x="4901" fg:w="3"/><text x="60.4810%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (28 samples, 0.34%)</title><rect x="60.1327%" y="229" width="0.3441%" height="15" fill="rgb(241,149,10)" fg:x="4893" fg:w="28"/><text x="60.3827%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (17 samples, 0.21%)</title><rect x="60.2679%" y="213" width="0.2089%" height="15" fill="rgb(249,206,44)" fg:x="4904" fg:w="17"/><text x="60.5179%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (1 samples, 0.01%)</title><rect x="60.6366%" y="213" width="0.0123%" height="15" fill="rgb(251,153,30)" fg:x="4934" fg:w="1"/><text x="60.8866%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.01%)</title><rect x="60.6489%" y="213" width="0.0123%" height="15" fill="rgb(239,152,38)" fg:x="4935" fg:w="1"/><text x="60.8989%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (6 samples, 0.07%)</title><rect x="60.6612%" y="213" width="0.0737%" height="15" fill="rgb(249,139,47)" fg:x="4936" fg:w="6"/><text x="60.9112%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (3 samples, 0.04%)</title><rect x="60.6980%" y="197" width="0.0369%" height="15" fill="rgb(244,64,35)" fg:x="4939" fg:w="3"/><text x="60.9480%" y="207.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (5 samples, 0.06%)</title><rect x="60.7349%" y="213" width="0.0614%" height="15" fill="rgb(216,46,15)" fg:x="4942" fg:w="5"/><text x="60.9849%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="61.4969%" y="197" width="0.0123%" height="15" fill="rgb(250,74,19)" fg:x="5004" fg:w="1"/><text x="61.7469%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (10 samples, 0.12%)</title><rect x="61.5092%" y="197" width="0.1229%" height="15" fill="rgb(249,42,33)" fg:x="5005" fg:w="10"/><text x="61.7592%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.02%)</title><rect x="61.6075%" y="181" width="0.0246%" height="15" fill="rgb(242,149,17)" fg:x="5013" fg:w="2"/><text x="61.8575%" y="191.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (9 samples, 0.11%)</title><rect x="63.0699%" y="181" width="0.1106%" height="15" fill="rgb(244,29,21)" fg:x="5132" fg:w="9"/><text x="63.3199%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (185 samples, 2.27%)</title><rect x="63.1805%" y="181" width="2.2736%" height="15" fill="rgb(220,130,37)" fg:x="5141" fg:w="185"/><text x="63.4305%" y="191.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (105 samples, 1.29%)</title><rect x="64.1637%" y="165" width="1.2904%" height="15" fill="rgb(211,67,2)" fg:x="5221" fg:w="105"/><text x="64.4137%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (13 samples, 0.16%)</title><rect x="65.4541%" y="181" width="0.1598%" height="15" fill="rgb(235,68,52)" fg:x="5326" fg:w="13"/><text x="65.7041%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (29 samples, 0.36%)</title><rect x="65.6139%" y="181" width="0.3564%" height="15" fill="rgb(246,142,3)" fg:x="5339" fg:w="29"/><text x="65.8639%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.02%)</title><rect x="65.9457%" y="165" width="0.0246%" height="15" fill="rgb(241,25,7)" fg:x="5366" fg:w="2"/><text x="66.1957%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get_mut (464 samples, 5.70%)</title><rect x="60.4768%" y="229" width="5.7023%" height="15" fill="rgb(242,119,39)" fg:x="4921" fg:w="464"/><text x="60.7268%" y="239.50">alloc::..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (438 samples, 5.38%)</title><rect x="60.7964%" y="213" width="5.3828%" height="15" fill="rgb(241,98,45)" fg:x="4947" fg:w="438"/><text x="61.0464%" y="223.50">alloc::..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (370 samples, 4.55%)</title><rect x="61.6321%" y="197" width="4.5471%" height="15" fill="rgb(254,28,30)" fg:x="5015" fg:w="370"/><text x="61.8821%" y="207.50">alloc..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (17 samples, 0.21%)</title><rect x="65.9703%" y="181" width="0.2089%" height="15" fill="rgb(241,142,54)" fg:x="5368" fg:w="17"/><text x="66.2203%" y="191.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.02%)</title><rect x="66.1792%" y="229" width="0.0246%" height="15" fill="rgb(222,85,15)" fg:x="5385" fg:w="2"/><text x="66.4292%" y="239.50"></text></g><g><title>DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="67.1501%" y="149" width="0.0246%" height="15" fill="rgb(210,85,47)" fg:x="5464" fg:w="2"/><text x="67.4001%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="67.1746%" y="149" width="0.0123%" height="15" fill="rgb(224,206,25)" fg:x="5466" fg:w="1"/><text x="67.4246%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (18 samples, 0.22%)</title><rect x="67.0394%" y="181" width="0.2212%" height="15" fill="rgb(243,201,19)" fg:x="5455" fg:w="18"/><text x="67.2894%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.16%)</title><rect x="67.1009%" y="165" width="0.1598%" height="15" fill="rgb(236,59,4)" fg:x="5460" fg:w="13"/><text x="67.3509%" y="175.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.07%)</title><rect x="67.1869%" y="149" width="0.0737%" height="15" fill="rgb(254,179,45)" fg:x="5467" fg:w="6"/><text x="67.4369%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 0.25%)</title><rect x="67.0272%" y="197" width="0.2458%" height="15" fill="rgb(226,14,10)" fg:x="5454" fg:w="20"/><text x="67.2772%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="67.2607%" y="181" width="0.0123%" height="15" fill="rgb(244,27,41)" fg:x="5473" fg:w="1"/><text x="67.5107%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (88 samples, 1.08%)</title><rect x="66.2038%" y="229" width="1.0815%" height="15" fill="rgb(235,35,32)" fg:x="5387" fg:w="88"/><text x="66.4538%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (24 samples, 0.29%)</title><rect x="66.9903%" y="213" width="0.2949%" height="15" fill="rgb(218,68,31)" fg:x="5451" fg:w="24"/><text x="67.2403%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.01%)</title><rect x="67.2730%" y="197" width="0.0123%" height="15" fill="rgb(207,120,37)" fg:x="5474" fg:w="1"/><text x="67.5230%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (15 samples, 0.18%)</title><rect x="67.2852%" y="229" width="0.1843%" height="15" fill="rgb(227,98,0)" fg:x="5475" fg:w="15"/><text x="67.5352%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (12 samples, 0.15%)</title><rect x="67.3221%" y="213" width="0.1475%" height="15" fill="rgb(207,7,3)" fg:x="5478" fg:w="12"/><text x="67.5721%" y="223.50"></text></g><g><title>bitbeat::handle_send (678 samples, 8.33%)</title><rect x="59.2233%" y="245" width="8.3323%" height="15" fill="rgb(206,98,19)" fg:x="4819" fg:w="678"/><text x="59.4733%" y="255.50">bitbeat::han..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (7 samples, 0.09%)</title><rect x="67.4696%" y="229" width="0.0860%" height="15" fill="rgb(217,5,26)" fg:x="5490" fg:w="7"/><text x="67.7196%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.04%)</title><rect x="67.5187%" y="213" width="0.0369%" height="15" fill="rgb(235,190,38)" fg:x="5494" fg:w="3"/><text x="67.7687%" y="223.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (65 samples, 0.80%)</title><rect x="71.6112%" y="229" width="0.7988%" height="15" fill="rgb(247,86,24)" fg:x="5827" fg:w="65"/><text x="71.8612%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (56 samples, 0.69%)</title><rect x="71.7218%" y="213" width="0.6882%" height="15" fill="rgb(205,101,16)" fg:x="5836" fg:w="56"/><text x="71.9718%" y="223.50"></text></g><g><title> N]&gt;::try_from (56 samples, 0.69%)</title><rect x="71.7218%" y="197" width="0.6882%" height="15" fill="rgb(246,168,33)" fg:x="5836" fg:w="56"/><text x="71.9718%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.34%)</title><rect x="72.4100%" y="229" width="0.3441%" height="15" fill="rgb(231,114,1)" fg:x="5892" fg:w="28"/><text x="72.6600%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (3 samples, 0.04%)</title><rect x="72.7172%" y="213" width="0.0369%" height="15" fill="rgb(207,184,53)" fg:x="5917" fg:w="3"/><text x="72.9672%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.16%)</title><rect x="72.7541%" y="229" width="0.1598%" height="15" fill="rgb(224,95,51)" fg:x="5920" fg:w="13"/><text x="73.0041%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (35 samples, 0.43%)</title><rect x="72.9876%" y="213" width="0.4301%" height="15" fill="rgb(212,188,45)" fg:x="5939" fg:w="35"/><text x="73.2376%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (26 samples, 0.32%)</title><rect x="73.0982%" y="197" width="0.3195%" height="15" fill="rgb(223,154,38)" fg:x="5948" fg:w="26"/><text x="73.3482%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (42 samples, 0.52%)</title><rect x="72.9139%" y="229" width="0.5162%" height="15" fill="rgb(251,22,52)" fg:x="5933" fg:w="42"/><text x="73.1639%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.01%)</title><rect x="73.4177%" y="213" width="0.0123%" height="15" fill="rgb(229,209,22)" fg:x="5974" fg:w="1"/><text x="73.6677%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="75.2857%" y="213" width="0.0246%" height="15" fill="rgb(234,138,34)" fg:x="6126" fg:w="2"/><text x="75.5357%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (233 samples, 2.86%)</title><rect x="73.4300%" y="229" width="2.8635%" height="15" fill="rgb(212,95,11)" fg:x="5975" fg:w="233"/><text x="73.6800%" y="239.50">&lt;a..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (80 samples, 0.98%)</title><rect x="75.3103%" y="213" width="0.9832%" height="15" fill="rgb(240,179,47)" fg:x="6128" fg:w="80"/><text x="75.5603%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (59 samples, 0.73%)</title><rect x="76.2935%" y="229" width="0.7251%" height="15" fill="rgb(240,163,11)" fg:x="6208" fg:w="59"/><text x="76.5435%" y="239.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="77.0186%" y="229" width="0.0123%" height="15" fill="rgb(236,37,12)" fg:x="6267" fg:w="1"/><text x="77.2686%" y="239.50"></text></g><g><title>_platform_memmove (14 samples, 0.17%)</title><rect x="77.0308%" y="229" width="0.1721%" height="15" fill="rgb(232,164,16)" fg:x="6268" fg:w="14"/><text x="77.2808%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (27 samples, 0.33%)</title><rect x="77.6576%" y="213" width="0.3318%" height="15" fill="rgb(244,205,15)" fg:x="6319" fg:w="27"/><text x="77.9076%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="77.9403%" y="197" width="0.0492%" height="15" fill="rgb(223,117,47)" fg:x="6342" fg:w="4"/><text x="78.1903%" y="207.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.04%)</title><rect x="77.9894%" y="213" width="0.0369%" height="15" fill="rgb(244,107,35)" fg:x="6346" fg:w="3"/><text x="78.2394%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.86%)</title><rect x="78.9480%" y="181" width="0.8603%" height="15" fill="rgb(205,140,8)" fg:x="6424" fg:w="70"/><text x="79.1980%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.64%)</title><rect x="79.1692%" y="165" width="0.6391%" height="15" fill="rgb(228,84,46)" fg:x="6442" fg:w="52"/><text x="79.4192%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="79.8083%" y="181" width="0.0369%" height="15" fill="rgb(254,188,9)" fg:x="6494" fg:w="3"/><text x="80.0583%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (59 samples, 0.73%)</title><rect x="79.8452%" y="181" width="0.7251%" height="15" fill="rgb(206,112,54)" fg:x="6497" fg:w="59"/><text x="80.0952%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (6 samples, 0.07%)</title><rect x="80.4965%" y="165" width="0.0737%" height="15" fill="rgb(216,84,49)" fg:x="6550" fg:w="6"/><text x="80.7465%" y="175.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (12 samples, 0.15%)</title><rect x="80.7177%" y="149" width="0.1475%" height="15" fill="rgb(214,194,35)" fg:x="6568" fg:w="12"/><text x="80.9677%" y="159.50"></text></g><g><title>alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (27 samples, 0.33%)</title><rect x="80.5702%" y="181" width="0.3318%" height="15" fill="rgb(249,28,3)" fg:x="6556" fg:w="27"/><text x="80.8202%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (24 samples, 0.29%)</title><rect x="80.6071%" y="165" width="0.2949%" height="15" fill="rgb(222,56,52)" fg:x="6559" fg:w="24"/><text x="80.8571%" y="175.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFull&gt;::index (3 samples, 0.04%)</title><rect x="80.8652%" y="149" width="0.0369%" height="15" fill="rgb(245,217,50)" fg:x="6580" fg:w="3"/><text x="81.1152%" y="159.50"></text></g><g><title>DYLD-STUB$$memcmp (2 samples, 0.02%)</title><rect x="81.5165%" y="149" width="0.0246%" height="15" fill="rgb(213,201,24)" fg:x="6633" fg:w="2"/><text x="81.7665%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (360 samples, 4.42%)</title><rect x="77.2029%" y="229" width="4.4242%" height="15" fill="rgb(248,116,28)" fg:x="6282" fg:w="360"/><text x="77.4529%" y="239.50">alloc..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (293 samples, 3.60%)</title><rect x="78.0263%" y="213" width="3.6008%" height="15" fill="rgb(219,72,43)" fg:x="6349" fg:w="293"/><text x="78.2763%" y="223.50">allo..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (257 samples, 3.16%)</title><rect x="78.4687%" y="197" width="3.1584%" height="15" fill="rgb(209,138,14)" fg:x="6385" fg:w="257"/><text x="78.7187%" y="207.50">all..</text></g><g><title>core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (59 samples, 0.73%)</title><rect x="80.9021%" y="181" width="0.7251%" height="15" fill="rgb(222,18,33)" fg:x="6583" fg:w="59"/><text x="81.1521%" y="191.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (48 samples, 0.59%)</title><rect x="81.0372%" y="165" width="0.5899%" height="15" fill="rgb(213,199,7)" fg:x="6594" fg:w="48"/><text x="81.2872%" y="175.50"></text></g><g><title>_platform_memcmp (7 samples, 0.09%)</title><rect x="81.5411%" y="149" width="0.0860%" height="15" fill="rgb(250,110,10)" fg:x="6635" fg:w="7"/><text x="81.7911%" y="159.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.02%)</title><rect x="81.6271%" y="229" width="0.0246%" height="15" fill="rgb(248,123,6)" fg:x="6642" fg:w="2"/><text x="81.8771%" y="239.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="82.0696%" y="197" width="0.0123%" height="15" fill="rgb(206,91,31)" fg:x="6678" fg:w="1"/><text x="82.3196%" y="207.50"></text></g><g><title>_platform_memmove (12 samples, 0.15%)</title><rect x="82.0818%" y="197" width="0.1475%" height="15" fill="rgb(211,154,13)" fg:x="6679" fg:w="12"/><text x="82.3318%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.01%)</title><rect x="82.2293%" y="197" width="0.0123%" height="15" fill="rgb(225,148,7)" fg:x="6691" fg:w="1"/><text x="82.4793%" y="207.50"></text></g><g><title>DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="84.2940%" y="165" width="0.0246%" height="15" fill="rgb(220,160,43)" fg:x="6859" fg:w="2"/><text x="84.5440%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="84.3185%" y="165" width="0.0123%" height="15" fill="rgb(213,52,39)" fg:x="6861" fg:w="1"/><text x="84.5685%" y="175.50"></text></g><g><title>_malloc_zone_malloc (22 samples, 0.27%)</title><rect x="84.3308%" y="165" width="0.2704%" height="15" fill="rgb(243,137,7)" fg:x="6862" fg:w="22"/><text x="84.5808%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (89 samples, 1.09%)</title><rect x="83.8761%" y="181" width="1.0938%" height="15" fill="rgb(230,79,13)" fg:x="6825" fg:w="89"/><text x="84.1261%" y="191.50"></text></g><g><title>nanov2_malloc_type (30 samples, 0.37%)</title><rect x="84.6012%" y="165" width="0.3687%" height="15" fill="rgb(247,105,23)" fg:x="6884" fg:w="30"/><text x="84.8512%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (226 samples, 2.78%)</title><rect x="82.2416%" y="197" width="2.7774%" height="15" fill="rgb(223,179,41)" fg:x="6692" fg:w="226"/><text x="82.4916%" y="207.50">al..</text></g><g><title>core::hint::assert_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="84.9699%" y="181" width="0.0492%" height="15" fill="rgb(218,9,34)" fg:x="6914" fg:w="4"/><text x="85.2199%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (401 samples, 4.93%)</title><rect x="81.7132%" y="213" width="4.9281%" height="15" fill="rgb(222,106,8)" fg:x="6649" fg:w="401"/><text x="81.9632%" y="223.50">&lt;T as ..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (132 samples, 1.62%)</title><rect x="85.0190%" y="197" width="1.6222%" height="15" fill="rgb(211,220,0)" fg:x="6918" fg:w="132"/><text x="85.2690%" y="207.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (28 samples, 0.34%)</title><rect x="86.2972%" y="181" width="0.3441%" height="15" fill="rgb(229,52,16)" fg:x="7022" fg:w="28"/><text x="86.5472%" y="191.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec (407 samples, 5.00%)</title><rect x="81.6517%" y="229" width="5.0018%" height="15" fill="rgb(212,155,18)" fg:x="6644" fg:w="407"/><text x="81.9017%" y="239.50">alloc:..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.01%)</title><rect x="86.6413%" y="213" width="0.0123%" height="15" fill="rgb(242,21,14)" fg:x="7050" fg:w="1"/><text x="86.8913%" y="223.50"></text></g><g><title>alloc::string::String::as_str (38 samples, 0.47%)</title><rect x="86.6536%" y="229" width="0.4670%" height="15" fill="rgb(222,19,48)" fg:x="7051" fg:w="38"/><text x="86.9036%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (15 samples, 0.18%)</title><rect x="86.9362%" y="213" width="0.1843%" height="15" fill="rgb(232,45,27)" fg:x="7074" fg:w="15"/><text x="87.1862%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (19 samples, 0.23%)</title><rect x="87.3786%" y="213" width="0.2335%" height="15" fill="rgb(249,103,42)" fg:x="7110" fg:w="19"/><text x="87.6286%" y="223.50"></text></g><g><title>alloc::string::String::from_utf8 (63 samples, 0.77%)</title><rect x="87.1206%" y="229" width="0.7742%" height="15" fill="rgb(246,81,33)" fg:x="7089" fg:w="63"/><text x="87.3706%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (23 samples, 0.28%)</title><rect x="87.6121%" y="213" width="0.2827%" height="15" fill="rgb(252,33,42)" fg:x="7129" fg:w="23"/><text x="87.8621%" y="223.50"></text></g><g><title>_platform_memmove (10 samples, 0.12%)</title><rect x="88.2635%" y="213" width="0.1229%" height="15" fill="rgb(209,212,41)" fg:x="7182" fg:w="10"/><text x="88.5135%" y="223.50"></text></g><g><title>_realloc (2 samples, 0.02%)</title><rect x="88.5461%" y="181" width="0.0246%" height="15" fill="rgb(207,154,6)" fg:x="7205" fg:w="2"/><text x="88.7961%" y="191.50"></text></g><g><title>DYLD-STUB$$realloc (1 samples, 0.01%)</title><rect x="88.6199%" y="165" width="0.0123%" height="15" fill="rgb(223,64,47)" fg:x="7211" fg:w="1"/><text x="88.8699%" y="175.50"></text></g><g><title>__rdl_realloc (3 samples, 0.04%)</title><rect x="88.6322%" y="165" width="0.0369%" height="15" fill="rgb(211,161,38)" fg:x="7212" fg:w="3"/><text x="88.8822%" y="175.50"></text></g><g><title>_nanov2_free (4 samples, 0.05%)</title><rect x="88.8534%" y="133" width="0.0492%" height="15" fill="rgb(219,138,40)" fg:x="7230" fg:w="4"/><text x="89.1034%" y="143.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="88.9025%" y="133" width="0.0123%" height="15" fill="rgb(241,228,46)" fg:x="7234" fg:w="1"/><text x="89.1525%" y="143.50"></text></g><g><title>_nanov2_free (19 samples, 0.23%)</title><rect x="88.9763%" y="117" width="0.2335%" height="15" fill="rgb(223,209,38)" fg:x="7240" fg:w="19"/><text x="89.2263%" y="127.50"></text></g><g><title>_platform_memmove (11 samples, 0.14%)</title><rect x="89.2098%" y="117" width="0.1352%" height="15" fill="rgb(236,164,45)" fg:x="7259" fg:w="11"/><text x="89.4598%" y="127.50"></text></g><g><title>nanov2_malloc (10 samples, 0.12%)</title><rect x="89.3450%" y="117" width="0.1229%" height="15" fill="rgb(231,15,5)" fg:x="7270" fg:w="10"/><text x="89.5950%" y="127.50"></text></g><g><title>_malloc_zone_realloc (63 samples, 0.77%)</title><rect x="88.7551%" y="149" width="0.7742%" height="15" fill="rgb(252,35,15)" fg:x="7222" fg:w="63"/><text x="89.0051%" y="159.50"></text></g><g><title>nanov2_realloc (50 samples, 0.61%)</title><rect x="88.9148%" y="133" width="0.6145%" height="15" fill="rgb(248,181,18)" fg:x="7235" fg:w="50"/><text x="89.1648%" y="143.50"></text></g><g><title>nanov2_pointer_size (5 samples, 0.06%)</title><rect x="89.4679%" y="117" width="0.0614%" height="15" fill="rgb(233,39,42)" fg:x="7280" fg:w="5"/><text x="89.7179%" y="127.50"></text></g><g><title>nanov2_realloc (1 samples, 0.01%)</title><rect x="89.5293%" y="149" width="0.0123%" height="15" fill="rgb(238,110,33)" fg:x="7285" fg:w="1"/><text x="89.7793%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (95 samples, 1.17%)</title><rect x="88.4478%" y="197" width="1.1675%" height="15" fill="rgb(233,195,10)" fg:x="7197" fg:w="95"/><text x="88.6978%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (85 samples, 1.04%)</title><rect x="88.5707%" y="181" width="1.0446%" height="15" fill="rgb(254,105,3)" fg:x="7207" fg:w="85"/><text x="88.8207%" y="191.50"></text></g><g><title>_realloc (77 samples, 0.95%)</title><rect x="88.6690%" y="165" width="0.9463%" height="15" fill="rgb(221,225,9)" fg:x="7215" fg:w="77"/><text x="88.9190%" y="175.50"></text></g><g><title>nanov2_size (6 samples, 0.07%)</title><rect x="89.5416%" y="149" width="0.0737%" height="15" fill="rgb(224,227,45)" fg:x="7286" fg:w="6"/><text x="89.7916%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (102 samples, 1.25%)</title><rect x="88.3864%" y="213" width="1.2535%" height="15" fill="rgb(229,198,43)" fg:x="7192" fg:w="102"/><text x="88.6364%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="89.6153%" y="197" width="0.0246%" height="15" fill="rgb(206,209,35)" fg:x="7292" fg:w="2"/><text x="89.8653%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="89.6399%" y="213" width="0.0246%" height="15" fill="rgb(245,195,53)" fg:x="7294" fg:w="2"/><text x="89.8899%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (162 samples, 1.99%)</title><rect x="87.8948%" y="229" width="1.9909%" height="15" fill="rgb(240,92,26)" fg:x="7152" fg:w="162"/><text x="88.1448%" y="239.50">a..</text></g><g><title>core::intrinsics::copy::precondition_check (18 samples, 0.22%)</title><rect x="89.6645%" y="213" width="0.2212%" height="15" fill="rgb(207,40,23)" fg:x="7296" fg:w="18"/><text x="89.9145%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7 samples, 0.09%)</title><rect x="89.8857%" y="229" width="0.0860%" height="15" fill="rgb(223,111,35)" fg:x="7314" fg:w="7"/><text x="90.1357%" y="239.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.04%)</title><rect x="90.4019%" y="213" width="0.0369%" height="15" fill="rgb(229,147,28)" fg:x="7356" fg:w="3"/><text x="90.6519%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.73%)</title><rect x="90.4387%" y="213" width="0.7251%" height="15" fill="rgb(211,29,28)" fg:x="7359" fg:w="59"/><text x="90.6887%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.31%)</title><rect x="90.8566%" y="197" width="0.3072%" height="15" fill="rgb(228,72,33)" fg:x="7393" fg:w="25"/><text x="91.1066%" y="207.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="91.1638%" y="213" width="0.0246%" height="15" fill="rgb(205,214,31)" fg:x="7418" fg:w="2"/><text x="91.4138%" y="223.50"></text></g><g><title>_platform_memmove (16 samples, 0.20%)</title><rect x="91.1884%" y="213" width="0.1966%" height="15" fill="rgb(224,111,15)" fg:x="7420" fg:w="16"/><text x="91.4384%" y="223.50"></text></g><g><title>_platform_memset (5 samples, 0.06%)</title><rect x="91.3850%" y="213" width="0.0614%" height="15" fill="rgb(253,21,26)" fg:x="7436" fg:w="5"/><text x="91.6350%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.01%)</title><rect x="91.4465%" y="213" width="0.0123%" height="15" fill="rgb(245,139,43)" fg:x="7441" fg:w="1"/><text x="91.6965%" y="223.50"></text></g><g><title>bitbeat::Process::new (125 samples, 1.54%)</title><rect x="89.9717%" y="229" width="1.5362%" height="15" fill="rgb(252,170,7)" fg:x="7321" fg:w="125"/><text x="90.2217%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (4 samples, 0.05%)</title><rect x="91.4588%" y="213" width="0.0492%" height="15" fill="rgb(231,118,14)" fg:x="7442" fg:w="4"/><text x="91.7088%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="91.4833%" y="197" width="0.0246%" height="15" fill="rgb(238,83,0)" fg:x="7444" fg:w="2"/><text x="91.7333%" y="207.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.02%)</title><rect x="91.5940%" y="197" width="0.0246%" height="15" fill="rgb(221,39,39)" fg:x="7453" fg:w="2"/><text x="91.8440%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.47%)</title><rect x="91.9258%" y="133" width="0.4670%" height="15" fill="rgb(222,119,46)" fg:x="7480" fg:w="38"/><text x="92.1758%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (36 samples, 0.44%)</title><rect x="91.9504%" y="117" width="0.4424%" height="15" fill="rgb(222,165,49)" fg:x="7482" fg:w="36"/><text x="92.2004%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (9 samples, 0.11%)</title><rect x="92.2822%" y="101" width="0.1106%" height="15" fill="rgb(219,113,52)" fg:x="7509" fg:w="9"/><text x="92.5322%" y="111.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (1 samples, 0.01%)</title><rect x="92.3805%" y="85" width="0.0123%" height="15" fill="rgb(214,7,15)" fg:x="7517" fg:w="1"/><text x="92.6305%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (18 samples, 0.22%)</title><rect x="92.3928%" y="133" width="0.2212%" height="15" fill="rgb(235,32,4)" fg:x="7518" fg:w="18"/><text x="92.6428%" y="143.50"></text></g><g><title>bitbeat::handle_spawn::_{{closure}} (3 samples, 0.04%)</title><rect x="93.2039%" y="69" width="0.0369%" height="15" fill="rgb(238,90,54)" fg:x="7584" fg:w="3"/><text x="93.4539%" y="79.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (12 samples, 0.15%)</title><rect x="93.1424%" y="85" width="0.1475%" height="15" fill="rgb(213,208,19)" fg:x="7579" fg:w="12"/><text x="93.3924%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.05%)</title><rect x="93.2408%" y="69" width="0.0492%" height="15" fill="rgb(233,156,4)" fg:x="7587" fg:w="4"/><text x="93.4908%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (4 samples, 0.05%)</title><rect x="93.2408%" y="53" width="0.0492%" height="15" fill="rgb(207,194,5)" fg:x="7587" fg:w="4"/><text x="93.4908%" y="63.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.02%)</title><rect x="93.2899%" y="85" width="0.0246%" height="15" fill="rgb(206,111,30)" fg:x="7591" fg:w="2"/><text x="93.5399%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;&amp;u8,i64,(),bitbeat::handle_spawn::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (8 samples, 0.10%)</title><rect x="93.3145%" y="85" width="0.0983%" height="15" fill="rgb(243,70,54)" fg:x="7593" fg:w="8"/><text x="93.5645%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (5 samples, 0.06%)</title><rect x="93.3514%" y="69" width="0.0614%" height="15" fill="rgb(242,28,8)" fg:x="7596" fg:w="5"/><text x="93.6014%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt; (3 samples, 0.04%)</title><rect x="93.3759%" y="53" width="0.0369%" height="15" fill="rgb(219,106,18)" fg:x="7598" fg:w="3"/><text x="93.6259%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (1 samples, 0.01%)</title><rect x="93.4005%" y="37" width="0.0123%" height="15" fill="rgb(244,222,10)" fg:x="7600" fg:w="1"/><text x="93.6505%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (151 samples, 1.86%)</title><rect x="91.7537%" y="165" width="1.8557%" height="15" fill="rgb(236,179,52)" fg:x="7466" fg:w="151"/><text x="92.0037%" y="175.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (148 samples, 1.82%)</title><rect x="91.7906%" y="149" width="1.8189%" height="15" fill="rgb(213,23,39)" fg:x="7469" fg:w="148"/><text x="92.0406%" y="159.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (81 samples, 1.00%)</title><rect x="92.6140%" y="133" width="0.9955%" height="15" fill="rgb(238,48,10)" fg:x="7536" fg:w="81"/><text x="92.8640%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (80 samples, 0.98%)</title><rect x="92.6263%" y="117" width="0.9832%" height="15" fill="rgb(251,196,23)" fg:x="7537" fg:w="80"/><text x="92.8763%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (76 samples, 0.93%)</title><rect x="92.6754%" y="101" width="0.9340%" height="15" fill="rgb(250,152,24)" fg:x="7541" fg:w="76"/><text x="92.9254%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (16 samples, 0.20%)</title><rect x="93.4128%" y="85" width="0.1966%" height="15" fill="rgb(209,150,17)" fg:x="7601" fg:w="16"/><text x="93.6628%" y="95.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (6 samples, 0.07%)</title><rect x="93.5357%" y="69" width="0.0737%" height="15" fill="rgb(234,202,34)" fg:x="7611" fg:w="6"/><text x="93.7857%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.27%)</title><rect x="93.6094%" y="165" width="0.2704%" height="15" fill="rgb(253,148,53)" fg:x="7617" fg:w="22"/><text x="93.8594%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (19 samples, 0.23%)</title><rect x="93.6463%" y="149" width="0.2335%" height="15" fill="rgb(218,129,16)" fg:x="7620" fg:w="19"/><text x="93.8963%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (14 samples, 0.17%)</title><rect x="93.7078%" y="133" width="0.1721%" height="15" fill="rgb(216,85,19)" fg:x="7625" fg:w="14"/><text x="93.9578%" y="143.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (6 samples, 0.07%)</title><rect x="93.8061%" y="117" width="0.0737%" height="15" fill="rgb(235,228,7)" fg:x="7633" fg:w="6"/><text x="94.0561%" y="127.50"></text></g><g><title>_malloc_zone_malloc (10 samples, 0.12%)</title><rect x="94.0519%" y="133" width="0.1229%" height="15" fill="rgb(245,175,0)" fg:x="7653" fg:w="10"/><text x="94.3019%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (232 samples, 2.85%)</title><rect x="91.5079%" y="229" width="2.8512%" height="15" fill="rgb(208,168,36)" fg:x="7446" fg:w="232"/><text x="91.7579%" y="239.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (231 samples, 2.84%)</title><rect x="91.5202%" y="213" width="2.8389%" height="15" fill="rgb(246,171,24)" fg:x="7447" fg:w="231"/><text x="91.7702%" y="223.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (223 samples, 2.74%)</title><rect x="91.6185%" y="197" width="2.7406%" height="15" fill="rgb(215,142,24)" fg:x="7455" fg:w="223"/><text x="91.8685%" y="207.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (221 samples, 2.72%)</title><rect x="91.6431%" y="181" width="2.7160%" height="15" fill="rgb(250,187,7)" fg:x="7457" fg:w="221"/><text x="91.8931%" y="191.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (39 samples, 0.48%)</title><rect x="93.8798%" y="165" width="0.4793%" height="15" fill="rgb(228,66,33)" fg:x="7639" fg:w="39"/><text x="94.1298%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (32 samples, 0.39%)</title><rect x="93.9658%" y="149" width="0.3933%" height="15" fill="rgb(234,215,21)" fg:x="7646" fg:w="32"/><text x="94.2158%" y="159.50"></text></g><g><title>nanov2_malloc_type (15 samples, 0.18%)</title><rect x="94.1748%" y="133" width="0.1843%" height="15" fill="rgb(222,191,20)" fg:x="7663" fg:w="15"/><text x="94.4248%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (4 samples, 0.05%)</title><rect x="94.3591%" y="229" width="0.0492%" height="15" fill="rgb(245,79,54)" fg:x="7678" fg:w="4"/><text x="94.6091%" y="239.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (2 samples, 0.02%)</title><rect x="94.4083%" y="229" width="0.0246%" height="15" fill="rgb(240,10,37)" fg:x="7682" fg:w="2"/><text x="94.6583%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="94.5680%" y="197" width="0.0123%" height="15" fill="rgb(214,192,32)" fg:x="7695" fg:w="1"/><text x="94.8180%" y="207.50"></text></g><g><title>_nanov2_free (2 samples, 0.02%)</title><rect x="94.5803%" y="197" width="0.0246%" height="15" fill="rgb(209,36,54)" fg:x="7696" fg:w="2"/><text x="94.8303%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="94.6049%" y="181" width="0.0123%" height="15" fill="rgb(220,10,11)" fg:x="7698" fg:w="1"/><text x="94.8549%" y="191.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.04%)</title><rect x="94.6172%" y="181" width="0.0369%" height="15" fill="rgb(221,106,17)" fg:x="7699" fg:w="3"/><text x="94.8672%" y="191.50"></text></g><g><title>_free (11 samples, 0.14%)</title><rect x="94.6540%" y="181" width="0.1352%" height="15" fill="rgb(251,142,44)" fg:x="7702" fg:w="11"/><text x="94.9040%" y="191.50"></text></g><g><title>_nanov2_free (24 samples, 0.29%)</title><rect x="94.7892%" y="181" width="0.2949%" height="15" fill="rgb(238,13,15)" fg:x="7713" fg:w="24"/><text x="95.0392%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (59 samples, 0.73%)</title><rect x="94.4328%" y="229" width="0.7251%" height="15" fill="rgb(208,107,27)" fg:x="7684" fg:w="59"/><text x="94.6828%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (53 samples, 0.65%)</title><rect x="94.5066%" y="213" width="0.6513%" height="15" fill="rgb(205,136,37)" fg:x="7690" fg:w="53"/><text x="94.7566%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (45 samples, 0.55%)</title><rect x="94.6049%" y="197" width="0.5530%" height="15" fill="rgb(250,205,27)" fg:x="7698" fg:w="45"/><text x="94.8549%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (6 samples, 0.07%)</title><rect x="95.0842%" y="181" width="0.0737%" height="15" fill="rgb(210,80,43)" fg:x="7737" fg:w="6"/><text x="95.3342%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="95.1702%" y="213" width="0.0369%" height="15" fill="rgb(247,160,36)" fg:x="7744" fg:w="3"/><text x="95.4202%" y="223.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.05%)</title><rect x="95.2439%" y="181" width="0.0492%" height="15" fill="rgb(234,13,49)" fg:x="7750" fg:w="4"/><text x="95.4939%" y="191.50"></text></g><g><title>_free (3 samples, 0.04%)</title><rect x="95.2931%" y="181" width="0.0369%" height="15" fill="rgb(234,122,0)" fg:x="7754" fg:w="3"/><text x="95.5431%" y="191.50"></text></g><g><title>_nanov2_free (19 samples, 0.23%)</title><rect x="95.3300%" y="181" width="0.2335%" height="15" fill="rgb(207,146,38)" fg:x="7757" fg:w="19"/><text x="95.5800%" y="191.50"></text></g><g><title>_platform_memset (4 samples, 0.05%)</title><rect x="95.5143%" y="165" width="0.0492%" height="15" fill="rgb(207,177,25)" fg:x="7772" fg:w="4"/><text x="95.7643%" y="175.50"></text></g><g><title>_platform_memset (1 samples, 0.01%)</title><rect x="95.5635%" y="181" width="0.0123%" height="15" fill="rgb(211,178,42)" fg:x="7776" fg:w="1"/><text x="95.8135%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.38%)</title><rect x="95.2317%" y="197" width="0.3810%" height="15" fill="rgb(230,69,54)" fg:x="7749" fg:w="31"/><text x="95.4817%" y="207.50"></text></g><g><title>free (3 samples, 0.04%)</title><rect x="95.5758%" y="181" width="0.0369%" height="15" fill="rgb(214,135,41)" fg:x="7777" fg:w="3"/><text x="95.8258%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (38 samples, 0.47%)</title><rect x="95.1579%" y="229" width="0.4670%" height="15" fill="rgb(237,67,25)" fg:x="7743" fg:w="38"/><text x="95.4079%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (34 samples, 0.42%)</title><rect x="95.2071%" y="213" width="0.4178%" height="15" fill="rgb(222,189,50)" fg:x="7747" fg:w="34"/><text x="95.4571%" y="223.50"></text></g><g><title>_free (1 samples, 0.01%)</title><rect x="95.6126%" y="197" width="0.0123%" height="15" fill="rgb(245,148,34)" fg:x="7780" fg:w="1"/><text x="95.8626%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="95.7232%" y="213" width="0.0123%" height="15" fill="rgb(222,29,6)" fg:x="7789" fg:w="1"/><text x="95.9732%" y="223.50"></text></g><g><title>_free (3 samples, 0.04%)</title><rect x="95.7478%" y="197" width="0.0369%" height="15" fill="rgb(221,189,43)" fg:x="7791" fg:w="3"/><text x="95.9978%" y="207.50"></text></g><g><title>_nanov2_free (14 samples, 0.17%)</title><rect x="95.7847%" y="197" width="0.1721%" height="15" fill="rgb(207,36,27)" fg:x="7794" fg:w="14"/><text x="96.0347%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (31 samples, 0.38%)</title><rect x="95.6249%" y="229" width="0.3810%" height="15" fill="rgb(217,90,24)" fg:x="7781" fg:w="31"/><text x="95.8749%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (22 samples, 0.27%)</title><rect x="95.7355%" y="213" width="0.2704%" height="15" fill="rgb(224,66,35)" fg:x="7790" fg:w="22"/><text x="95.9855%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4 samples, 0.05%)</title><rect x="95.9567%" y="197" width="0.0492%" height="15" fill="rgb(221,13,50)" fg:x="7808" fg:w="4"/><text x="96.2067%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (1 samples, 0.01%)</title><rect x="96.0059%" y="229" width="0.0123%" height="15" fill="rgb(236,68,49)" fg:x="7812" fg:w="1"/><text x="96.2559%" y="239.50"></text></g><g><title>bitbeat::handle_spawn (2,332 samples, 28.66%)</title><rect x="67.5556%" y="245" width="28.6592%" height="15" fill="rgb(229,146,28)" fg:x="5497" fg:w="2332"/><text x="67.8056%" y="255.50">bitbeat::handle_spawn</text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (16 samples, 0.20%)</title><rect x="96.0182%" y="229" width="0.1966%" height="15" fill="rgb(225,31,38)" fg:x="7813" fg:w="16"/><text x="96.2682%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (14 samples, 0.17%)</title><rect x="96.0428%" y="213" width="0.1721%" height="15" fill="rgb(250,208,3)" fg:x="7815" fg:w="14"/><text x="96.2928%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.11%)</title><rect x="96.9768%" y="229" width="0.1106%" height="15" fill="rgb(246,54,23)" fg:x="7891" fg:w="9"/><text x="97.2268%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.14%)</title><rect x="97.2349%" y="213" width="0.1352%" height="15" fill="rgb(243,76,11)" fg:x="7912" fg:w="11"/><text x="97.4849%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (51 samples, 0.63%)</title><rect x="97.0874%" y="229" width="0.6268%" height="15" fill="rgb(245,21,50)" fg:x="7900" fg:w="51"/><text x="97.3374%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (28 samples, 0.34%)</title><rect x="97.3700%" y="213" width="0.3441%" height="15" fill="rgb(228,9,43)" fg:x="7923" fg:w="28"/><text x="97.6200%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.04%)</title><rect x="97.7141%" y="229" width="0.0369%" height="15" fill="rgb(208,100,47)" fg:x="7951" fg:w="3"/><text x="97.9641%" y="239.50"></text></g><g><title>bitbeat::handle_sub (129 samples, 1.59%)</title><rect x="96.2148%" y="245" width="1.5854%" height="15" fill="rgb(232,26,8)" fg:x="7829" fg:w="129"/><text x="96.4648%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (4 samples, 0.05%)</title><rect x="97.7510%" y="229" width="0.0492%" height="15" fill="rgb(216,166,38)" fg:x="7954" fg:w="4"/><text x="98.0010%" y="239.50"></text></g><g><title>bitbeat::Process::step (4,293 samples, 52.76%)</title><rect x="45.0535%" y="261" width="52.7590%" height="15" fill="rgb(251,202,51)" fg:x="3666" fg:w="4293"/><text x="45.3035%" y="271.50">bitbeat::Process::step</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.01%)</title><rect x="97.8002%" y="245" width="0.0123%" height="15" fill="rgb(254,216,34)" fg:x="7958" fg:w="1"/><text x="98.0502%" y="255.50"></text></g><g><title>bitbeat::handle_cmp_le (1 samples, 0.01%)</title><rect x="97.8125%" y="261" width="0.0123%" height="15" fill="rgb(251,32,27)" fg:x="7959" fg:w="1"/><text x="98.0625%" y="271.50"></text></g><g><title>bitbeat::handle_jump_if (2 samples, 0.02%)</title><rect x="97.8248%" y="261" width="0.0246%" height="15" fill="rgb(208,127,28)" fg:x="7960" fg:w="2"/><text x="98.0748%" y="271.50"></text></g><g><title>bitbeat::handle_load_imm (7 samples, 0.09%)</title><rect x="97.8493%" y="261" width="0.0860%" height="15" fill="rgb(224,137,22)" fg:x="7962" fg:w="7"/><text x="98.0993%" y="271.50"></text></g><g><title>bitbeat::handle_send (1 samples, 0.01%)</title><rect x="97.9354%" y="261" width="0.0123%" height="15" fill="rgb(254,70,32)" fg:x="7969" fg:w="1"/><text x="98.1854%" y="271.50"></text></g><g><title>bitbeat::handle_spawn (1 samples, 0.01%)</title><rect x="97.9476%" y="261" width="0.0123%" height="15" fill="rgb(229,75,37)" fg:x="7970" fg:w="1"/><text x="98.1976%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (79 samples, 0.97%)</title><rect x="97.9599%" y="261" width="0.9709%" height="15" fill="rgb(252,64,23)" fg:x="7971" fg:w="79"/><text x="98.2099%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (72 samples, 0.88%)</title><rect x="98.0460%" y="245" width="0.8848%" height="15" fill="rgb(232,162,48)" fg:x="7978" fg:w="72"/><text x="98.2960%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (26 samples, 0.32%)</title><rect x="98.6113%" y="229" width="0.3195%" height="15" fill="rgb(246,160,12)" fg:x="8024" fg:w="26"/><text x="98.8613%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::new (24 samples, 0.29%)</title><rect x="98.9308%" y="261" width="0.2949%" height="15" fill="rgb(247,166,0)" fg:x="8050" fg:w="24"/><text x="99.1808%" y="271.50"></text></g><g><title>_platform_memmove (21 samples, 0.26%)</title><rect x="98.9677%" y="245" width="0.2581%" height="15" fill="rgb(249,219,21)" fg:x="8053" fg:w="21"/><text x="99.2177%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (12 samples, 0.15%)</title><rect x="99.2258%" y="261" width="0.1475%" height="15" fill="rgb(205,209,3)" fg:x="8074" fg:w="12"/><text x="99.4758%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (6 samples, 0.07%)</title><rect x="99.2995%" y="245" width="0.0737%" height="15" fill="rgb(243,44,1)" fg:x="8080" fg:w="6"/><text x="99.5495%" y="255.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="99.3364%" y="229" width="0.0369%" height="15" fill="rgb(206,159,16)" fg:x="8083" fg:w="3"/><text x="99.5864%" y="239.50"></text></g><g><title>bitbeat::Machine::run::_{{closure}} (5,603 samples, 68.86%)</title><rect x="30.5518%" y="277" width="68.8583%" height="15" fill="rgb(244,77,30)" fg:x="2486" fg:w="5603"/><text x="30.8018%" y="287.50">bitbeat::Machine::run::_{{closure}}</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (3 samples, 0.04%)</title><rect x="99.3732%" y="261" width="0.0369%" height="15" fill="rgb(218,69,12)" fg:x="8086" fg:w="3"/><text x="99.6232%" y="271.50"></text></g><g><title>bitbeat::Process::step (1 samples, 0.01%)</title><rect x="99.4101%" y="277" width="0.0123%" height="15" fill="rgb(212,87,7)" fg:x="8089" fg:w="1"/><text x="99.6601%" y="287.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5,647 samples, 69.40%)</title><rect x="30.0479%" y="309" width="69.3990%" height="15" fill="rgb(245,114,25)" fg:x="2445" fg:w="5647"/><text x="30.2979%" y="319.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (5,620 samples, 69.07%)</title><rect x="30.3797%" y="293" width="69.0672%" height="15" fill="rgb(210,61,42)" fg:x="2472" fg:w="5620"/><text x="30.6297%" y="303.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::cell::RefCell&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="99.4224%" y="277" width="0.0246%" height="15" fill="rgb(211,52,33)" fg:x="8090" fg:w="2"/><text x="99.6724%" y="287.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.04%)</title><rect x="99.4470%" y="309" width="0.0369%" height="15" fill="rgb(234,58,33)" fg:x="8092" fg:w="3"/><text x="99.6970%" y="319.50"></text></g><g><title>__rust_try (5,683 samples, 69.84%)</title><rect x="29.8390%" y="341" width="69.8415%" height="15" fill="rgb(220,115,36)" fg:x="2428" fg:w="5683"/><text x="30.0890%" y="351.50">__rust_try</text></g><g><title>std::panicking::try::do_call (5,671 samples, 69.69%)</title><rect x="29.9865%" y="325" width="69.6940%" height="15" fill="rgb(243,153,54)" fg:x="2440" fg:w="5671"/><text x="30.2365%" y="335.50">std::panicking::try::do_call</text></g><g><title>_platform_memmove (16 samples, 0.20%)</title><rect x="99.4838%" y="309" width="0.1966%" height="15" fill="rgb(251,47,18)" fg:x="8095" fg:w="16"/><text x="99.7338%" y="319.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (8,131 samples, 99.93%)</title><rect x="0.0614%" y="437" width="99.9263%" height="15" fill="rgb(242,102,42)" fg:x="5" fg:w="8131"/><text x="0.3114%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (8,131 samples, 99.93%)</title><rect x="0.0614%" y="421" width="99.9263%" height="15" fill="rgb(234,31,38)" fg:x="5" fg:w="8131"/><text x="0.3114%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,131 samples, 99.93%)</title><rect x="0.0614%" y="405" width="99.9263%" height="15" fill="rgb(221,117,51)" fg:x="5" fg:w="8131"/><text x="0.3114%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>bitbeat::main (8,131 samples, 99.93%)</title><rect x="0.0614%" y="389" width="99.9263%" height="15" fill="rgb(212,20,18)" fg:x="5" fg:w="8131"/><text x="0.3114%" y="399.50">bitbeat::main</text></g><g><title>bitbeat::Machine::run (8,131 samples, 99.93%)</title><rect x="0.0614%" y="373" width="99.9263%" height="15" fill="rgb(245,133,36)" fg:x="5" fg:w="8131"/><text x="0.3114%" y="383.50">bitbeat::Machine::run</text></g><g><title>std::panic::catch_unwind (5,720 samples, 70.30%)</title><rect x="29.6915%" y="357" width="70.2962%" height="15" fill="rgb(212,6,19)" fg:x="2416" fg:w="5720"/><text x="29.9415%" y="367.50">std::panic::catch_unwind</text></g><g><title>_platform_memmove (25 samples, 0.31%)</title><rect x="99.6805%" y="341" width="0.3072%" height="15" fill="rgb(218,1,36)" fg:x="8111" fg:w="25"/><text x="99.9305%" y="351.50"></text></g><g><title>all (8,137 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(246,84,54)" fg:x="0" fg:w="8137"/><text x="0.2500%" y="527.50"></text></g><g><title>start (8,136 samples, 99.99%)</title><rect x="0.0123%" y="501" width="99.9877%" height="15" fill="rgb(242,110,6)" fg:x="1" fg:w="8136"/><text x="0.2623%" y="511.50">start</text></g><g><title>main (8,132 samples, 99.94%)</title><rect x="0.0614%" y="485" width="99.9386%" height="15" fill="rgb(214,47,5)" fg:x="5" fg:w="8132"/><text x="0.3114%" y="495.50">main</text></g><g><title>std::rt::lang_start (8,132 samples, 99.94%)</title><rect x="0.0614%" y="469" width="99.9386%" height="15" fill="rgb(218,159,25)" fg:x="5" fg:w="8132"/><text x="0.3114%" y="479.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (8,132 samples, 99.94%)</title><rect x="0.0614%" y="453" width="99.9386%" height="15" fill="rgb(215,211,28)" fg:x="5" fg:w="8132"/><text x="0.3114%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 0.01%)</title><rect x="99.9877%" y="437" width="0.0123%" height="15" fill="rgb(238,59,32)" fg:x="8136" fg:w="1"/><text x="100.2377%" y="447.50"></text></g><g><title>std::sync::poison::once::Once::call_once::_{{closure}} (1 samples, 0.01%)</title><rect x="99.9877%" y="421" width="0.0123%" height="15" fill="rgb(226,82,3)" fg:x="8136" fg:w="1"/><text x="100.2377%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt; (1 samples, 0.01%)</title><rect x="99.9877%" y="405" width="0.0123%" height="15" fill="rgb(240,164,32)" fg:x="8136" fg:w="1"/><text x="100.2377%" y="415.50"></text></g></svg></svg>