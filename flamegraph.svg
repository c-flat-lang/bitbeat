<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="6644"><g><title>0x10081e2c7 (1 samples, 0.02%)</title><rect x="0.0000%" y="405" width="0.0151%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>0x1008634a7 (1 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0151%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>0x10084ea5f (1 samples, 0.02%)</title><rect x="0.0000%" y="373" width="0.0151%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>0x10087bb41 (1 samples, 0.02%)</title><rect x="0.0000%" y="357" width="0.0151%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>dyld4::ExternallyViewableState::createMinimalInfo(lsl::Allocator&amp;, unsigned long long, char const*, unsigned long long, char const*, DyldSharedCache const*) (1 samples, 0.02%)</title><rect x="0.0151%" y="389" width="0.0151%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2651%" y="399.50"></text></g><g><title>0x19feff8a7 (1 samples, 0.02%)</title><rect x="0.0151%" y="373" width="0.0151%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2651%" y="383.50"></text></g><g><title>0x19ff2dc97 (1 samples, 0.02%)</title><rect x="0.0151%" y="357" width="0.0151%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2651%" y="367.50"></text></g><g><title>0x19ff2dd7f (1 samples, 0.02%)</title><rect x="0.0151%" y="341" width="0.0151%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2651%" y="351.50"></text></g><g><title>0x19ff2fabf (1 samples, 0.02%)</title><rect x="0.0151%" y="325" width="0.0151%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2651%" y="335.50"></text></g><g><title>0x19ff30fff (1 samples, 0.02%)</title><rect x="0.0151%" y="309" width="0.0151%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2651%" y="319.50"></text></g><g><title>0x19ff2ded3 (1 samples, 0.02%)</title><rect x="0.0151%" y="293" width="0.0151%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2651%" y="303.50"></text></g><g><title>0x19ff33d5d (1 samples, 0.02%)</title><rect x="0.0151%" y="277" width="0.0151%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2651%" y="287.50"></text></g><g><title>dyld4::APIs::runAllInitializersForMain() (1 samples, 0.02%)</title><rect x="0.0301%" y="357" width="0.0151%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="0.2801%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.02%)</title><rect x="0.0301%" y="341" width="0.0151%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.2801%" y="351.50"></text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.02%)</title><rect x="0.0301%" y="325" width="0.0151%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="0.2801%" y="335.50"></text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.02%)</title><rect x="0.0301%" y="309" width="0.0151%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.2801%" y="319.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0301%" y="293" width="0.0151%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.2801%" y="303.50"></text></g><g><title>0x19ff2fabf (1 samples, 0.02%)</title><rect x="0.0301%" y="277" width="0.0151%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="0.2801%" y="287.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.02%)</title><rect x="0.0301%" y="261" width="0.0151%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="0.2801%" y="271.50"></text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 0.02%)</title><rect x="0.0301%" y="245" width="0.0151%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="0.2801%" y="255.50"></text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 0.02%)</title><rect x="0.0301%" y="229" width="0.0151%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="0.2801%" y="239.50"></text></g><g><title>libSystem_initializer (1 samples, 0.02%)</title><rect x="0.0301%" y="213" width="0.0151%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.2801%" y="223.50"></text></g><g><title>_libxpc_initializer (1 samples, 0.02%)</title><rect x="0.0301%" y="197" width="0.0151%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.2801%" y="207.50"></text></g><g><title>_xpc_collect_images (1 samples, 0.02%)</title><rect x="0.0301%" y="181" width="0.0151%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="0.2801%" y="191.50"></text></g><g><title>xpc_bundle_copy_services (1 samples, 0.02%)</title><rect x="0.0301%" y="165" width="0.0151%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="0.2801%" y="175.50"></text></g><g><title>_xpc_bundle_resolve (1 samples, 0.02%)</title><rect x="0.0301%" y="149" width="0.0151%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="0.2801%" y="159.50"></text></g><g><title>_dispatch_once_callout (1 samples, 0.02%)</title><rect x="0.0301%" y="133" width="0.0151%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="0.2801%" y="143.50"></text></g><g><title>_dispatch_client_callout (1 samples, 0.02%)</title><rect x="0.0301%" y="117" width="0.0151%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="0.2801%" y="127.50"></text></g><g><title>___xpc_bundle_resolve_block_invoke (1 samples, 0.02%)</title><rect x="0.0301%" y="101" width="0.0151%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.2801%" y="111.50"></text></g><g><title>_xpc_bundle_resolve_sync (1 samples, 0.02%)</title><rect x="0.0301%" y="85" width="0.0151%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="0.2801%" y="95.50"></text></g><g><title>__open (1 samples, 0.02%)</title><rect x="0.0301%" y="69" width="0.0151%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="0.2801%" y="79.50"></text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="357" width="0.0151%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="0.2952%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="341" width="0.0151%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="0.2952%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="325" width="0.0151%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="0.2952%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="309" width="0.0151%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="0.2952%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="293" width="0.0151%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="0.2952%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="277" width="0.0151%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="0.2952%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="261" width="0.0151%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1"/><text x="0.2952%" y="271.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="245" width="0.0151%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1"/><text x="0.2952%" y="255.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="229" width="0.0151%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="0.2952%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="213" width="0.0151%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="0.2952%" y="223.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="197" width="0.0151%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="0.2952%" y="207.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="181" width="0.0151%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="0.2952%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="165" width="0.0151%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="0.2952%" y="175.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="149" width="0.0151%" height="15" fill="rgb(222,207,29)" fg:x="3" fg:w="1"/><text x="0.2952%" y="159.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="133" width="0.0151%" height="15" fill="rgb(206,96,30)" fg:x="3" fg:w="1"/><text x="0.2952%" y="143.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="117" width="0.0151%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="1"/><text x="0.2952%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.02%)</title><rect x="0.0452%" y="101" width="0.0151%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="1"/><text x="0.2952%" y="111.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (3 samples, 0.05%)</title><rect x="0.0301%" y="389" width="0.0452%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="3"/><text x="0.2801%" y="399.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (3 samples, 0.05%)</title><rect x="0.0301%" y="373" width="0.0452%" height="15" fill="rgb(206,27,48)" fg:x="2" fg:w="3"/><text x="0.2801%" y="383.50"></text></g><g><title>dyld4::RuntimeState::notifyDebuggerLoad(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (1 samples, 0.02%)</title><rect x="0.0602%" y="357" width="0.0151%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="1"/><text x="0.3102%" y="367.50"></text></g><g><title>dyld4::ExternallyViewableState::addImages(lsl::Allocator&amp;, lsl::Allocator&amp;, std::__1::span&lt;dyld4::ExternallyViewableState::ImageInfo, 18446744073709551615ul&gt; const&amp;) (1 samples, 0.02%)</title><rect x="0.0602%" y="341" width="0.0151%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1"/><text x="0.3102%" y="351.50"></text></g><g><title>dyld4::ExternallyViewableState::generateAtlas(lsl::Allocator&amp;) (1 samples, 0.02%)</title><rect x="0.0602%" y="325" width="0.0151%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1"/><text x="0.3102%" y="335.50"></text></g><g><title>dyld4::ExternallyViewableState::generateCompactInfo(lsl::Allocator&amp;, AAREncoder&amp;) (1 samples, 0.02%)</title><rect x="0.0602%" y="309" width="0.0151%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="1"/><text x="0.3102%" y="319.50"></text></g><g><title>dyld4::Atlas::ProcessSnapshot::addImages(dyld4::RuntimeState*, lsl::Vector&lt;AuthenticatedValue&lt;dyld4::Loader const*&gt;&gt;&amp;) (1 samples, 0.02%)</title><rect x="0.0602%" y="293" width="0.0151%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="1"/><text x="0.3102%" y="303.50"></text></g><g><title>dyld4::Atlas::Image::Image(dyld4::RuntimeState*, lsl::Allocator&amp;, lsl::SharedPtr&lt;dyld4::Atlas::Mapper&gt;&amp;, dyld4::Loader const*) (1 samples, 0.02%)</title><rect x="0.0602%" y="277" width="0.0151%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1"/><text x="0.3102%" y="287.50"></text></g><g><title>dyld4::FileRecord::FileRecord(dyld4::FileManager&amp;, unsigned long long, unsigned long long, unsigned long long) (1 samples, 0.02%)</title><rect x="0.0602%" y="261" width="0.0151%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="1"/><text x="0.3102%" y="271.50"></text></g><g><title>dyld4::FileManager::uuidForFileSystem(unsigned long long) const (1 samples, 0.02%)</title><rect x="0.0602%" y="245" width="0.0151%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="1"/><text x="0.3102%" y="255.50"></text></g><g><title>getfsstat (1 samples, 0.02%)</title><rect x="0.0602%" y="229" width="0.0151%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="1"/><text x="0.3102%" y="239.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.20%)</title><rect x="1.5352%" y="261" width="0.1957%" height="15" fill="rgb(227,1,9)" fg:x="102" fg:w="13"/><text x="1.7852%" y="271.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (12 samples, 0.18%)</title><rect x="1.7309%" y="261" width="0.1806%" height="15" fill="rgb(248,47,43)" fg:x="115" fg:w="12"/><text x="1.9809%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="2.2125%" y="229" width="0.0151%" height="15" fill="rgb(221,10,30)" fg:x="147" fg:w="1"/><text x="2.4625%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="2.3028%" y="213" width="0.0301%" height="15" fill="rgb(210,229,1)" fg:x="153" fg:w="2"/><text x="2.5528%" y="223.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (4 samples, 0.06%)</title><rect x="2.3329%" y="213" width="0.0602%" height="15" fill="rgb(222,148,37)" fg:x="155" fg:w="4"/><text x="2.5829%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (6 samples, 0.09%)</title><rect x="2.7393%" y="197" width="0.0903%" height="15" fill="rgb(234,67,33)" fg:x="182" fg:w="6"/><text x="2.9893%" y="207.50"></text></g><g><title>_platform_memmove (4 samples, 0.06%)</title><rect x="3.0855%" y="181" width="0.0602%" height="15" fill="rgb(247,98,35)" fg:x="205" fg:w="4"/><text x="3.3355%" y="191.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_and_affected_ancestors (3 samples, 0.05%)</title><rect x="3.1457%" y="181" width="0.0452%" height="15" fill="rgb(247,138,52)" fg:x="209" fg:w="3"/><text x="3.3957%" y="191.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_through_parent (3 samples, 0.05%)</title><rect x="3.1457%" y="165" width="0.0452%" height="15" fill="rgb(213,79,30)" fg:x="209" fg:w="3"/><text x="3.3957%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (3 samples, 0.05%)</title><rect x="3.1457%" y="149" width="0.0452%" height="15" fill="rgb(246,177,23)" fg:x="209" fg:w="3"/><text x="3.3957%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (2 samples, 0.03%)</title><rect x="3.1607%" y="133" width="0.0301%" height="15" fill="rgb(230,62,27)" fg:x="210" fg:w="2"/><text x="3.4107%" y="143.50"></text></g><g><title>_platform_memmove (1 samples, 0.02%)</title><rect x="3.2511%" y="165" width="0.0151%" height="15" fill="rgb(216,154,8)" fg:x="216" fg:w="1"/><text x="3.5011%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="3.3715%" y="149" width="0.0151%" height="15" fill="rgb(244,35,45)" fg:x="224" fg:w="1"/><text x="3.6215%" y="159.50"></text></g><g><title>_nanov2_free (1 samples, 0.02%)</title><rect x="3.3715%" y="133" width="0.0151%" height="15" fill="rgb(251,115,12)" fg:x="224" fg:w="1"/><text x="3.6215%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (3 samples, 0.05%)</title><rect x="3.3865%" y="149" width="0.0452%" height="15" fill="rgb(240,54,50)" fg:x="225" fg:w="3"/><text x="3.6365%" y="159.50"></text></g><g><title>_platform_memmove (2 samples, 0.03%)</title><rect x="3.5220%" y="133" width="0.0301%" height="15" fill="rgb(233,84,52)" fg:x="234" fg:w="2"/><text x="3.7720%" y="143.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (14 samples, 0.21%)</title><rect x="3.4317%" y="149" width="0.2107%" height="15" fill="rgb(207,117,47)" fg:x="228" fg:w="14"/><text x="3.6817%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (6 samples, 0.09%)</title><rect x="3.5521%" y="133" width="0.0903%" height="15" fill="rgb(249,43,39)" fg:x="236" fg:w="6"/><text x="3.8021%" y="143.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (2 samples, 0.03%)</title><rect x="3.6123%" y="117" width="0.0301%" height="15" fill="rgb(209,38,44)" fg:x="240" fg:w="2"/><text x="3.8623%" y="127.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (43 samples, 0.65%)</title><rect x="3.1908%" y="181" width="0.6472%" height="15" fill="rgb(236,212,23)" fg:x="212" fg:w="43"/><text x="3.4408%" y="191.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (38 samples, 0.57%)</title><rect x="3.2661%" y="165" width="0.5719%" height="15" fill="rgb(242,79,21)" fg:x="217" fg:w="38"/><text x="3.5161%" y="175.50"></text></g><g><title>alloc::collections::btree::node::slice_remove (13 samples, 0.20%)</title><rect x="3.6424%" y="149" width="0.1957%" height="15" fill="rgb(211,96,35)" fg:x="242" fg:w="13"/><text x="3.8924%" y="159.50"></text></g><g><title>core::intrinsics::copy::precondition_check (1 samples, 0.02%)</title><rect x="3.8230%" y="133" width="0.0151%" height="15" fill="rgb(253,215,40)" fg:x="254" fg:w="1"/><text x="4.0730%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (19 samples, 0.29%)</title><rect x="4.1391%" y="165" width="0.2860%" height="15" fill="rgb(211,81,21)" fg:x="275" fg:w="19"/><text x="4.3891%" y="175.50"></text></g><g><title>DYLD-STUB$$memmove (3 samples, 0.05%)</title><rect x="5.6141%" y="149" width="0.0452%" height="15" fill="rgb(208,190,38)" fg:x="373" fg:w="3"/><text x="5.8641%" y="159.50"></text></g><g><title>_platform_memmove (2 samples, 0.03%)</title><rect x="5.6592%" y="149" width="0.0301%" height="15" fill="rgb(235,213,38)" fg:x="376" fg:w="2"/><text x="5.9092%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (149 samples, 2.24%)</title><rect x="3.8380%" y="181" width="2.2426%" height="15" fill="rgb(237,122,38)" fg:x="255" fg:w="149"/><text x="4.0880%" y="191.50">a..</text></g><g><title>alloc::collections::btree::node::slice_remove (110 samples, 1.66%)</title><rect x="4.4250%" y="165" width="1.6556%" height="15" fill="rgb(244,218,35)" fg:x="294" fg:w="110"/><text x="4.6750%" y="175.50"></text></g><g><title>core::intrinsics::copy::precondition_check (26 samples, 0.39%)</title><rect x="5.6893%" y="149" width="0.3913%" height="15" fill="rgb(240,68,47)" fg:x="378" fg:w="26"/><text x="5.9393%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (2 samples, 0.03%)</title><rect x="6.0807%" y="181" width="0.0301%" height="15" fill="rgb(210,16,53)" fg:x="404" fg:w="2"/><text x="6.3307%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.02%)</title><rect x="6.1409%" y="165" width="0.0151%" height="15" fill="rgb(235,124,12)" fg:x="408" fg:w="1"/><text x="6.3909%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (263 samples, 3.96%)</title><rect x="2.2276%" y="229" width="3.9585%" height="15" fill="rgb(224,169,11)" fg:x="148" fg:w="263"/><text x="2.4776%" y="239.50">allo..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (252 samples, 3.79%)</title><rect x="2.3931%" y="213" width="3.7929%" height="15" fill="rgb(250,166,2)" fg:x="159" fg:w="252"/><text x="2.6431%" y="223.50">allo..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (223 samples, 3.36%)</title><rect x="2.8296%" y="197" width="3.3564%" height="15" fill="rgb(242,216,29)" fg:x="188" fg:w="223"/><text x="3.0796%" y="207.50">all..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (5 samples, 0.08%)</title><rect x="6.1108%" y="181" width="0.0753%" height="15" fill="rgb(230,116,27)" fg:x="406" fg:w="5"/><text x="6.3608%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (2 samples, 0.03%)</title><rect x="6.1559%" y="165" width="0.0301%" height="15" fill="rgb(228,99,48)" fg:x="409" fg:w="2"/><text x="6.4059%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.02%)</title><rect x="6.1860%" y="229" width="0.0151%" height="15" fill="rgb(253,11,6)" fg:x="411" fg:w="1"/><text x="6.4360%" y="239.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (5 samples, 0.08%)</title><rect x="6.2011%" y="229" width="0.0753%" height="15" fill="rgb(247,143,39)" fg:x="412" fg:w="5"/><text x="6.4511%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (13 samples, 0.20%)</title><rect x="7.3600%" y="213" width="0.1957%" height="15" fill="rgb(236,97,10)" fg:x="489" fg:w="13"/><text x="7.6100%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (3 samples, 0.05%)</title><rect x="7.5105%" y="197" width="0.0452%" height="15" fill="rgb(233,208,19)" fg:x="499" fg:w="3"/><text x="7.7605%" y="207.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (5 samples, 0.08%)</title><rect x="9.2715%" y="197" width="0.0753%" height="15" fill="rgb(216,164,2)" fg:x="616" fg:w="5"/><text x="9.5215%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (201 samples, 3.03%)</title><rect x="9.3468%" y="197" width="3.0253%" height="15" fill="rgb(220,129,5)" fg:x="621" fg:w="201"/><text x="9.5968%" y="207.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 1.40%)</title><rect x="10.9723%" y="181" width="1.3998%" height="15" fill="rgb(242,17,10)" fg:x="729" fg:w="93"/><text x="11.2223%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.03%)</title><rect x="12.3721%" y="197" width="0.0301%" height="15" fill="rgb(242,107,0)" fg:x="822" fg:w="2"/><text x="12.6221%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (31 samples, 0.47%)</title><rect x="12.4022%" y="197" width="0.4666%" height="15" fill="rgb(251,28,31)" fg:x="824" fg:w="31"/><text x="12.6522%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (8 samples, 0.12%)</title><rect x="12.7483%" y="181" width="0.1204%" height="15" fill="rgb(233,223,10)" fg:x="847" fg:w="8"/><text x="12.9983%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (739 samples, 11.12%)</title><rect x="2.0319%" y="245" width="11.1228%" height="15" fill="rgb(215,21,27)" fg:x="135" fg:w="739"/><text x="2.2819%" y="255.50">alloc::collectio..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (457 samples, 6.88%)</title><rect x="6.2763%" y="229" width="6.8784%" height="15" fill="rgb(232,23,21)" fg:x="417" fg:w="457"/><text x="6.5263%" y="239.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (372 samples, 5.60%)</title><rect x="7.5557%" y="213" width="5.5990%" height="15" fill="rgb(244,5,23)" fg:x="502" fg:w="372"/><text x="7.8057%" y="223.50">alloc::..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (19 samples, 0.29%)</title><rect x="12.8688%" y="197" width="0.2860%" height="15" fill="rgb(226,81,46)" fg:x="855" fg:w="19"/><text x="13.1188%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (750 samples, 11.29%)</title><rect x="1.9115%" y="261" width="11.2884%" height="15" fill="rgb(247,70,30)" fg:x="127" fg:w="750"/><text x="2.1615%" y="271.50">alloc::collection..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.05%)</title><rect x="13.1547%" y="245" width="0.0452%" height="15" fill="rgb(212,68,19)" fg:x="874" fg:w="3"/><text x="13.4047%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (1 samples, 0.02%)</title><rect x="13.1999%" y="261" width="0.0151%" height="15" fill="rgb(240,187,13)" fg:x="877" fg:w="1"/><text x="13.4499%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (71 samples, 1.07%)</title><rect x="13.2149%" y="261" width="1.0686%" height="15" fill="rgb(223,113,26)" fg:x="878" fg:w="71"/><text x="13.4649%" y="271.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.05%)</title><rect x="14.2384%" y="245" width="0.0452%" height="15" fill="rgb(206,192,2)" fg:x="946" fg:w="3"/><text x="14.4884%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="14.2836%" y="261" width="0.0151%" height="15" fill="rgb(241,108,4)" fg:x="949" fg:w="1"/><text x="14.5336%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.21%)</title><rect x="14.2986%" y="261" width="0.2107%" height="15" fill="rgb(247,173,49)" fg:x="950" fg:w="14"/><text x="14.5486%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.30%)</title><rect x="17.5948%" y="245" width="0.3010%" height="15" fill="rgb(224,114,35)" fg:x="1169" fg:w="20"/><text x="17.8448%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (39 samples, 0.59%)</title><rect x="18.6785%" y="229" width="0.5870%" height="15" fill="rgb(245,159,27)" fg:x="1241" fg:w="39"/><text x="18.9285%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (202 samples, 3.04%)</title><rect x="17.8958%" y="245" width="3.0403%" height="15" fill="rgb(245,172,44)" fg:x="1189" fg:w="202"/><text x="18.1458%" y="255.50">&lt;al..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (111 samples, 1.67%)</title><rect x="19.2655%" y="229" width="1.6707%" height="15" fill="rgb(236,23,11)" fg:x="1280" fg:w="111"/><text x="19.5155%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.03%)</title><rect x="20.9362%" y="245" width="0.0301%" height="15" fill="rgb(205,117,38)" fg:x="1391" fg:w="2"/><text x="21.1862%" y="255.50"></text></g><g><title>alloc::string::String::from_utf8 (4 samples, 0.06%)</title><rect x="20.9663%" y="245" width="0.0602%" height="15" fill="rgb(237,72,25)" fg:x="1393" fg:w="4"/><text x="21.2163%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.09%)</title><rect x="21.0265%" y="245" width="0.0903%" height="15" fill="rgb(244,70,9)" fg:x="1397" fg:w="6"/><text x="21.2765%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.03%)</title><rect x="21.1168%" y="245" width="0.0301%" height="15" fill="rgb(217,125,39)" fg:x="1403" fg:w="2"/><text x="21.3668%" y="255.50"></text></g><g><title>bitbeat::Process::reset (5 samples, 0.08%)</title><rect x="21.1469%" y="245" width="0.0753%" height="15" fill="rgb(235,36,10)" fg:x="1405" fg:w="5"/><text x="21.3969%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="21.6737%" y="229" width="0.0151%" height="15" fill="rgb(251,123,47)" fg:x="1440" fg:w="1"/><text x="21.9237%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.09%)</title><rect x="21.7790%" y="213" width="0.0903%" height="15" fill="rgb(221,13,13)" fg:x="1447" fg:w="6"/><text x="22.0290%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.32%)</title><rect x="21.6887%" y="229" width="0.3161%" height="15" fill="rgb(238,131,9)" fg:x="1441" fg:w="21"/><text x="21.9387%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (9 samples, 0.14%)</title><rect x="21.8694%" y="213" width="0.1355%" height="15" fill="rgb(211,50,8)" fg:x="1453" fg:w="9"/><text x="22.1194%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.03%)</title><rect x="22.0048%" y="229" width="0.0301%" height="15" fill="rgb(245,182,24)" fg:x="1462" fg:w="2"/><text x="22.2548%" y="239.50"></text></g><g><title>bitbeat::handle_add (59 samples, 0.89%)</title><rect x="21.2222%" y="245" width="0.8880%" height="15" fill="rgb(242,14,37)" fg:x="1410" fg:w="59"/><text x="21.4722%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (5 samples, 0.08%)</title><rect x="22.0349%" y="229" width="0.0753%" height="15" fill="rgb(246,228,12)" fg:x="1464" fg:w="5"/><text x="22.2849%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.08%)</title><rect x="22.9831%" y="229" width="0.0753%" height="15" fill="rgb(213,55,15)" fg:x="1527" fg:w="5"/><text x="23.2331%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14 samples, 0.21%)</title><rect x="23.3143%" y="213" width="0.2107%" height="15" fill="rgb(209,9,3)" fg:x="1549" fg:w="14"/><text x="23.5643%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (52 samples, 0.78%)</title><rect x="23.0584%" y="229" width="0.7827%" height="15" fill="rgb(230,59,30)" fg:x="1532" fg:w="52"/><text x="23.3084%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (21 samples, 0.32%)</title><rect x="23.5250%" y="213" width="0.3161%" height="15" fill="rgb(209,121,21)" fg:x="1563" fg:w="21"/><text x="23.7750%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.05%)</title><rect x="23.8411%" y="229" width="0.0452%" height="15" fill="rgb(220,109,13)" fg:x="1584" fg:w="3"/><text x="24.0911%" y="239.50"></text></g><g><title>bitbeat::handle_cmp_le (125 samples, 1.88%)</title><rect x="22.1102%" y="245" width="1.8814%" height="15" fill="rgb(232,18,1)" fg:x="1469" fg:w="125"/><text x="22.3602%" y="255.50">b..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (7 samples, 0.11%)</title><rect x="23.8862%" y="229" width="0.1054%" height="15" fill="rgb(215,41,42)" fg:x="1587" fg:w="7"/><text x="24.1362%" y="239.50"></text></g><g><title>bitbeat::handle_halt (1 samples, 0.02%)</title><rect x="23.9916%" y="245" width="0.0151%" height="15" fill="rgb(224,123,36)" fg:x="1594" fg:w="1"/><text x="24.2416%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (27 samples, 0.41%)</title><rect x="24.9699%" y="229" width="0.4064%" height="15" fill="rgb(240,125,3)" fg:x="1659" fg:w="27"/><text x="25.2199%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (21 samples, 0.32%)</title><rect x="25.0602%" y="213" width="0.3161%" height="15" fill="rgb(205,98,50)" fg:x="1665" fg:w="21"/><text x="25.3102%" y="223.50"></text></g><g><title> N]&gt;::try_from (21 samples, 0.32%)</title><rect x="25.0602%" y="197" width="0.3161%" height="15" fill="rgb(205,185,37)" fg:x="1665" fg:w="21"/><text x="25.3102%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="25.3763%" y="229" width="0.0151%" height="15" fill="rgb(238,207,15)" fg:x="1686" fg:w="1"/><text x="25.6263%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.06%)</title><rect x="25.5418%" y="213" width="0.0602%" height="15" fill="rgb(213,199,42)" fg:x="1697" fg:w="4"/><text x="25.7918%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (35 samples, 0.53%)</title><rect x="25.3913%" y="229" width="0.5268%" height="15" fill="rgb(235,201,11)" fg:x="1687" fg:w="35"/><text x="25.6413%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (21 samples, 0.32%)</title><rect x="25.6020%" y="213" width="0.3161%" height="15" fill="rgb(207,46,11)" fg:x="1701" fg:w="21"/><text x="25.8520%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (14 samples, 0.21%)</title><rect x="25.9181%" y="229" width="0.2107%" height="15" fill="rgb(241,35,35)" fg:x="1722" fg:w="14"/><text x="26.1681%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.03%)</title><rect x="26.1288%" y="229" width="0.0301%" height="15" fill="rgb(243,32,47)" fg:x="1736" fg:w="2"/><text x="26.3788%" y="239.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (3 samples, 0.05%)</title><rect x="26.1589%" y="229" width="0.0452%" height="15" fill="rgb(247,202,23)" fg:x="1738" fg:w="3"/><text x="26.4089%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u32,anyhow::Error&gt;&gt; (3 samples, 0.05%)</title><rect x="26.2041%" y="229" width="0.0452%" height="15" fill="rgb(219,102,11)" fg:x="1741" fg:w="3"/><text x="26.4541%" y="239.50"></text></g><g><title>bitbeat::handle_jump_if (151 samples, 2.27%)</title><rect x="24.0066%" y="245" width="2.2727%" height="15" fill="rgb(243,110,44)" fg:x="1595" fg:w="151"/><text x="24.2566%" y="255.50">b..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (2 samples, 0.03%)</title><rect x="26.2492%" y="229" width="0.0301%" height="15" fill="rgb(222,74,54)" fg:x="1744" fg:w="2"/><text x="26.4992%" y="239.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (51 samples, 0.77%)</title><rect x="28.4919%" y="229" width="0.7676%" height="15" fill="rgb(216,99,12)" fg:x="1893" fg:w="51"/><text x="28.7419%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (48 samples, 0.72%)</title><rect x="28.5370%" y="213" width="0.7225%" height="15" fill="rgb(226,22,26)" fg:x="1896" fg:w="48"/><text x="28.7870%" y="223.50"></text></g><g><title> N]&gt;::try_from (48 samples, 0.72%)</title><rect x="28.5370%" y="197" width="0.7225%" height="15" fill="rgb(217,163,10)" fg:x="1896" fg:w="48"/><text x="28.7870%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.11%)</title><rect x="29.2595%" y="229" width="0.1054%" height="15" fill="rgb(213,25,53)" fg:x="1944" fg:w="7"/><text x="29.5095%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.15%)</title><rect x="29.7712%" y="213" width="0.1505%" height="15" fill="rgb(252,105,26)" fg:x="1978" fg:w="10"/><text x="30.0212%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (76 samples, 1.14%)</title><rect x="29.3648%" y="229" width="1.1439%" height="15" fill="rgb(220,39,43)" fg:x="1951" fg:w="76"/><text x="29.6148%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (39 samples, 0.59%)</title><rect x="29.9217%" y="213" width="0.5870%" height="15" fill="rgb(229,68,48)" fg:x="1988" fg:w="39"/><text x="30.1717%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (27 samples, 0.41%)</title><rect x="30.5087%" y="229" width="0.4064%" height="15" fill="rgb(252,8,32)" fg:x="2027" fg:w="27"/><text x="30.7587%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.12%)</title><rect x="30.9151%" y="229" width="0.1204%" height="15" fill="rgb(223,20,43)" fg:x="2054" fg:w="8"/><text x="31.1651%" y="239.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_le_bytes (2 samples, 0.03%)</title><rect x="31.0355%" y="229" width="0.0301%" height="15" fill="rgb(229,81,49)" fg:x="2062" fg:w="2"/><text x="31.2855%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;i64,anyhow::Error&gt;&gt; (7 samples, 0.11%)</title><rect x="31.0656%" y="229" width="0.1054%" height="15" fill="rgb(236,28,36)" fg:x="2064" fg:w="7"/><text x="31.3156%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (3 samples, 0.05%)</title><rect x="31.1710%" y="229" width="0.0452%" height="15" fill="rgb(249,185,26)" fg:x="2071" fg:w="3"/><text x="31.4210%" y="239.50"></text></g><g><title>bitbeat::handle_load_imm (329 samples, 4.95%)</title><rect x="26.2793%" y="245" width="4.9518%" height="15" fill="rgb(249,174,33)" fg:x="1746" fg:w="329"/><text x="26.5293%" y="255.50">bitbea..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.02%)</title><rect x="31.2161%" y="229" width="0.0151%" height="15" fill="rgb(233,201,37)" fg:x="2074" fg:w="1"/><text x="31.4661%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.05%)</title><rect x="31.9386%" y="229" width="0.0452%" height="15" fill="rgb(221,78,26)" fg:x="2122" fg:w="3"/><text x="32.1886%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.12%)</title><rect x="32.1042%" y="213" width="0.1204%" height="15" fill="rgb(250,127,30)" fg:x="2133" fg:w="8"/><text x="32.3542%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (33 samples, 0.50%)</title><rect x="31.9837%" y="229" width="0.4967%" height="15" fill="rgb(230,49,44)" fg:x="2125" fg:w="33"/><text x="32.2337%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (17 samples, 0.26%)</title><rect x="32.2246%" y="213" width="0.2559%" height="15" fill="rgb(229,67,23)" fg:x="2141" fg:w="17"/><text x="32.4746%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (26 samples, 0.39%)</title><rect x="32.4804%" y="229" width="0.3913%" height="15" fill="rgb(249,83,47)" fg:x="2158" fg:w="26"/><text x="32.7304%" y="239.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (2 samples, 0.03%)</title><rect x="32.8417%" y="213" width="0.0301%" height="15" fill="rgb(215,43,3)" fg:x="2182" fg:w="2"/><text x="33.0917%" y="223.50"></text></g><g><title>bitbeat::handle_recv (113 samples, 1.70%)</title><rect x="31.2312%" y="245" width="1.7008%" height="15" fill="rgb(238,154,13)" fg:x="2075" fg:w="113"/><text x="31.4812%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (4 samples, 0.06%)</title><rect x="32.8718%" y="229" width="0.0602%" height="15" fill="rgb(219,56,2)" fg:x="2184" fg:w="4"/><text x="33.1218%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (1 samples, 0.02%)</title><rect x="33.8350%" y="197" width="0.0151%" height="15" fill="rgb(233,0,4)" fg:x="2248" fg:w="1"/><text x="34.0850%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.23%)</title><rect x="33.6695%" y="229" width="0.2258%" height="15" fill="rgb(235,30,7)" fg:x="2237" fg:w="15"/><text x="33.9195%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (14 samples, 0.21%)</title><rect x="33.6845%" y="213" width="0.2107%" height="15" fill="rgb(250,79,13)" fg:x="2238" fg:w="14"/><text x="33.9345%" y="223.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.05%)</title><rect x="33.8501%" y="197" width="0.0452%" height="15" fill="rgb(211,146,34)" fg:x="2249" fg:w="3"/><text x="34.1001%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.08%)</title><rect x="33.8952%" y="229" width="0.0753%" height="15" fill="rgb(228,22,38)" fg:x="2252" fg:w="5"/><text x="34.1452%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.14%)</title><rect x="34.1662%" y="213" width="0.1355%" height="15" fill="rgb(235,168,5)" fg:x="2270" fg:w="9"/><text x="34.4162%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (36 samples, 0.54%)</title><rect x="33.9705%" y="229" width="0.5418%" height="15" fill="rgb(221,155,16)" fg:x="2257" fg:w="36"/><text x="34.2205%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (14 samples, 0.21%)</title><rect x="34.3016%" y="213" width="0.2107%" height="15" fill="rgb(215,215,53)" fg:x="2279" fg:w="14"/><text x="34.5516%" y="223.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.02%)</title><rect x="34.5123%" y="229" width="0.0151%" height="15" fill="rgb(223,4,10)" fg:x="2293" fg:w="1"/><text x="34.7623%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (19 samples, 0.29%)</title><rect x="34.6779%" y="213" width="0.2860%" height="15" fill="rgb(234,103,6)" fg:x="2304" fg:w="19"/><text x="34.9279%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (8 samples, 0.12%)</title><rect x="34.8435%" y="197" width="0.1204%" height="15" fill="rgb(227,97,0)" fg:x="2315" fg:w="8"/><text x="35.0935%" y="207.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.05%)</title><rect x="34.9639%" y="213" width="0.0452%" height="15" fill="rgb(234,150,53)" fg:x="2323" fg:w="3"/><text x="35.2139%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.03%)</title><rect x="35.8970%" y="197" width="0.0301%" height="15" fill="rgb(228,201,54)" fg:x="2385" fg:w="2"/><text x="36.1470%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (11 samples, 0.17%)</title><rect x="35.9272%" y="197" width="0.1656%" height="15" fill="rgb(222,22,37)" fg:x="2387" fg:w="11"/><text x="36.1772%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.03%)</title><rect x="36.0626%" y="181" width="0.0301%" height="15" fill="rgb(237,53,32)" fg:x="2396" fg:w="2"/><text x="36.3126%" y="191.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (3 samples, 0.05%)</title><rect x="38.1397%" y="181" width="0.0452%" height="15" fill="rgb(233,25,53)" fg:x="2534" fg:w="3"/><text x="38.3897%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (162 samples, 2.44%)</title><rect x="38.1848%" y="181" width="2.4383%" height="15" fill="rgb(210,40,34)" fg:x="2537" fg:w="162"/><text x="38.4348%" y="191.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 1.01%)</title><rect x="39.6147%" y="165" width="1.0084%" height="15" fill="rgb(241,220,44)" fg:x="2632" fg:w="67"/><text x="39.8647%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (6 samples, 0.09%)</title><rect x="40.6231%" y="181" width="0.0903%" height="15" fill="rgb(235,28,35)" fg:x="2699" fg:w="6"/><text x="40.8731%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (36 samples, 0.54%)</title><rect x="40.7134%" y="181" width="0.5418%" height="15" fill="rgb(210,56,17)" fg:x="2705" fg:w="36"/><text x="40.9634%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (7 samples, 0.11%)</title><rect x="41.1499%" y="165" width="0.1054%" height="15" fill="rgb(224,130,29)" fg:x="2734" fg:w="7"/><text x="41.3999%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (470 samples, 7.07%)</title><rect x="34.5274%" y="229" width="7.0741%" height="15" fill="rgb(235,212,8)" fg:x="2294" fg:w="470"/><text x="34.7774%" y="239.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (438 samples, 6.59%)</title><rect x="35.0090%" y="213" width="6.5924%" height="15" fill="rgb(223,33,50)" fg:x="2326" fg:w="438"/><text x="35.2590%" y="223.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (366 samples, 5.51%)</title><rect x="36.0927%" y="197" width="5.5087%" height="15" fill="rgb(219,149,13)" fg:x="2398" fg:w="366"/><text x="36.3427%" y="207.50">alloc::..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (23 samples, 0.35%)</title><rect x="41.2553%" y="181" width="0.3462%" height="15" fill="rgb(250,156,29)" fg:x="2741" fg:w="23"/><text x="41.5053%" y="191.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.03%)</title><rect x="41.6014%" y="229" width="0.0301%" height="15" fill="rgb(216,193,19)" fg:x="2764" fg:w="2"/><text x="41.8514%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (47 samples, 0.71%)</title><rect x="41.6315%" y="229" width="0.7074%" height="15" fill="rgb(216,135,14)" fg:x="2766" fg:w="47"/><text x="41.8815%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (21 samples, 0.32%)</title><rect x="42.3390%" y="229" width="0.3161%" height="15" fill="rgb(241,47,5)" fg:x="2813" fg:w="21"/><text x="42.5890%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (14 samples, 0.21%)</title><rect x="42.4443%" y="213" width="0.2107%" height="15" fill="rgb(233,42,35)" fg:x="2820" fg:w="14"/><text x="42.6943%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (4 samples, 0.06%)</title><rect x="42.5948%" y="197" width="0.0602%" height="15" fill="rgb(231,13,6)" fg:x="2830" fg:w="4"/><text x="42.8448%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (4 samples, 0.06%)</title><rect x="42.6550%" y="229" width="0.0602%" height="15" fill="rgb(207,181,40)" fg:x="2834" fg:w="4"/><text x="42.9050%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.05%)</title><rect x="42.6701%" y="213" width="0.0452%" height="15" fill="rgb(254,173,49)" fg:x="2835" fg:w="3"/><text x="42.9201%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="42.6851%" y="197" width="0.0301%" height="15" fill="rgb(221,1,38)" fg:x="2836" fg:w="2"/><text x="42.9351%" y="207.50"></text></g><g><title>bitbeat::handle_send (654 samples, 9.84%)</title><rect x="32.9320%" y="245" width="9.8435%" height="15" fill="rgb(206,124,46)" fg:x="2188" fg:w="654"/><text x="33.1820%" y="255.50">bitbeat::handl..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (4 samples, 0.06%)</title><rect x="42.7152%" y="229" width="0.0602%" height="15" fill="rgb(249,21,11)" fg:x="2838" fg:w="4"/><text x="42.9652%" y="239.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (60 samples, 0.90%)</title><rect x="47.9530%" y="229" width="0.9031%" height="15" fill="rgb(222,201,40)" fg:x="3186" fg:w="60"/><text x="48.2030%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (50 samples, 0.75%)</title><rect x="48.1036%" y="213" width="0.7526%" height="15" fill="rgb(235,61,29)" fg:x="3196" fg:w="50"/><text x="48.3536%" y="223.50"></text></g><g><title> N]&gt;::try_from (50 samples, 0.75%)</title><rect x="48.1036%" y="197" width="0.7526%" height="15" fill="rgb(219,207,3)" fg:x="3196" fg:w="50"/><text x="48.3536%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="48.8862%" y="213" width="0.0151%" height="15" fill="rgb(222,56,46)" fg:x="3248" fg:w="1"/><text x="49.1362%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (3 samples, 0.05%)</title><rect x="49.0217%" y="197" width="0.0452%" height="15" fill="rgb(239,76,54)" fg:x="3257" fg:w="3"/><text x="49.2717%" y="207.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.24%)</title><rect x="48.8561%" y="229" width="0.2408%" height="15" fill="rgb(231,124,27)" fg:x="3246" fg:w="16"/><text x="49.1061%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (13 samples, 0.20%)</title><rect x="48.9013%" y="213" width="0.1957%" height="15" fill="rgb(249,195,6)" fg:x="3249" fg:w="13"/><text x="49.1513%" y="223.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (2 samples, 0.03%)</title><rect x="49.0668%" y="197" width="0.0301%" height="15" fill="rgb(237,174,47)" fg:x="3260" fg:w="2"/><text x="49.3168%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.38%)</title><rect x="49.0969%" y="229" width="0.3763%" height="15" fill="rgb(206,201,31)" fg:x="3262" fg:w="25"/><text x="49.3469%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (5 samples, 0.08%)</title><rect x="49.3980%" y="213" width="0.0753%" height="15" fill="rgb(231,57,52)" fg:x="3282" fg:w="5"/><text x="49.6480%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.15%)</title><rect x="49.4732%" y="229" width="0.1505%" height="15" fill="rgb(248,177,22)" fg:x="3287" fg:w="10"/><text x="49.7232%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.44%)</title><rect x="49.6237%" y="229" width="0.4365%" height="15" fill="rgb(215,211,37)" fg:x="3297" fg:w="29"/><text x="49.8737%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (25 samples, 0.38%)</title><rect x="49.6839%" y="213" width="0.3763%" height="15" fill="rgb(241,128,51)" fg:x="3301" fg:w="25"/><text x="49.9339%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (15 samples, 0.23%)</title><rect x="49.8344%" y="197" width="0.2258%" height="15" fill="rgb(227,165,31)" fg:x="3311" fg:w="15"/><text x="50.0844%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.08%)</title><rect x="52.3480%" y="213" width="0.0753%" height="15" fill="rgb(228,167,24)" fg:x="3478" fg:w="5"/><text x="52.5980%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (241 samples, 3.63%)</title><rect x="50.0602%" y="229" width="3.6273%" height="15" fill="rgb(228,143,12)" fg:x="3326" fg:w="241"/><text x="50.3102%" y="239.50">&lt;all..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (84 samples, 1.26%)</title><rect x="52.4232%" y="213" width="1.2643%" height="15" fill="rgb(249,149,8)" fg:x="3483" fg:w="84"/><text x="52.6732%" y="223.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.11%)</title><rect x="53.6875%" y="229" width="0.1054%" height="15" fill="rgb(243,35,44)" fg:x="3567" fg:w="7"/><text x="53.9375%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (65 samples, 0.98%)</title><rect x="53.7929%" y="229" width="0.9783%" height="15" fill="rgb(246,89,9)" fg:x="3574" fg:w="65"/><text x="54.0429%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.02%)</title><rect x="54.7712%" y="229" width="0.0151%" height="15" fill="rgb(233,213,13)" fg:x="3639" fg:w="1"/><text x="55.0212%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (33 samples, 0.50%)</title><rect x="55.7495%" y="213" width="0.4967%" height="15" fill="rgb(233,141,41)" fg:x="3704" fg:w="33"/><text x="55.9995%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (7 samples, 0.11%)</title><rect x="56.1409%" y="197" width="0.1054%" height="15" fill="rgb(239,167,4)" fg:x="3730" fg:w="7"/><text x="56.3909%" y="207.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.03%)</title><rect x="56.2462%" y="213" width="0.0301%" height="15" fill="rgb(209,217,16)" fg:x="3737" fg:w="2"/><text x="56.4962%" y="223.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.02%)</title><rect x="57.6008%" y="181" width="0.0151%" height="15" fill="rgb(219,88,35)" fg:x="3827" fg:w="1"/><text x="57.8508%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.71%)</title><rect x="57.6159%" y="181" width="0.7074%" height="15" fill="rgb(220,193,23)" fg:x="3828" fg:w="47"/><text x="57.8659%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.56%)</title><rect x="57.7664%" y="165" width="0.5569%" height="15" fill="rgb(230,90,52)" fg:x="3838" fg:w="37"/><text x="58.0164%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (7 samples, 0.11%)</title><rect x="58.3233%" y="181" width="0.1054%" height="15" fill="rgb(252,106,19)" fg:x="3875" fg:w="7"/><text x="58.5733%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (64 samples, 0.96%)</title><rect x="58.4287%" y="181" width="0.9633%" height="15" fill="rgb(206,74,20)" fg:x="3882" fg:w="64"/><text x="58.6787%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (10 samples, 0.15%)</title><rect x="59.2414%" y="165" width="0.1505%" height="15" fill="rgb(230,138,44)" fg:x="3936" fg:w="10"/><text x="59.4914%" y="175.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (34 samples, 0.51%)</title><rect x="59.5424%" y="149" width="0.5117%" height="15" fill="rgb(235,182,43)" fg:x="3956" fg:w="34"/><text x="59.7924%" y="159.50"></text></g><g><title>alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (45 samples, 0.68%)</title><rect x="59.3919%" y="181" width="0.6773%" height="15" fill="rgb(242,16,51)" fg:x="3946" fg:w="45"/><text x="59.6419%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (44 samples, 0.66%)</title><rect x="59.4070%" y="165" width="0.6623%" height="15" fill="rgb(248,9,4)" fg:x="3947" fg:w="44"/><text x="59.6570%" y="175.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFull&gt;::index (1 samples, 0.02%)</title><rect x="60.0542%" y="149" width="0.0151%" height="15" fill="rgb(210,31,22)" fg:x="3990" fg:w="1"/><text x="60.3042%" y="159.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (37 samples, 0.56%)</title><rect x="60.1896%" y="165" width="0.5569%" height="15" fill="rgb(239,54,39)" fg:x="3999" fg:w="37"/><text x="60.4396%" y="175.50"></text></g><g><title>_platform_memcmp (16 samples, 0.24%)</title><rect x="60.5057%" y="149" width="0.2408%" height="15" fill="rgb(230,99,41)" fg:x="4020" fg:w="16"/><text x="60.7557%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (397 samples, 5.98%)</title><rect x="54.7863%" y="229" width="5.9753%" height="15" fill="rgb(253,106,12)" fg:x="3640" fg:w="397"/><text x="55.0363%" y="239.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (298 samples, 4.49%)</title><rect x="56.2763%" y="213" width="4.4852%" height="15" fill="rgb(213,46,41)" fg:x="3739" fg:w="298"/><text x="56.5263%" y="223.50">alloc..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (264 samples, 3.97%)</title><rect x="56.7881%" y="197" width="3.9735%" height="15" fill="rgb(215,133,35)" fg:x="3773" fg:w="264"/><text x="57.0381%" y="207.50">allo..</text></g><g><title>core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (46 samples, 0.69%)</title><rect x="60.0692%" y="181" width="0.6924%" height="15" fill="rgb(213,28,5)" fg:x="3991" fg:w="46"/><text x="60.3192%" y="191.50"></text></g><g><title>_platform_memcmp (1 samples, 0.02%)</title><rect x="60.7465%" y="165" width="0.0151%" height="15" fill="rgb(215,77,49)" fg:x="4036" fg:w="1"/><text x="60.9965%" y="175.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.06%)</title><rect x="60.9121%" y="213" width="0.0602%" height="15" fill="rgb(248,100,22)" fg:x="4047" fg:w="4"/><text x="61.1621%" y="223.50"></text></g><g><title>_platform_memmove (9 samples, 0.14%)</title><rect x="60.9723%" y="213" width="0.1355%" height="15" fill="rgb(208,67,9)" fg:x="4051" fg:w="9"/><text x="61.2223%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="61.1830%" y="197" width="0.0301%" height="15" fill="rgb(219,133,21)" fg:x="4065" fg:w="2"/><text x="61.4330%" y="207.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="61.2131%" y="197" width="0.0151%" height="15" fill="rgb(246,46,29)" fg:x="4067" fg:w="1"/><text x="61.4631%" y="207.50"></text></g><g><title>_platform_memmove (3 samples, 0.05%)</title><rect x="61.2282%" y="197" width="0.0452%" height="15" fill="rgb(246,185,52)" fg:x="4068" fg:w="3"/><text x="61.4782%" y="207.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.06%)</title><rect x="61.2733%" y="197" width="0.0602%" height="15" fill="rgb(252,136,11)" fg:x="4071" fg:w="4"/><text x="61.5233%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (8 samples, 0.12%)</title><rect x="62.6430%" y="181" width="0.1204%" height="15" fill="rgb(219,138,53)" fg:x="4162" fg:w="8"/><text x="62.8930%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.02%)</title><rect x="62.7483%" y="165" width="0.0151%" height="15" fill="rgb(211,51,23)" fg:x="4169" fg:w="1"/><text x="62.9983%" y="175.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (6 samples, 0.09%)</title><rect x="64.6749%" y="165" width="0.0903%" height="15" fill="rgb(247,221,28)" fg:x="4297" fg:w="6"/><text x="64.9249%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (220 samples, 3.31%)</title><rect x="64.7652%" y="165" width="3.3113%" height="15" fill="rgb(251,222,45)" fg:x="4303" fg:w="220"/><text x="65.0152%" y="175.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (110 samples, 1.66%)</title><rect x="66.4208%" y="149" width="1.6556%" height="15" fill="rgb(217,162,53)" fg:x="4413" fg:w="110"/><text x="66.6708%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (10 samples, 0.15%)</title><rect x="68.0765%" y="165" width="0.1505%" height="15" fill="rgb(229,93,14)" fg:x="4523" fg:w="10"/><text x="68.3265%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (33 samples, 0.50%)</title><rect x="68.2270%" y="165" width="0.4967%" height="15" fill="rgb(209,67,49)" fg:x="4533" fg:w="33"/><text x="68.4770%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (6 samples, 0.09%)</title><rect x="68.6334%" y="149" width="0.0903%" height="15" fill="rgb(213,87,29)" fg:x="4560" fg:w="6"/><text x="68.8834%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (522 samples, 7.86%)</title><rect x="61.1078%" y="213" width="7.8567%" height="15" fill="rgb(205,151,52)" fg:x="4060" fg:w="522"/><text x="61.3578%" y="223.50">alloc::coll..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (507 samples, 7.63%)</title><rect x="61.3335%" y="197" width="7.6309%" height="15" fill="rgb(253,215,39)" fg:x="4075" fg:w="507"/><text x="61.5835%" y="207.50">alloc::col..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (412 samples, 6.20%)</title><rect x="62.7634%" y="181" width="6.2011%" height="15" fill="rgb(221,220,41)" fg:x="4170" fg:w="412"/><text x="63.0134%" y="191.50">alloc::c..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (16 samples, 0.24%)</title><rect x="68.7237%" y="165" width="0.2408%" height="15" fill="rgb(218,133,21)" fg:x="4566" fg:w="16"/><text x="68.9737%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::into_mut (15 samples, 0.23%)</title><rect x="68.9645%" y="213" width="0.2258%" height="15" fill="rgb(221,193,43)" fg:x="4582" fg:w="15"/><text x="69.2145%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (12 samples, 0.18%)</title><rect x="69.0096%" y="197" width="0.1806%" height="15" fill="rgb(240,128,52)" fg:x="4585" fg:w="12"/><text x="69.2596%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (3 samples, 0.05%)</title><rect x="69.1451%" y="181" width="0.0452%" height="15" fill="rgb(253,114,12)" fg:x="4594" fg:w="3"/><text x="69.3951%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (3 samples, 0.05%)</title><rect x="69.2956%" y="197" width="0.0452%" height="15" fill="rgb(215,223,47)" fg:x="4604" fg:w="3"/><text x="69.5456%" y="207.50"></text></g><g><title>_platform_memmove (1 samples, 0.02%)</title><rect x="69.6869%" y="181" width="0.0151%" height="15" fill="rgb(248,225,23)" fg:x="4630" fg:w="1"/><text x="69.9369%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry::_{{closure}} (1 samples, 0.02%)</title><rect x="69.7020%" y="181" width="0.0151%" height="15" fill="rgb(250,108,0)" fg:x="4631" fg:w="1"/><text x="69.9520%" y="191.50"></text></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.02%)</title><rect x="69.7020%" y="165" width="0.0151%" height="15" fill="rgb(228,208,7)" fg:x="4631" fg:w="1"/><text x="69.9520%" y="175.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (1 samples, 0.02%)</title><rect x="69.7020%" y="149" width="0.0151%" height="15" fill="rgb(244,45,10)" fg:x="4631" fg:w="1"/><text x="69.9520%" y="159.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (1 samples, 0.02%)</title><rect x="69.7020%" y="133" width="0.0151%" height="15" fill="rgb(207,125,25)" fg:x="4631" fg:w="1"/><text x="69.9520%" y="143.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (1 samples, 0.02%)</title><rect x="69.7020%" y="117" width="0.0151%" height="15" fill="rgb(210,195,18)" fg:x="4631" fg:w="1"/><text x="69.9520%" y="127.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::from_new_internal (1 samples, 0.02%)</title><rect x="69.7020%" y="101" width="0.0151%" height="15" fill="rgb(249,80,12)" fg:x="4631" fg:w="1"/><text x="69.9520%" y="111.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (1 samples, 0.02%)</title><rect x="69.7020%" y="85" width="0.0151%" height="15" fill="rgb(221,65,9)" fg:x="4631" fg:w="1"/><text x="69.9520%" y="95.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (1 samples, 0.02%)</title><rect x="69.7321%" y="149" width="0.0151%" height="15" fill="rgb(235,49,36)" fg:x="4633" fg:w="1"/><text x="69.9821%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (3 samples, 0.05%)</title><rect x="69.7622%" y="133" width="0.0452%" height="15" fill="rgb(225,32,20)" fg:x="4635" fg:w="3"/><text x="70.0122%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.03%)</title><rect x="69.7772%" y="117" width="0.0301%" height="15" fill="rgb(215,141,46)" fg:x="4636" fg:w="2"/><text x="70.0272%" y="127.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (8 samples, 0.12%)</title><rect x="69.7471%" y="149" width="0.1204%" height="15" fill="rgb(250,160,47)" fg:x="4634" fg:w="8"/><text x="69.9971%" y="159.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.06%)</title><rect x="69.8073%" y="133" width="0.0602%" height="15" fill="rgb(216,222,40)" fg:x="4638" fg:w="4"/><text x="70.0573%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.05%)</title><rect x="69.8224%" y="117" width="0.0452%" height="15" fill="rgb(234,217,39)" fg:x="4639" fg:w="3"/><text x="70.0724%" y="127.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.05%)</title><rect x="69.8224%" y="101" width="0.0452%" height="15" fill="rgb(207,178,40)" fg:x="4639" fg:w="3"/><text x="70.0724%" y="111.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (17 samples, 0.26%)</title><rect x="69.7170%" y="181" width="0.2559%" height="15" fill="rgb(221,136,13)" fg:x="4632" fg:w="17"/><text x="69.9670%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (17 samples, 0.26%)</title><rect x="69.7170%" y="165" width="0.2559%" height="15" fill="rgb(249,199,10)" fg:x="4632" fg:w="17"/><text x="69.9670%" y="175.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (7 samples, 0.11%)</title><rect x="69.8675%" y="149" width="0.1054%" height="15" fill="rgb(249,222,13)" fg:x="4642" fg:w="7"/><text x="70.1175%" y="159.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="70.7556%" y="165" width="0.0151%" height="15" fill="rgb(244,185,38)" fg:x="4701" fg:w="1"/><text x="71.0056%" y="175.50"></text></g><g><title>_platform_memmove (11 samples, 0.17%)</title><rect x="70.7706%" y="165" width="0.1656%" height="15" fill="rgb(236,202,9)" fg:x="4702" fg:w="11"/><text x="71.0206%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (19 samples, 0.29%)</title><rect x="71.2523%" y="149" width="0.2860%" height="15" fill="rgb(250,229,37)" fg:x="4734" fg:w="19"/><text x="71.5023%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (72 samples, 1.08%)</title><rect x="70.9362%" y="165" width="1.0837%" height="15" fill="rgb(206,174,23)" fg:x="4713" fg:w="72"/><text x="71.1862%" y="175.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (32 samples, 0.48%)</title><rect x="71.5382%" y="149" width="0.4816%" height="15" fill="rgb(211,33,43)" fg:x="4753" fg:w="32"/><text x="71.7882%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (1 samples, 0.02%)</title><rect x="72.1102%" y="133" width="0.0151%" height="15" fill="rgb(245,58,50)" fg:x="4791" fg:w="1"/><text x="72.3602%" y="143.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.08%)</title><rect x="72.1252%" y="133" width="0.0753%" height="15" fill="rgb(244,68,36)" fg:x="4792" fg:w="5"/><text x="72.3752%" y="143.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (27 samples, 0.41%)</title><rect x="72.0199%" y="149" width="0.4064%" height="15" fill="rgb(232,229,15)" fg:x="4785" fg:w="27"/><text x="72.2699%" y="159.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (15 samples, 0.23%)</title><rect x="72.2005%" y="133" width="0.2258%" height="15" fill="rgb(254,30,23)" fg:x="4797" fg:w="15"/><text x="72.4505%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (14 samples, 0.21%)</title><rect x="72.2155%" y="117" width="0.2107%" height="15" fill="rgb(235,160,14)" fg:x="4798" fg:w="14"/><text x="72.4655%" y="127.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (2 samples, 0.03%)</title><rect x="72.3961%" y="101" width="0.0301%" height="15" fill="rgb(212,155,44)" fg:x="4810" fg:w="2"/><text x="72.6461%" y="111.50"></text></g><g><title>DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="72.4714%" y="53" width="0.0151%" height="15" fill="rgb(226,2,50)" fg:x="4815" fg:w="1"/><text x="72.7214%" y="63.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (4 samples, 0.06%)</title><rect x="72.4413%" y="117" width="0.0602%" height="15" fill="rgb(234,177,6)" fg:x="4813" fg:w="4"/><text x="72.6913%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.06%)</title><rect x="72.4413%" y="101" width="0.0602%" height="15" fill="rgb(217,24,9)" fg:x="4813" fg:w="4"/><text x="72.6913%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.05%)</title><rect x="72.4564%" y="85" width="0.0452%" height="15" fill="rgb(220,13,46)" fg:x="4814" fg:w="3"/><text x="72.7064%" y="95.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.03%)</title><rect x="72.4714%" y="69" width="0.0301%" height="15" fill="rgb(239,221,27)" fg:x="4815" fg:w="2"/><text x="72.7214%" y="79.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (1 samples, 0.02%)</title><rect x="72.4865%" y="53" width="0.0151%" height="15" fill="rgb(222,198,25)" fg:x="4816" fg:w="1"/><text x="72.7365%" y="63.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (172 samples, 2.59%)</title><rect x="69.9729%" y="181" width="2.5888%" height="15" fill="rgb(211,99,13)" fg:x="4649" fg:w="172"/><text x="70.2229%" y="191.50">al..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (36 samples, 0.54%)</title><rect x="72.0199%" y="165" width="0.5418%" height="15" fill="rgb(232,111,31)" fg:x="4785" fg:w="36"/><text x="72.2699%" y="175.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (9 samples, 0.14%)</title><rect x="72.4262%" y="149" width="0.1355%" height="15" fill="rgb(245,82,37)" fg:x="4812" fg:w="9"/><text x="72.6762%" y="159.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (8 samples, 0.12%)</title><rect x="72.4413%" y="133" width="0.1204%" height="15" fill="rgb(227,149,46)" fg:x="4813" fg:w="8"/><text x="72.6913%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (4 samples, 0.06%)</title><rect x="72.5015%" y="117" width="0.0602%" height="15" fill="rgb(218,36,50)" fg:x="4817" fg:w="4"/><text x="72.7515%" y="127.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (2 samples, 0.03%)</title><rect x="72.5316%" y="101" width="0.0301%" height="15" fill="rgb(226,80,48)" fg:x="4819" fg:w="2"/><text x="72.7816%" y="111.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (786 samples, 11.83%)</title><rect x="60.7616%" y="229" width="11.8302%" height="15" fill="rgb(238,224,15)" fg:x="4037" fg:w="786"/><text x="61.0116%" y="239.50">alloc::collections..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (226 samples, 3.40%)</title><rect x="69.1902%" y="213" width="3.4016%" height="15" fill="rgb(241,136,10)" fg:x="4597" fg:w="226"/><text x="69.4402%" y="223.50">all..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (216 samples, 3.25%)</title><rect x="69.3408%" y="197" width="3.2511%" height="15" fill="rgb(208,32,45)" fg:x="4607" fg:w="216"/><text x="69.5908%" y="207.50">all..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.03%)</title><rect x="72.5617%" y="181" width="0.0301%" height="15" fill="rgb(207,135,9)" fg:x="4821" fg:w="2"/><text x="72.8117%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (1 samples, 0.02%)</title><rect x="72.5918%" y="229" width="0.0151%" height="15" fill="rgb(206,86,44)" fg:x="4823" fg:w="1"/><text x="72.8418%" y="239.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.05%)</title><rect x="72.6069%" y="229" width="0.0452%" height="15" fill="rgb(245,177,15)" fg:x="4824" fg:w="3"/><text x="72.8569%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (17 samples, 0.26%)</title><rect x="72.6520%" y="229" width="0.2559%" height="15" fill="rgb(206,64,50)" fg:x="4827" fg:w="17"/><text x="72.9020%" y="239.50"></text></g><g><title>DYLD-STUB$$memcpy (6 samples, 0.09%)</title><rect x="73.3444%" y="197" width="0.0903%" height="15" fill="rgb(234,36,40)" fg:x="4873" fg:w="6"/><text x="73.5944%" y="207.50"></text></g><g><title>_platform_memmove (11 samples, 0.17%)</title><rect x="73.4347%" y="197" width="0.1656%" height="15" fill="rgb(213,64,8)" fg:x="4879" fg:w="11"/><text x="73.6847%" y="207.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="75.5117%" y="181" width="0.0151%" height="15" fill="rgb(210,75,36)" fg:x="5017" fg:w="1"/><text x="75.7617%" y="191.50"></text></g><g><title>DYLD-STUB$$malloc (5 samples, 0.08%)</title><rect x="76.1439%" y="165" width="0.0753%" height="15" fill="rgb(229,88,21)" fg:x="5059" fg:w="5"/><text x="76.3939%" y="175.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.02%)</title><rect x="76.2191%" y="165" width="0.0151%" height="15" fill="rgb(252,204,47)" fg:x="5064" fg:w="1"/><text x="76.4691%" y="175.50"></text></g><g><title>_malloc_zone_malloc (17 samples, 0.26%)</title><rect x="76.2342%" y="165" width="0.2559%" height="15" fill="rgb(208,77,27)" fg:x="5065" fg:w="17"/><text x="76.4842%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (89 samples, 1.34%)</title><rect x="75.5268%" y="181" width="1.3396%" height="15" fill="rgb(221,76,26)" fg:x="5018" fg:w="89"/><text x="75.7768%" y="191.50"></text></g><g><title>nanov2_malloc_type (25 samples, 0.38%)</title><rect x="76.4901%" y="165" width="0.3763%" height="15" fill="rgb(225,139,18)" fg:x="5082" fg:w="25"/><text x="76.7401%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (218 samples, 3.28%)</title><rect x="73.6002%" y="197" width="3.2812%" height="15" fill="rgb(230,137,11)" fg:x="4890" fg:w="218"/><text x="73.8502%" y="207.50">all..</text></g><g><title>core::hint::assert_unchecked::precondition_check (1 samples, 0.02%)</title><rect x="76.8663%" y="181" width="0.0151%" height="15" fill="rgb(212,28,1)" fg:x="5107" fg:w="1"/><text x="77.1163%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (396 samples, 5.96%)</title><rect x="72.9681%" y="213" width="5.9603%" height="15" fill="rgb(248,164,17)" fg:x="4848" fg:w="396"/><text x="73.2181%" y="223.50">&lt;T as al..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (136 samples, 2.05%)</title><rect x="76.8814%" y="197" width="2.0470%" height="15" fill="rgb(222,171,42)" fg:x="5108" fg:w="136"/><text x="77.1314%" y="207.50">c..</text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (22 samples, 0.33%)</title><rect x="78.5972%" y="181" width="0.3311%" height="15" fill="rgb(243,84,45)" fg:x="5222" fg:w="22"/><text x="78.8472%" y="191.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec (403 samples, 6.07%)</title><rect x="72.9079%" y="229" width="6.0656%" height="15" fill="rgb(252,49,23)" fg:x="4844" fg:w="403"/><text x="73.1579%" y="239.50">alloc::s..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.05%)</title><rect x="78.9284%" y="213" width="0.0452%" height="15" fill="rgb(215,19,7)" fg:x="5244" fg:w="3"/><text x="79.1784%" y="223.50"></text></g><g><title>alloc::string::String::as_str (30 samples, 0.45%)</title><rect x="78.9735%" y="229" width="0.4515%" height="15" fill="rgb(238,81,41)" fg:x="5247" fg:w="30"/><text x="79.2235%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (15 samples, 0.23%)</title><rect x="79.1993%" y="213" width="0.2258%" height="15" fill="rgb(210,199,37)" fg:x="5262" fg:w="15"/><text x="79.4493%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (14 samples, 0.21%)</title><rect x="79.6960%" y="213" width="0.2107%" height="15" fill="rgb(244,192,49)" fg:x="5295" fg:w="14"/><text x="79.9460%" y="223.50"></text></g><g><title>alloc::string::String::from_utf8 (50 samples, 0.75%)</title><rect x="79.4250%" y="229" width="0.7526%" height="15" fill="rgb(226,211,11)" fg:x="5277" fg:w="50"/><text x="79.6750%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (18 samples, 0.27%)</title><rect x="79.9067%" y="213" width="0.2709%" height="15" fill="rgb(236,162,54)" fg:x="5309" fg:w="18"/><text x="80.1567%" y="223.50"></text></g><g><title>_platform_memmove (6 samples, 0.09%)</title><rect x="80.4636%" y="213" width="0.0903%" height="15" fill="rgb(220,229,9)" fg:x="5346" fg:w="6"/><text x="80.7136%" y="223.50"></text></g><g><title>_realloc (3 samples, 0.05%)</title><rect x="80.7345%" y="181" width="0.0452%" height="15" fill="rgb(250,87,22)" fg:x="5364" fg:w="3"/><text x="80.9845%" y="191.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.02%)</title><rect x="80.8098%" y="165" width="0.0151%" height="15" fill="rgb(239,43,17)" fg:x="5369" fg:w="1"/><text x="81.0598%" y="175.50"></text></g><g><title>_nanov2_free (1 samples, 0.02%)</title><rect x="81.1258%" y="133" width="0.0151%" height="15" fill="rgb(231,177,25)" fg:x="5390" fg:w="1"/><text x="81.3758%" y="143.50"></text></g><g><title>default_zone_realloc (1 samples, 0.02%)</title><rect x="81.1409%" y="133" width="0.0151%" height="15" fill="rgb(219,179,1)" fg:x="5391" fg:w="1"/><text x="81.3909%" y="143.50"></text></g><g><title>_nanov2_free (11 samples, 0.17%)</title><rect x="81.2613%" y="117" width="0.1656%" height="15" fill="rgb(238,219,53)" fg:x="5399" fg:w="11"/><text x="81.5113%" y="127.50"></text></g><g><title>_platform_memmove (5 samples, 0.08%)</title><rect x="81.4269%" y="117" width="0.0753%" height="15" fill="rgb(232,167,36)" fg:x="5410" fg:w="5"/><text x="81.6769%" y="127.50"></text></g><g><title>nanov2_malloc (13 samples, 0.20%)</title><rect x="81.5021%" y="117" width="0.1957%" height="15" fill="rgb(244,19,51)" fg:x="5415" fg:w="13"/><text x="81.7521%" y="127.50"></text></g><g><title>_malloc_zone_realloc (61 samples, 0.92%)</title><rect x="80.9302%" y="149" width="0.9181%" height="15" fill="rgb(224,6,22)" fg:x="5377" fg:w="61"/><text x="81.1802%" y="159.50"></text></g><g><title>nanov2_realloc (46 samples, 0.69%)</title><rect x="81.1559%" y="133" width="0.6924%" height="15" fill="rgb(224,145,5)" fg:x="5392" fg:w="46"/><text x="81.4059%" y="143.50"></text></g><g><title>nanov2_pointer_size (10 samples, 0.15%)</title><rect x="81.6978%" y="117" width="0.1505%" height="15" fill="rgb(234,130,49)" fg:x="5428" fg:w="10"/><text x="81.9478%" y="127.50"></text></g><g><title>nanov2_realloc (2 samples, 0.03%)</title><rect x="81.8483%" y="149" width="0.0301%" height="15" fill="rgb(254,6,2)" fg:x="5438" fg:w="2"/><text x="82.0983%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (89 samples, 1.34%)</title><rect x="80.6743%" y="197" width="1.3396%" height="15" fill="rgb(208,96,46)" fg:x="5360" fg:w="89"/><text x="80.9243%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (82 samples, 1.23%)</title><rect x="80.7797%" y="181" width="1.2342%" height="15" fill="rgb(239,3,39)" fg:x="5367" fg:w="82"/><text x="81.0297%" y="191.50"></text></g><g><title>_realloc (79 samples, 1.19%)</title><rect x="80.8248%" y="165" width="1.1890%" height="15" fill="rgb(233,210,1)" fg:x="5370" fg:w="79"/><text x="81.0748%" y="175.50"></text></g><g><title>nanov2_size (9 samples, 0.14%)</title><rect x="81.8784%" y="149" width="0.1355%" height="15" fill="rgb(244,137,37)" fg:x="5440" fg:w="9"/><text x="82.1284%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (99 samples, 1.49%)</title><rect x="80.5539%" y="213" width="1.4901%" height="15" fill="rgb(240,136,2)" fg:x="5352" fg:w="99"/><text x="80.8039%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="82.0138%" y="197" width="0.0301%" height="15" fill="rgb(239,18,37)" fg:x="5449" fg:w="2"/><text x="82.2638%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.05%)</title><rect x="82.0439%" y="213" width="0.0452%" height="15" fill="rgb(218,185,22)" fg:x="5451" fg:w="3"/><text x="82.2939%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (134 samples, 2.02%)</title><rect x="80.1776%" y="229" width="2.0169%" height="15" fill="rgb(225,218,4)" fg:x="5327" fg:w="134"/><text x="80.4276%" y="239.50">a..</text></g><g><title>core::intrinsics::copy::precondition_check (7 samples, 0.11%)</title><rect x="82.0891%" y="213" width="0.1054%" height="15" fill="rgb(230,182,32)" fg:x="5454" fg:w="7"/><text x="82.3391%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.09%)</title><rect x="82.1945%" y="229" width="0.0903%" height="15" fill="rgb(242,56,43)" fg:x="5461" fg:w="6"/><text x="82.4445%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (10 samples, 0.15%)</title><rect x="82.2848%" y="229" width="0.1505%" height="15" fill="rgb(233,99,24)" fg:x="5467" fg:w="10"/><text x="82.5348%" y="239.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (4 samples, 0.06%)</title><rect x="82.3751%" y="213" width="0.0602%" height="15" fill="rgb(234,209,42)" fg:x="5473" fg:w="4"/><text x="82.6251%" y="223.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="83.1276%" y="213" width="0.0151%" height="15" fill="rgb(227,7,12)" fg:x="5523" fg:w="1"/><text x="83.3776%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.66%)</title><rect x="83.1427%" y="213" width="0.6623%" height="15" fill="rgb(245,203,43)" fg:x="5524" fg:w="44"/><text x="83.3927%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.41%)</title><rect x="83.3986%" y="197" width="0.4064%" height="15" fill="rgb(238,205,33)" fg:x="5541" fg:w="27"/><text x="83.6486%" y="207.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::clear (6 samples, 0.09%)</title><rect x="83.8049%" y="213" width="0.0903%" height="15" fill="rgb(231,56,7)" fg:x="5568" fg:w="6"/><text x="84.0549%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::truncate (3 samples, 0.05%)</title><rect x="83.8501%" y="197" width="0.0452%" height="15" fill="rgb(244,186,29)" fg:x="5571" fg:w="3"/><text x="84.1001%" y="207.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T (4 samples, 0.06%)</title><rect x="83.8952%" y="213" width="0.0602%" height="15" fill="rgb(234,111,31)" fg:x="5574" fg:w="4"/><text x="84.1452%" y="223.50"></text></g><g><title> N]&gt;::index_mut (4 samples, 0.06%)</title><rect x="83.8952%" y="197" width="0.0602%" height="15" fill="rgb(241,149,10)" fg:x="5574" fg:w="4"/><text x="84.1452%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="83.9404%" y="181" width="0.0151%" height="15" fill="rgb(249,206,44)" fg:x="5577" fg:w="1"/><text x="84.1904%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitbeat::Function&gt;&gt; (20 samples, 0.30%)</title><rect x="83.9554%" y="213" width="0.3010%" height="15" fill="rgb(251,153,30)" fg:x="5578" fg:w="20"/><text x="84.2054%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.27%)</title><rect x="83.9856%" y="197" width="0.2709%" height="15" fill="rgb(239,152,38)" fg:x="5580" fg:w="18"/><text x="84.2356%" y="207.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::fill (383 samples, 5.76%)</title><rect x="84.2565%" y="213" width="5.7646%" height="15" fill="rgb(249,139,47)" fg:x="5598" fg:w="383"/><text x="84.5065%" y="223.50">core::s..</text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (382 samples, 5.75%)</title><rect x="84.2715%" y="197" width="5.7495%" height="15" fill="rgb(244,64,35)" fg:x="5599" fg:w="382"/><text x="84.5215%" y="207.50">&lt;[T] as..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (298 samples, 4.49%)</title><rect x="85.5358%" y="181" width="4.4852%" height="15" fill="rgb(216,46,15)" fg:x="5683" fg:w="298"/><text x="85.7858%" y="191.50">&lt;core..</text></g><g><title>bitbeat::Process::reset (511 samples, 7.69%)</title><rect x="82.4353%" y="229" width="7.6911%" height="15" fill="rgb(250,74,19)" fg:x="5477" fg:w="511"/><text x="82.6853%" y="239.50">bitbeat::Pr..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (7 samples, 0.11%)</title><rect x="90.0211%" y="213" width="0.1054%" height="15" fill="rgb(249,42,33)" fg:x="5981" fg:w="7"/><text x="90.2711%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (6 samples, 0.09%)</title><rect x="90.0361%" y="197" width="0.0903%" height="15" fill="rgb(242,149,17)" fg:x="5982" fg:w="6"/><text x="90.2861%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (20 samples, 0.30%)</title><rect x="90.1264%" y="229" width="0.3010%" height="15" fill="rgb(244,29,21)" fg:x="5988" fg:w="20"/><text x="90.3764%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (16 samples, 0.24%)</title><rect x="90.1866%" y="213" width="0.2408%" height="15" fill="rgb(220,130,37)" fg:x="5992" fg:w="16"/><text x="90.4366%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.02%)</title><rect x="90.4124%" y="197" width="0.0151%" height="15" fill="rgb(211,67,2)" fg:x="6007" fg:w="1"/><text x="90.6624%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (37 samples, 0.56%)</title><rect x="90.9994%" y="133" width="0.5569%" height="15" fill="rgb(235,68,52)" fg:x="6046" fg:w="37"/><text x="91.2494%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.51%)</title><rect x="91.0446%" y="117" width="0.5117%" height="15" fill="rgb(246,142,3)" fg:x="6049" fg:w="34"/><text x="91.2946%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (8 samples, 0.12%)</title><rect x="91.4359%" y="101" width="0.1204%" height="15" fill="rgb(241,25,7)" fg:x="6075" fg:w="8"/><text x="91.6859%" y="111.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::offset_from_unsigned::precondition_check (2 samples, 0.03%)</title><rect x="91.5262%" y="85" width="0.0301%" height="15" fill="rgb(242,119,39)" fg:x="6081" fg:w="2"/><text x="91.7762%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (12 samples, 0.18%)</title><rect x="91.5563%" y="133" width="0.1806%" height="15" fill="rgb(241,98,45)" fg:x="6083" fg:w="12"/><text x="91.8063%" y="143.50"></text></g><g><title>bitbeat::handle_spawn::_{{closure}} (4 samples, 0.06%)</title><rect x="92.4744%" y="69" width="0.0602%" height="15" fill="rgb(254,28,30)" fg:x="6144" fg:w="4"/><text x="92.7244%" y="79.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7 samples, 0.11%)</title><rect x="92.4443%" y="85" width="0.1054%" height="15" fill="rgb(241,142,54)" fg:x="6142" fg:w="7"/><text x="92.6943%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="92.5346%" y="69" width="0.0151%" height="15" fill="rgb(222,85,15)" fg:x="6148" fg:w="1"/><text x="92.7846%" y="79.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (1 samples, 0.02%)</title><rect x="92.5497%" y="85" width="0.0151%" height="15" fill="rgb(210,85,47)" fg:x="6149" fg:w="1"/><text x="92.7997%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;&amp;u8,i64,(),bitbeat::handle_spawn::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (8 samples, 0.12%)</title><rect x="92.5647%" y="85" width="0.1204%" height="15" fill="rgb(224,206,25)" fg:x="6150" fg:w="8"/><text x="92.8147%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (5 samples, 0.08%)</title><rect x="92.6099%" y="69" width="0.0753%" height="15" fill="rgb(243,201,19)" fg:x="6153" fg:w="5"/><text x="92.8599%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt; (4 samples, 0.06%)</title><rect x="92.6249%" y="53" width="0.0602%" height="15" fill="rgb(236,59,4)" fg:x="6154" fg:w="4"/><text x="92.8749%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (3 samples, 0.05%)</title><rect x="92.6400%" y="37" width="0.0452%" height="15" fill="rgb(254,179,45)" fg:x="6155" fg:w="3"/><text x="92.8900%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (132 samples, 1.99%)</title><rect x="90.8338%" y="165" width="1.9868%" height="15" fill="rgb(226,14,10)" fg:x="6035" fg:w="132"/><text x="91.0838%" y="175.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (131 samples, 1.97%)</title><rect x="90.8489%" y="149" width="1.9717%" height="15" fill="rgb(244,27,41)" fg:x="6036" fg:w="131"/><text x="91.0989%" y="159.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (72 samples, 1.08%)</title><rect x="91.7369%" y="133" width="1.0837%" height="15" fill="rgb(235,35,32)" fg:x="6095" fg:w="72"/><text x="91.9869%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (68 samples, 1.02%)</title><rect x="91.7971%" y="117" width="1.0235%" height="15" fill="rgb(218,68,31)" fg:x="6099" fg:w="68"/><text x="92.0471%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 0.99%)</title><rect x="91.8272%" y="101" width="0.9934%" height="15" fill="rgb(207,120,37)" fg:x="6101" fg:w="66"/><text x="92.0772%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (9 samples, 0.14%)</title><rect x="92.6851%" y="85" width="0.1355%" height="15" fill="rgb(227,98,0)" fg:x="6158" fg:w="9"/><text x="92.9351%" y="95.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::offset_from_unsigned::precondition_check (4 samples, 0.06%)</title><rect x="92.7604%" y="69" width="0.0602%" height="15" fill="rgb(207,7,3)" fg:x="6163" fg:w="4"/><text x="93.0104%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (25 samples, 0.38%)</title><rect x="92.8206%" y="165" width="0.3763%" height="15" fill="rgb(206,98,19)" fg:x="6167" fg:w="25"/><text x="93.0706%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.33%)</title><rect x="92.8657%" y="149" width="0.3311%" height="15" fill="rgb(217,5,26)" fg:x="6170" fg:w="22"/><text x="93.1157%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (15 samples, 0.23%)</title><rect x="92.9711%" y="133" width="0.2258%" height="15" fill="rgb(235,190,38)" fg:x="6177" fg:w="15"/><text x="93.2211%" y="143.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::offset_from_unsigned::precondition_check (4 samples, 0.06%)</title><rect x="93.1367%" y="117" width="0.0602%" height="15" fill="rgb(247,86,24)" fg:x="6188" fg:w="4"/><text x="93.3867%" y="127.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.02%)</title><rect x="93.3323%" y="133" width="0.0151%" height="15" fill="rgb(205,101,16)" fg:x="6201" fg:w="1"/><text x="93.5823%" y="143.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="93.3474%" y="133" width="0.0602%" height="15" fill="rgb(246,168,33)" fg:x="6202" fg:w="4"/><text x="93.5974%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (17 samples, 0.26%)</title><rect x="93.3022%" y="149" width="0.2559%" height="15" fill="rgb(231,114,1)" fg:x="6199" fg:w="17"/><text x="93.5522%" y="159.50"></text></g><g><title>nanov2_malloc_type (10 samples, 0.15%)</title><rect x="93.4076%" y="133" width="0.1505%" height="15" fill="rgb(207,184,53)" fg:x="6206" fg:w="10"/><text x="93.6576%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (25 samples, 0.38%)</title><rect x="93.1969%" y="165" width="0.3763%" height="15" fill="rgb(224,95,51)" fg:x="6192" fg:w="25"/><text x="93.4469%" y="175.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (1 samples, 0.02%)</title><rect x="93.5581%" y="149" width="0.0151%" height="15" fill="rgb(212,188,45)" fg:x="6216" fg:w="1"/><text x="93.8081%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (210 samples, 3.16%)</title><rect x="90.4275%" y="229" width="3.1607%" height="15" fill="rgb(223,154,38)" fg:x="6008" fg:w="210"/><text x="90.6775%" y="239.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (207 samples, 3.12%)</title><rect x="90.4726%" y="213" width="3.1156%" height="15" fill="rgb(251,22,52)" fg:x="6011" fg:w="207"/><text x="90.7226%" y="223.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (198 samples, 2.98%)</title><rect x="90.6081%" y="197" width="2.9801%" height="15" fill="rgb(229,209,22)" fg:x="6020" fg:w="198"/><text x="90.8581%" y="207.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (198 samples, 2.98%)</title><rect x="90.6081%" y="181" width="2.9801%" height="15" fill="rgb(234,138,34)" fg:x="6020" fg:w="198"/><text x="90.8581%" y="191.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.02%)</title><rect x="93.5731%" y="165" width="0.0151%" height="15" fill="rgb(212,95,11)" fg:x="6217" fg:w="1"/><text x="93.8231%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1 samples, 0.02%)</title><rect x="93.5882%" y="229" width="0.0151%" height="15" fill="rgb(240,179,47)" fg:x="6218" fg:w="1"/><text x="93.8382%" y="239.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (4 samples, 0.06%)</title><rect x="93.6033%" y="229" width="0.0602%" height="15" fill="rgb(240,163,11)" fg:x="6219" fg:w="4"/><text x="93.8533%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="93.8742%" y="197" width="0.0151%" height="15" fill="rgb(236,37,12)" fg:x="6237" fg:w="1"/><text x="94.1242%" y="207.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="93.9795%" y="181" width="0.0151%" height="15" fill="rgb(232,164,16)" fg:x="6244" fg:w="1"/><text x="94.2295%" y="191.50"></text></g><g><title>_free (11 samples, 0.17%)</title><rect x="93.9946%" y="181" width="0.1656%" height="15" fill="rgb(244,205,15)" fg:x="6245" fg:w="11"/><text x="94.2446%" y="191.50"></text></g><g><title>_nanov2_free (31 samples, 0.47%)</title><rect x="94.1601%" y="181" width="0.4666%" height="15" fill="rgb(223,117,47)" fg:x="6256" fg:w="31"/><text x="94.4101%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (71 samples, 1.07%)</title><rect x="93.6635%" y="229" width="1.0686%" height="15" fill="rgb(244,107,35)" fg:x="6223" fg:w="71"/><text x="93.9135%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (68 samples, 1.02%)</title><rect x="93.7086%" y="213" width="1.0235%" height="15" fill="rgb(205,140,8)" fg:x="6226" fg:w="68"/><text x="93.9586%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (56 samples, 0.84%)</title><rect x="93.8892%" y="197" width="0.8429%" height="15" fill="rgb(228,84,46)" fg:x="6238" fg:w="56"/><text x="94.1392%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7 samples, 0.11%)</title><rect x="94.6267%" y="181" width="0.1054%" height="15" fill="rgb(254,188,9)" fg:x="6287" fg:w="7"/><text x="94.8767%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.05%)</title><rect x="94.8224%" y="213" width="0.0452%" height="15" fill="rgb(206,112,54)" fg:x="6300" fg:w="3"/><text x="95.0724%" y="223.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="94.8977%" y="181" width="0.0151%" height="15" fill="rgb(216,84,49)" fg:x="6305" fg:w="1"/><text x="95.1477%" y="191.50"></text></g><g><title>__rustc::__rdl_dealloc (4 samples, 0.06%)</title><rect x="94.9127%" y="181" width="0.0602%" height="15" fill="rgb(214,194,35)" fg:x="6306" fg:w="4"/><text x="95.1627%" y="191.50"></text></g><g><title>_free (12 samples, 0.18%)</title><rect x="94.9729%" y="181" width="0.1806%" height="15" fill="rgb(249,28,3)" fg:x="6310" fg:w="12"/><text x="95.2229%" y="191.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="95.3943%" y="165" width="0.0151%" height="15" fill="rgb(222,56,52)" fg:x="6338" fg:w="1"/><text x="95.6443%" y="175.50"></text></g><g><title>__bzero (1 samples, 0.02%)</title><rect x="95.4094%" y="165" width="0.0151%" height="15" fill="rgb(245,217,50)" fg:x="6339" fg:w="1"/><text x="95.6594%" y="175.50"></text></g><g><title>_nanov2_free (25 samples, 0.38%)</title><rect x="95.1535%" y="181" width="0.3763%" height="15" fill="rgb(213,201,24)" fg:x="6322" fg:w="25"/><text x="95.4035%" y="191.50"></text></g><g><title>_platform_memset (7 samples, 0.11%)</title><rect x="95.4244%" y="165" width="0.1054%" height="15" fill="rgb(248,116,28)" fg:x="6340" fg:w="7"/><text x="95.6744%" y="175.50"></text></g><g><title>_platform_memset (1 samples, 0.02%)</title><rect x="95.5298%" y="181" width="0.0151%" height="15" fill="rgb(219,72,43)" fg:x="6347" fg:w="1"/><text x="95.7798%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5 samples, 0.08%)</title><rect x="95.5449%" y="181" width="0.0753%" height="15" fill="rgb(209,138,14)" fg:x="6348" fg:w="5"/><text x="95.7949%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (60 samples, 0.90%)</title><rect x="94.7321%" y="229" width="0.9031%" height="15" fill="rgb(222,18,33)" fg:x="6294" fg:w="60"/><text x="94.9821%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (51 samples, 0.77%)</title><rect x="94.8675%" y="213" width="0.7676%" height="15" fill="rgb(213,199,7)" fg:x="6303" fg:w="51"/><text x="95.1175%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.75%)</title><rect x="94.8826%" y="197" width="0.7526%" height="15" fill="rgb(250,110,10)" fg:x="6304" fg:w="50"/><text x="95.1326%" y="207.50"></text></g><g><title>free (1 samples, 0.02%)</title><rect x="95.6201%" y="181" width="0.0151%" height="15" fill="rgb(248,123,6)" fg:x="6353" fg:w="1"/><text x="95.8701%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="95.7255%" y="213" width="0.0301%" height="15" fill="rgb(206,91,31)" fg:x="6360" fg:w="2"/><text x="95.9755%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="95.7857%" y="197" width="0.0151%" height="15" fill="rgb(211,154,13)" fg:x="6364" fg:w="1"/><text x="96.0357%" y="207.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.03%)</title><rect x="95.8007%" y="197" width="0.0301%" height="15" fill="rgb(225,148,7)" fg:x="6365" fg:w="2"/><text x="96.0507%" y="207.50"></text></g><g><title>_free (3 samples, 0.05%)</title><rect x="95.8308%" y="197" width="0.0452%" height="15" fill="rgb(220,160,43)" fg:x="6367" fg:w="3"/><text x="96.0808%" y="207.50"></text></g><g><title>_nanov2_free (13 samples, 0.20%)</title><rect x="95.8760%" y="197" width="0.1957%" height="15" fill="rgb(213,52,39)" fg:x="6370" fg:w="13"/><text x="96.1260%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (33 samples, 0.50%)</title><rect x="95.6352%" y="229" width="0.4967%" height="15" fill="rgb(243,137,7)" fg:x="6354" fg:w="33"/><text x="95.8852%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (25 samples, 0.38%)</title><rect x="95.7556%" y="213" width="0.3763%" height="15" fill="rgb(230,79,13)" fg:x="6362" fg:w="25"/><text x="96.0056%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4 samples, 0.06%)</title><rect x="96.0716%" y="197" width="0.0602%" height="15" fill="rgb(247,105,23)" fg:x="6383" fg:w="4"/><text x="96.3216%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (11 samples, 0.17%)</title><rect x="96.1318%" y="229" width="0.1656%" height="15" fill="rgb(223,179,41)" fg:x="6387" fg:w="11"/><text x="96.3818%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.05%)</title><rect x="96.2523%" y="213" width="0.0452%" height="15" fill="rgb(218,9,34)" fg:x="6395" fg:w="3"/><text x="96.5023%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="96.2673%" y="197" width="0.0301%" height="15" fill="rgb(222,106,8)" fg:x="6396" fg:w="2"/><text x="96.5173%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (4 samples, 0.06%)</title><rect x="96.2974%" y="229" width="0.0602%" height="15" fill="rgb(211,220,0)" fg:x="6398" fg:w="4"/><text x="96.5474%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (4 samples, 0.06%)</title><rect x="96.3576%" y="229" width="0.0602%" height="15" fill="rgb(229,52,16)" fg:x="6402" fg:w="4"/><text x="96.6076%" y="239.50"></text></g><g><title>bitbeat::handle_spawn (3,569 samples, 53.72%)</title><rect x="42.7754%" y="245" width="53.7176%" height="15" fill="rgb(212,155,18)" fg:x="2842" fg:w="3569"/><text x="43.0254%" y="255.50">bitbeat::handle_spawn</text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (5 samples, 0.08%)</title><rect x="96.4178%" y="229" width="0.0753%" height="15" fill="rgb(242,21,14)" fg:x="6406" fg:w="5"/><text x="96.6678%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.08%)</title><rect x="96.4178%" y="213" width="0.0753%" height="15" fill="rgb(222,19,48)" fg:x="6406" fg:w="5"/><text x="96.6678%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.08%)</title><rect x="97.2155%" y="229" width="0.0753%" height="15" fill="rgb(232,45,27)" fg:x="6459" fg:w="5"/><text x="97.4655%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.20%)</title><rect x="97.5015%" y="213" width="0.1957%" height="15" fill="rgb(249,103,42)" fg:x="6478" fg:w="13"/><text x="97.7515%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (41 samples, 0.62%)</title><rect x="97.2908%" y="229" width="0.6171%" height="15" fill="rgb(246,81,33)" fg:x="6464" fg:w="41"/><text x="97.5408%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (14 samples, 0.21%)</title><rect x="97.6972%" y="213" width="0.2107%" height="15" fill="rgb(252,33,42)" fg:x="6491" fg:w="14"/><text x="97.9472%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="97.9079%" y="229" width="0.0151%" height="15" fill="rgb(209,212,41)" fg:x="6505" fg:w="1"/><text x="98.1579%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (3 samples, 0.05%)</title><rect x="97.9229%" y="229" width="0.0452%" height="15" fill="rgb(207,154,6)" fg:x="6506" fg:w="3"/><text x="98.1729%" y="239.50"></text></g><g><title>bitbeat::handle_sub (99 samples, 1.49%)</title><rect x="96.4931%" y="245" width="1.4901%" height="15" fill="rgb(223,64,47)" fg:x="6411" fg:w="99"/><text x="96.7431%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.02%)</title><rect x="97.9681%" y="229" width="0.0151%" height="15" fill="rgb(211,161,38)" fg:x="6509" fg:w="1"/><text x="98.2181%" y="239.50"></text></g><g><title>bitbeat::Process::step (5,547 samples, 83.49%)</title><rect x="14.5093%" y="261" width="83.4889%" height="15" fill="rgb(219,138,40)" fg:x="964" fg:w="5547"/><text x="14.7593%" y="271.50">bitbeat::Process::step</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.02%)</title><rect x="97.9831%" y="245" width="0.0151%" height="15" fill="rgb(241,228,46)" fg:x="6510" fg:w="1"/><text x="98.2331%" y="255.50"></text></g><g><title>bitbeat::handle_cmp_le (2 samples, 0.03%)</title><rect x="97.9982%" y="261" width="0.0301%" height="15" fill="rgb(223,209,38)" fg:x="6511" fg:w="2"/><text x="98.2482%" y="271.50"></text></g><g><title>bitbeat::handle_jump_if (1 samples, 0.02%)</title><rect x="98.0283%" y="261" width="0.0151%" height="15" fill="rgb(236,164,45)" fg:x="6513" fg:w="1"/><text x="98.2783%" y="271.50"></text></g><g><title>bitbeat::handle_load_imm (4 samples, 0.06%)</title><rect x="98.0433%" y="261" width="0.0602%" height="15" fill="rgb(231,15,5)" fg:x="6514" fg:w="4"/><text x="98.2933%" y="271.50"></text></g><g><title>bitbeat::handle_recv (1 samples, 0.02%)</title><rect x="98.1036%" y="261" width="0.0151%" height="15" fill="rgb(252,35,15)" fg:x="6518" fg:w="1"/><text x="98.3536%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (39 samples, 0.59%)</title><rect x="98.1186%" y="261" width="0.5870%" height="15" fill="rgb(248,181,18)" fg:x="6519" fg:w="39"/><text x="98.3686%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (27 samples, 0.41%)</title><rect x="98.2992%" y="245" width="0.4064%" height="15" fill="rgb(233,39,42)" fg:x="6531" fg:w="27"/><text x="98.5492%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (3 samples, 0.05%)</title><rect x="98.6604%" y="229" width="0.0452%" height="15" fill="rgb(238,110,33)" fg:x="6555" fg:w="3"/><text x="98.9104%" y="239.50"></text></g><g><title>core::cmp::PartialEq::ne (49 samples, 0.74%)</title><rect x="98.7056%" y="261" width="0.7375%" height="15" fill="rgb(233,195,10)" fg:x="6558" fg:w="49"/><text x="98.9556%" y="271.50"></text></g><g><title>&lt;bitbeat::ProcessState as core::cmp::PartialEq&gt;::eq (35 samples, 0.53%)</title><rect x="98.9163%" y="245" width="0.5268%" height="15" fill="rgb(254,105,3)" fg:x="6572" fg:w="35"/><text x="99.1663%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (18 samples, 0.27%)</title><rect x="99.4431%" y="261" width="0.2709%" height="15" fill="rgb(221,225,9)" fg:x="6607" fg:w="18"/><text x="99.6931%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.15%)</title><rect x="99.5635%" y="245" width="0.1505%" height="15" fill="rgb(224,227,45)" fg:x="6615" fg:w="10"/><text x="99.8135%" y="255.50"></text></g><g><title>bitbeat::Machine::run (6,633 samples, 99.83%)</title><rect x="0.0753%" y="277" width="99.8344%" height="15" fill="rgb(229,198,43)" fg:x="5" fg:w="6633"/><text x="0.3253%" y="287.50">bitbeat::Machine::run</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (13 samples, 0.20%)</title><rect x="99.7140%" y="261" width="0.1957%" height="15" fill="rgb(206,209,35)" fg:x="6625" fg:w="13"/><text x="99.9640%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (8 samples, 0.12%)</title><rect x="99.7893%" y="245" width="0.1204%" height="15" fill="rgb(245,195,53)" fg:x="6630" fg:w="8"/><text x="100.0393%" y="255.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="99.8796%" y="229" width="0.0301%" height="15" fill="rgb(240,92,26)" fg:x="6636" fg:w="2"/><text x="100.1296%" y="239.50"></text></g><g><title>all (6,644 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(207,40,23)" fg:x="0" fg:w="6644"/><text x="0.2500%" y="431.50"></text></g><g><title>start (6,643 samples, 99.98%)</title><rect x="0.0151%" y="405" width="99.9849%" height="15" fill="rgb(223,111,35)" fg:x="1" fg:w="6643"/><text x="0.2651%" y="415.50">start</text></g><g><title>main (6,639 samples, 99.92%)</title><rect x="0.0753%" y="389" width="99.9247%" height="15" fill="rgb(229,147,28)" fg:x="5" fg:w="6639"/><text x="0.3253%" y="399.50">main</text></g><g><title>std::rt::lang_start (6,639 samples, 99.92%)</title><rect x="0.0753%" y="373" width="99.9247%" height="15" fill="rgb(211,29,28)" fg:x="5" fg:w="6639"/><text x="0.3253%" y="383.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (6,639 samples, 99.92%)</title><rect x="0.0753%" y="357" width="99.9247%" height="15" fill="rgb(228,72,33)" fg:x="5" fg:w="6639"/><text x="0.3253%" y="367.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (6,639 samples, 99.92%)</title><rect x="0.0753%" y="341" width="99.9247%" height="15" fill="rgb(205,214,31)" fg:x="5" fg:w="6639"/><text x="0.3253%" y="351.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (6,639 samples, 99.92%)</title><rect x="0.0753%" y="325" width="99.9247%" height="15" fill="rgb(224,111,15)" fg:x="5" fg:w="6639"/><text x="0.3253%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (6,639 samples, 99.92%)</title><rect x="0.0753%" y="309" width="99.9247%" height="15" fill="rgb(253,21,26)" fg:x="5" fg:w="6639"/><text x="0.3253%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>bitbeat::_fib (6,639 samples, 99.92%)</title><rect x="0.0753%" y="293" width="99.9247%" height="15" fill="rgb(245,139,43)" fg:x="5" fg:w="6639"/><text x="0.3253%" y="303.50">bitbeat::_fib</text></g><g><title>core::cmp::PartialEq::ne (6 samples, 0.09%)</title><rect x="99.9097%" y="277" width="0.0903%" height="15" fill="rgb(252,170,7)" fg:x="6638" fg:w="6"/><text x="100.1597%" y="287.50"></text></g></svg></svg>