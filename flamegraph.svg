<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="8729"><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (1 samples, 0.01%)</title><rect x="0.0000%" y="501" width="0.0115%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (1 samples, 0.01%)</title><rect x="0.0000%" y="485" width="0.0115%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>dyld4::RuntimeState::notifyDtrace(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="469" width="0.0115%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>dyld3::MachOFile::forEachDOFSection(Diagnostics&amp;, void (unsigned int) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0115%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SegmentInfo const&amp;, mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0000%" y="437" width="0.0115%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0000%" y="421" width="0.0115%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>&lt;bitbeat::Machine as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="0.0115%" y="389" width="0.0115%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2615%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.01%)</title><rect x="0.0115%" y="373" width="0.0115%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2615%" y="383.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.01%)</title><rect x="0.0115%" y="357" width="0.0115%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2615%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.01%)</title><rect x="0.0115%" y="341" width="0.0115%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2615%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.01%)</title><rect x="0.0115%" y="325" width="0.0115%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2615%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.01%)</title><rect x="0.0115%" y="309" width="0.0115%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2615%" y="319.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::_{{constant}}::_{{closure}} (1 samples, 0.01%)</title><rect x="0.0115%" y="293" width="0.0115%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2615%" y="303.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (1 samples, 0.01%)</title><rect x="0.0115%" y="277" width="0.0115%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2615%" y="287.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::initialize (1 samples, 0.01%)</title><rect x="0.0115%" y="261" width="0.0115%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.2615%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="0.7217%" y="373" width="0.0229%" height="15" fill="rgb(231,73,38)" fg:x="63" fg:w="2"/><text x="0.9717%" y="383.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="0.7446%" y="373" width="0.0229%" height="15" fill="rgb(225,20,46)" fg:x="65" fg:w="2"/><text x="0.9946%" y="383.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="0.7676%" y="373" width="0.0344%" height="15" fill="rgb(210,31,41)" fg:x="67" fg:w="3"/><text x="1.0176%" y="383.50"></text></g><g><title>_platform_memmove (20 samples, 0.23%)</title><rect x="0.8019%" y="373" width="0.2291%" height="15" fill="rgb(221,200,47)" fg:x="70" fg:w="20"/><text x="1.0519%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (75 samples, 0.86%)</title><rect x="1.0310%" y="373" width="0.8592%" height="15" fill="rgb(226,26,5)" fg:x="90" fg:w="75"/><text x="1.2810%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (34 samples, 0.39%)</title><rect x="1.8903%" y="373" width="0.3895%" height="15" fill="rgb(249,33,26)" fg:x="165" fg:w="34"/><text x="2.1403%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (18 samples, 0.21%)</title><rect x="2.0735%" y="357" width="0.2062%" height="15" fill="rgb(235,183,28)" fg:x="181" fg:w="18"/><text x="2.3235%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="2.2339%" y="341" width="0.0458%" height="15" fill="rgb(221,5,38)" fg:x="195" fg:w="4"/><text x="2.4839%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="2.5547%" y="341" width="0.0229%" height="15" fill="rgb(247,18,42)" fg:x="223" fg:w="2"/><text x="2.8047%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (4 samples, 0.05%)</title><rect x="2.6807%" y="325" width="0.0458%" height="15" fill="rgb(241,131,45)" fg:x="234" fg:w="4"/><text x="2.9307%" y="335.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (45 samples, 0.52%)</title><rect x="2.2798%" y="373" width="0.5155%" height="15" fill="rgb(249,31,29)" fg:x="199" fg:w="45"/><text x="2.5298%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 0.39%)</title><rect x="2.4058%" y="357" width="0.3895%" height="15" fill="rgb(225,111,53)" fg:x="210" fg:w="34"/><text x="2.6558%" y="367.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (19 samples, 0.22%)</title><rect x="2.5776%" y="341" width="0.2177%" height="15" fill="rgb(238,160,17)" fg:x="225" fg:w="19"/><text x="2.8276%" y="351.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (6 samples, 0.07%)</title><rect x="2.7265%" y="325" width="0.0687%" height="15" fill="rgb(214,148,48)" fg:x="238" fg:w="6"/><text x="2.9765%" y="335.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.05%)</title><rect x="4.0440%" y="261" width="0.0458%" height="15" fill="rgb(232,36,49)" fg:x="353" fg:w="4"/><text x="4.2940%" y="271.50"></text></g><g><title>_free (3 samples, 0.03%)</title><rect x="4.0898%" y="261" width="0.0344%" height="15" fill="rgb(209,103,24)" fg:x="357" fg:w="3"/><text x="4.3398%" y="271.50"></text></g><g><title>_nanov2_free (1 samples, 0.01%)</title><rect x="4.1242%" y="261" width="0.0115%" height="15" fill="rgb(229,88,8)" fg:x="360" fg:w="1"/><text x="4.3742%" y="271.50"></text></g><g><title>_szone_free (4 samples, 0.05%)</title><rect x="4.1356%" y="261" width="0.0458%" height="15" fill="rgb(213,181,19)" fg:x="361" fg:w="4"/><text x="4.3856%" y="271.50"></text></g><g><title>_platform_memset (2 samples, 0.02%)</title><rect x="4.3304%" y="245" width="0.0229%" height="15" fill="rgb(254,191,54)" fg:x="378" fg:w="2"/><text x="4.5804%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (73 samples, 0.84%)</title><rect x="3.8722%" y="277" width="0.8363%" height="15" fill="rgb(241,83,37)" fg:x="338" fg:w="73"/><text x="4.1222%" y="287.50"></text></g><g><title>free_tiny (46 samples, 0.53%)</title><rect x="4.1815%" y="261" width="0.5270%" height="15" fill="rgb(233,36,39)" fg:x="365" fg:w="46"/><text x="4.4315%" y="271.50"></text></g><g><title>tiny_free_no_lock (31 samples, 0.36%)</title><rect x="4.3533%" y="245" width="0.3551%" height="15" fill="rgb(226,3,54)" fg:x="380" fg:w="31"/><text x="4.6033%" y="255.50"></text></g><g><title>get_tiny_previous_free_msize (5 samples, 0.06%)</title><rect x="4.6512%" y="229" width="0.0573%" height="15" fill="rgb(245,192,40)" fg:x="406" fg:w="5"/><text x="4.9012%" y="239.50"></text></g><g><title>_free (1 samples, 0.01%)</title><rect x="4.7084%" y="277" width="0.0115%" height="15" fill="rgb(238,167,29)" fg:x="411" fg:w="1"/><text x="4.9584%" y="287.50"></text></g><g><title>_szone_free (2 samples, 0.02%)</title><rect x="4.7199%" y="277" width="0.0229%" height="15" fill="rgb(232,182,51)" fg:x="412" fg:w="2"/><text x="4.9699%" y="287.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (77 samples, 0.88%)</title><rect x="3.8722%" y="293" width="0.8821%" height="15" fill="rgb(231,60,39)" fg:x="338" fg:w="77"/><text x="4.1222%" y="303.50"></text></g><g><title>free_tiny (1 samples, 0.01%)</title><rect x="4.7428%" y="277" width="0.0115%" height="15" fill="rgb(208,69,12)" fg:x="414" fg:w="1"/><text x="4.9928%" y="287.50"></text></g><g><title>alloc::rc::RcInnerPtr::weak (2 samples, 0.02%)</title><rect x="4.7543%" y="293" width="0.0229%" height="15" fill="rgb(235,93,37)" fg:x="415" fg:w="2"/><text x="5.0043%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;core::cell::RefCell&lt;bitbeat::Process&gt;,&amp;alloc::alloc::Global&gt;&gt; (137 samples, 1.57%)</title><rect x="3.2764%" y="325" width="1.5695%" height="15" fill="rgb(213,116,39)" fg:x="286" fg:w="137"/><text x="3.5264%" y="335.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 1.52%)</title><rect x="3.3223%" y="309" width="1.5237%" height="15" fill="rgb(222,207,29)" fg:x="290" fg:w="133"/><text x="3.5723%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (6 samples, 0.07%)</title><rect x="4.7772%" y="293" width="0.0687%" height="15" fill="rgb(206,96,30)" fg:x="417" fg:w="6"/><text x="5.0272%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (3 samples, 0.03%)</title><rect x="4.8115%" y="277" width="0.0344%" height="15" fill="rgb(218,138,4)" fg:x="420" fg:w="3"/><text x="5.0615%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::end_bound (1 samples, 0.01%)</title><rect x="5.3500%" y="213" width="0.0115%" height="15" fill="rgb(250,191,14)" fg:x="467" fg:w="1"/><text x="5.6000%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (39 samples, 0.45%)</title><rect x="5.2011%" y="245" width="0.4468%" height="15" fill="rgb(239,60,40)" fg:x="454" fg:w="39"/><text x="5.4511%" y="255.50"></text></g><g><title>core::slice::index::range (37 samples, 0.42%)</title><rect x="5.2240%" y="229" width="0.4239%" height="15" fill="rgb(206,27,48)" fg:x="456" fg:w="37"/><text x="5.4740%" y="239.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::start_bound (25 samples, 0.29%)</title><rect x="5.3614%" y="213" width="0.2864%" height="15" fill="rgb(225,35,8)" fg:x="468" fg:w="25"/><text x="5.6114%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;i64&gt;&gt; (2 samples, 0.02%)</title><rect x="5.6478%" y="245" width="0.0229%" height="15" fill="rgb(250,213,24)" fg:x="493" fg:w="2"/><text x="5.8978%" y="255.50"></text></g><g><title>&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="5.6593%" y="229" width="0.0115%" height="15" fill="rgb(247,123,22)" fg:x="494" fg:w="1"/><text x="5.9093%" y="239.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.66%)</title><rect x="5.0178%" y="261" width="0.6645%" height="15" fill="rgb(231,138,38)" fg:x="438" fg:w="58"/><text x="5.2678%" y="271.50"></text></g><g><title>core::slice::index::range (1 samples, 0.01%)</title><rect x="5.6708%" y="245" width="0.0115%" height="15" fill="rgb(231,145,46)" fg:x="495" fg:w="1"/><text x="5.9208%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (1 samples, 0.01%)</title><rect x="5.6822%" y="261" width="0.0115%" height="15" fill="rgb(251,118,11)" fg:x="496" fg:w="1"/><text x="5.9322%" y="271.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="5.7509%" y="229" width="0.0115%" height="15" fill="rgb(217,147,25)" fg:x="502" fg:w="1"/><text x="6.0009%" y="239.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="5.7624%" y="229" width="0.0229%" height="15" fill="rgb(247,81,37)" fg:x="503" fg:w="2"/><text x="6.0124%" y="239.50"></text></g><g><title>_free (5 samples, 0.06%)</title><rect x="5.7853%" y="229" width="0.0573%" height="15" fill="rgb(209,12,38)" fg:x="505" fg:w="5"/><text x="6.0353%" y="239.50"></text></g><g><title>_nanov2_free (9 samples, 0.10%)</title><rect x="5.8426%" y="229" width="0.1031%" height="15" fill="rgb(227,1,9)" fg:x="510" fg:w="9"/><text x="6.0926%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.32%)</title><rect x="5.7395%" y="245" width="0.3208%" height="15" fill="rgb(248,47,43)" fg:x="501" fg:w="28"/><text x="5.9895%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (10 samples, 0.11%)</title><rect x="5.9457%" y="229" width="0.1146%" height="15" fill="rgb(221,10,30)" fg:x="519" fg:w="10"/><text x="6.1957%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;i64&gt;&gt; (94 samples, 1.08%)</title><rect x="4.9948%" y="277" width="1.0769%" height="15" fill="rgb(210,229,1)" fg:x="436" fg:w="94"/><text x="5.2448%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (33 samples, 0.38%)</title><rect x="5.6937%" y="261" width="0.3781%" height="15" fill="rgb(222,148,37)" fg:x="497" fg:w="33"/><text x="5.9437%" y="271.50"></text></g><g><title>_nanov2_free (1 samples, 0.01%)</title><rect x="6.0603%" y="245" width="0.0115%" height="15" fill="rgb(234,67,33)" fg:x="529" fg:w="1"/><text x="6.3103%" y="255.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (287 samples, 3.29%)</title><rect x="3.2306%" y="341" width="3.2879%" height="15" fill="rgb(247,98,35)" fg:x="282" fg:w="287"/><text x="3.4806%" y="351.50">all..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt; (146 samples, 1.67%)</title><rect x="4.8459%" y="325" width="1.6726%" height="15" fill="rgb(247,138,52)" fg:x="423" fg:w="146"/><text x="5.0959%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;bitbeat::Process&gt;&gt; (145 samples, 1.66%)</title><rect x="4.8574%" y="309" width="1.6611%" height="15" fill="rgb(213,79,30)" fg:x="424" fg:w="145"/><text x="5.1074%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitbeat::Process&gt; (141 samples, 1.62%)</title><rect x="4.9032%" y="293" width="1.6153%" height="15" fill="rgb(246,177,23)" fg:x="428" fg:w="141"/><text x="5.1532%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitbeat::Function&gt;&gt; (39 samples, 0.45%)</title><rect x="6.0717%" y="277" width="0.4468%" height="15" fill="rgb(230,62,27)" fg:x="530" fg:w="39"/><text x="6.3217%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.42%)</title><rect x="6.0946%" y="261" width="0.4239%" height="15" fill="rgb(216,154,8)" fg:x="532" fg:w="37"/><text x="6.3446%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (327 samples, 3.75%)</title><rect x="2.7953%" y="373" width="3.7461%" height="15" fill="rgb(244,35,45)" fg:x="244" fg:w="327"/><text x="3.0453%" y="383.50">core..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 samples, 3.70%)</title><rect x="2.8411%" y="357" width="3.7003%" height="15" fill="rgb(251,115,12)" fg:x="248" fg:w="323"/><text x="3.0911%" y="367.50">&lt;all..</text></g><g><title>alloc::rc::RcInnerPtr::strong (2 samples, 0.02%)</title><rect x="6.5185%" y="341" width="0.0229%" height="15" fill="rgb(240,54,50)" fg:x="569" fg:w="2"/><text x="6.7685%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (26 samples, 0.30%)</title><rect x="6.5414%" y="373" width="0.2979%" height="15" fill="rgb(233,84,52)" fg:x="571" fg:w="26"/><text x="6.7914%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (5 samples, 0.06%)</title><rect x="6.7820%" y="357" width="0.0573%" height="15" fill="rgb(207,117,47)" fg:x="592" fg:w="5"/><text x="7.0320%" y="367.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="6.8278%" y="341" width="0.0115%" height="15" fill="rgb(249,43,39)" fg:x="596" fg:w="1"/><text x="7.0778%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (18 samples, 0.21%)</title><rect x="6.8393%" y="373" width="0.2062%" height="15" fill="rgb(209,38,44)" fg:x="597" fg:w="18"/><text x="7.0893%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (17 samples, 0.19%)</title><rect x="6.8507%" y="357" width="0.1948%" height="15" fill="rgb(236,212,23)" fg:x="598" fg:w="17"/><text x="7.1007%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.18%)</title><rect x="6.8622%" y="341" width="0.1833%" height="15" fill="rgb(242,79,21)" fg:x="599" fg:w="16"/><text x="7.1122%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (3 samples, 0.03%)</title><rect x="7.0111%" y="325" width="0.0344%" height="15" fill="rgb(211,96,35)" fg:x="612" fg:w="3"/><text x="7.2611%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send&gt;&gt;&gt; (7 samples, 0.08%)</title><rect x="7.0455%" y="373" width="0.0802%" height="15" fill="rgb(253,215,40)" fg:x="615" fg:w="7"/><text x="7.2955%" y="383.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.06%)</title><rect x="7.6527%" y="341" width="0.0573%" height="15" fill="rgb(211,81,21)" fg:x="668" fg:w="5"/><text x="7.9027%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (75 samples, 0.86%)</title><rect x="7.9849%" y="293" width="0.8592%" height="15" fill="rgb(208,190,38)" fg:x="697" fg:w="75"/><text x="8.2349%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (281 samples, 3.22%)</title><rect x="7.8359%" y="325" width="3.2192%" height="15" fill="rgb(235,213,38)" fg:x="684" fg:w="281"/><text x="8.0859%" y="335.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (280 samples, 3.21%)</title><rect x="7.8474%" y="309" width="3.2077%" height="15" fill="rgb(237,122,38)" fg:x="685" fg:w="280"/><text x="8.0974%" y="319.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (193 samples, 2.21%)</title><rect x="8.8441%" y="293" width="2.2110%" height="15" fill="rgb(244,218,35)" fg:x="772" fg:w="193"/><text x="9.0941%" y="303.50">&lt;..</text></g><g><title>DYLD-STUB$$memcpy (9 samples, 0.10%)</title><rect x="11.2842%" y="309" width="0.1031%" height="15" fill="rgb(240,68,47)" fg:x="985" fg:w="9"/><text x="11.5342%" y="319.50"></text></g><g><title>_platform_memmove (14 samples, 0.16%)</title><rect x="11.3873%" y="309" width="0.1604%" height="15" fill="rgb(210,16,53)" fg:x="994" fg:w="14"/><text x="11.6373%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (54 samples, 0.62%)</title><rect x="11.0551%" y="325" width="0.6186%" height="15" fill="rgb(235,124,12)" fg:x="965" fg:w="54"/><text x="11.3051%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11 samples, 0.13%)</title><rect x="11.5477%" y="309" width="0.1260%" height="15" fill="rgb(224,169,11)" fg:x="1008" fg:w="11"/><text x="11.7977%" y="319.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="11.6737%" y="325" width="0.0115%" height="15" fill="rgb(250,166,2)" fg:x="1019" fg:w="1"/><text x="11.9237%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (47 samples, 0.54%)</title><rect x="12.5902%" y="245" width="0.5384%" height="15" fill="rgb(242,216,29)" fg:x="1099" fg:w="47"/><text x="12.8402%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (23 samples, 0.26%)</title><rect x="13.1287%" y="245" width="0.2635%" height="15" fill="rgb(230,116,27)" fg:x="1146" fg:w="23"/><text x="13.3787%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (572 samples, 6.55%)</title><rect x="7.7099%" y="341" width="6.5529%" height="15" fill="rgb(228,99,48)" fg:x="673" fg:w="572"/><text x="7.9599%" y="351.50">core::has..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (225 samples, 2.58%)</title><rect x="11.6852%" y="325" width="2.5776%" height="15" fill="rgb(253,11,6)" fg:x="1020" fg:w="225"/><text x="11.9352%" y="335.50">co..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (220 samples, 2.52%)</title><rect x="11.7425%" y="309" width="2.5203%" height="15" fill="rgb(247,143,39)" fg:x="1025" fg:w="220"/><text x="11.9925%" y="319.50">co..</text></g><g><title>core::hash::Hasher::write_usize (217 samples, 2.49%)</title><rect x="11.7768%" y="293" width="2.4860%" height="15" fill="rgb(236,97,10)" fg:x="1028" fg:w="217"/><text x="12.0268%" y="303.50">co..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (211 samples, 2.42%)</title><rect x="11.8456%" y="277" width="2.4172%" height="15" fill="rgb(233,208,19)" fg:x="1034" fg:w="211"/><text x="12.0956%" y="287.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (206 samples, 2.36%)</title><rect x="11.9029%" y="261" width="2.3599%" height="15" fill="rgb(216,164,2)" fg:x="1039" fg:w="206"/><text x="12.1529%" y="271.50">&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (76 samples, 0.87%)</title><rect x="13.3921%" y="245" width="0.8707%" height="15" fill="rgb(220,129,5)" fg:x="1169" fg:w="76"/><text x="13.6421%" y="255.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (21 samples, 0.24%)</title><rect x="14.0222%" y="229" width="0.2406%" height="15" fill="rgb(242,17,10)" fg:x="1224" fg:w="21"/><text x="14.2722%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.01%)</title><rect x="15.9583%" y="309" width="0.0115%" height="15" fill="rgb(242,107,0)" fg:x="1393" fg:w="1"/><text x="16.2083%" y="319.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (131 samples, 1.50%)</title><rect x="15.9010%" y="325" width="1.5007%" height="15" fill="rgb(251,28,31)" fg:x="1388" fg:w="131"/><text x="16.1510%" y="335.50"></text></g><g><title>core::ptr::read_unaligned (125 samples, 1.43%)</title><rect x="15.9698%" y="309" width="1.4320%" height="15" fill="rgb(233,223,10)" fg:x="1394" fg:w="125"/><text x="16.2198%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (107 samples, 1.23%)</title><rect x="16.1760%" y="293" width="1.2258%" height="15" fill="rgb(215,21,27)" fg:x="1412" fg:w="107"/><text x="16.4260%" y="303.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (42 samples, 0.48%)</title><rect x="16.9206%" y="277" width="0.4812%" height="15" fill="rgb(232,23,21)" fg:x="1477" fg:w="42"/><text x="17.1706%" y="287.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vceq_u8 (1 samples, 0.01%)</title><rect x="17.5621%" y="309" width="0.0115%" height="15" fill="rgb(244,5,23)" fg:x="1533" fg:w="1"/><text x="17.8121%" y="319.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (5 samples, 0.06%)</title><rect x="17.5736%" y="309" width="0.0573%" height="15" fill="rgb(226,81,46)" fg:x="1534" fg:w="5"/><text x="17.8236%" y="319.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (24 samples, 0.27%)</title><rect x="17.4018%" y="325" width="0.2749%" height="15" fill="rgb(247,70,30)" fg:x="1519" fg:w="24"/><text x="17.6518%" y="335.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (4 samples, 0.05%)</title><rect x="17.6309%" y="309" width="0.0458%" height="15" fill="rgb(212,68,19)" fg:x="1539" fg:w="4"/><text x="17.8809%" y="319.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (9 samples, 0.10%)</title><rect x="18.1235%" y="277" width="0.1031%" height="15" fill="rgb(240,187,13)" fg:x="1582" fg:w="9"/><text x="18.3735%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (961 samples, 11.01%)</title><rect x="7.2517%" y="357" width="11.0093%" height="15" fill="rgb(223,113,26)" fg:x="633" fg:w="961"/><text x="7.5017%" y="367.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (349 samples, 4.00%)</title><rect x="14.2628%" y="341" width="3.9982%" height="15" fill="rgb(206,192,2)" fg:x="1245" fg:w="349"/><text x="14.5128%" y="351.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (51 samples, 0.58%)</title><rect x="17.6767%" y="325" width="0.5843%" height="15" fill="rgb(241,108,4)" fg:x="1543" fg:w="51"/><text x="17.9267%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (18 samples, 0.21%)</title><rect x="18.0548%" y="309" width="0.2062%" height="15" fill="rgb(247,173,49)" fg:x="1576" fg:w="18"/><text x="18.3048%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (14 samples, 0.16%)</title><rect x="18.1006%" y="293" width="0.1604%" height="15" fill="rgb(224,114,35)" fg:x="1580" fg:w="14"/><text x="18.3506%" y="303.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (3 samples, 0.03%)</title><rect x="18.2266%" y="277" width="0.0344%" height="15" fill="rgb(245,159,27)" fg:x="1591" fg:w="3"/><text x="18.4766%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (977 samples, 11.19%)</title><rect x="7.1257%" y="373" width="11.1926%" height="15" fill="rgb(245,172,44)" fg:x="622" fg:w="977"/><text x="7.3757%" y="383.50">std::collections..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.06%)</title><rect x="18.2610%" y="357" width="0.0573%" height="15" fill="rgb(236,23,11)" fg:x="1594" fg:w="5"/><text x="18.5110%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (44 samples, 0.50%)</title><rect x="18.6161%" y="277" width="0.5041%" height="15" fill="rgb(205,117,38)" fg:x="1625" fg:w="44"/><text x="18.8661%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (160 samples, 1.83%)</title><rect x="18.5245%" y="309" width="1.8330%" height="15" fill="rgb(237,72,25)" fg:x="1617" fg:w="160"/><text x="18.7745%" y="319.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (160 samples, 1.83%)</title><rect x="18.5245%" y="293" width="1.8330%" height="15" fill="rgb(244,70,9)" fg:x="1617" fg:w="160"/><text x="18.7745%" y="303.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (108 samples, 1.24%)</title><rect x="19.1202%" y="277" width="1.2373%" height="15" fill="rgb(217,125,39)" fg:x="1669" fg:w="108"/><text x="19.3702%" y="287.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.05%)</title><rect x="20.5064%" y="293" width="0.0458%" height="15" fill="rgb(235,36,10)" fg:x="1790" fg:w="4"/><text x="20.7564%" y="303.50"></text></g><g><title>_platform_memmove (10 samples, 0.11%)</title><rect x="20.5522%" y="293" width="0.1146%" height="15" fill="rgb(251,123,47)" fg:x="1794" fg:w="10"/><text x="20.8022%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (43 samples, 0.49%)</title><rect x="20.3574%" y="309" width="0.4926%" height="15" fill="rgb(221,13,13)" fg:x="1777" fg:w="43"/><text x="20.6074%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (16 samples, 0.18%)</title><rect x="20.6667%" y="293" width="0.1833%" height="15" fill="rgb(238,131,9)" fg:x="1804" fg:w="16"/><text x="20.9167%" y="303.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="20.8500%" y="309" width="0.0115%" height="15" fill="rgb(211,50,8)" fg:x="1820" fg:w="1"/><text x="21.1000%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (31 samples, 0.36%)</title><rect x="21.2968%" y="229" width="0.3551%" height="15" fill="rgb(245,182,24)" fg:x="1859" fg:w="31"/><text x="21.5468%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (9 samples, 0.10%)</title><rect x="21.6520%" y="229" width="0.1031%" height="15" fill="rgb(242,14,37)" fg:x="1890" fg:w="9"/><text x="21.9020%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (103 samples, 1.18%)</title><rect x="20.9646%" y="245" width="1.1800%" height="15" fill="rgb(246,228,12)" fg:x="1830" fg:w="103"/><text x="21.2146%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (34 samples, 0.39%)</title><rect x="21.7551%" y="229" width="0.3895%" height="15" fill="rgb(213,55,15)" fg:x="1899" fg:w="34"/><text x="22.0051%" y="239.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (8 samples, 0.09%)</title><rect x="22.0529%" y="213" width="0.0916%" height="15" fill="rgb(209,9,3)" fg:x="1925" fg:w="8"/><text x="22.3029%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (323 samples, 3.70%)</title><rect x="18.4672%" y="325" width="3.7003%" height="15" fill="rgb(230,59,30)" fg:x="1612" fg:w="323"/><text x="18.7172%" y="335.50">core..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (114 samples, 1.31%)</title><rect x="20.8615%" y="309" width="1.3060%" height="15" fill="rgb(209,121,21)" fg:x="1821" fg:w="114"/><text x="21.1115%" y="319.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (114 samples, 1.31%)</title><rect x="20.8615%" y="293" width="1.3060%" height="15" fill="rgb(220,109,13)" fg:x="1821" fg:w="114"/><text x="21.1115%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (110 samples, 1.26%)</title><rect x="20.9073%" y="277" width="1.2602%" height="15" fill="rgb(232,18,1)" fg:x="1825" fg:w="110"/><text x="21.1573%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (108 samples, 1.24%)</title><rect x="20.9302%" y="261" width="1.2373%" height="15" fill="rgb(215,41,42)" fg:x="1827" fg:w="108"/><text x="21.1802%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.02%)</title><rect x="22.1446%" y="245" width="0.0229%" height="15" fill="rgb(224,123,36)" fg:x="1933" fg:w="2"/><text x="22.3946%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.03%)</title><rect x="22.9350%" y="277" width="0.0344%" height="15" fill="rgb(240,125,3)" fg:x="2002" fg:w="3"/><text x="23.1850%" y="287.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (53 samples, 0.61%)</title><rect x="22.9350%" y="293" width="0.6072%" height="15" fill="rgb(205,98,50)" fg:x="2002" fg:w="53"/><text x="23.1850%" y="303.50"></text></g><g><title>core::ptr::read_unaligned (50 samples, 0.57%)</title><rect x="22.9694%" y="277" width="0.5728%" height="15" fill="rgb(205,185,37)" fg:x="2005" fg:w="50"/><text x="23.2194%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (43 samples, 0.49%)</title><rect x="23.0496%" y="261" width="0.4926%" height="15" fill="rgb(238,207,15)" fg:x="2012" fg:w="43"/><text x="23.2996%" y="271.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (16 samples, 0.18%)</title><rect x="23.3589%" y="245" width="0.1833%" height="15" fill="rgb(213,199,42)" fg:x="2039" fg:w="16"/><text x="23.6089%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.01%)</title><rect x="23.5995%" y="277" width="0.0115%" height="15" fill="rgb(235,201,11)" fg:x="2060" fg:w="1"/><text x="23.8495%" y="287.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (4 samples, 0.05%)</title><rect x="23.6110%" y="277" width="0.0458%" height="15" fill="rgb(207,46,11)" fg:x="2061" fg:w="4"/><text x="23.8610%" y="287.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (13 samples, 0.15%)</title><rect x="23.5422%" y="293" width="0.1489%" height="15" fill="rgb(241,35,35)" fg:x="2055" fg:w="13"/><text x="23.7922%" y="303.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (3 samples, 0.03%)</title><rect x="23.6568%" y="277" width="0.0344%" height="15" fill="rgb(243,32,47)" fg:x="2065" fg:w="3"/><text x="23.9068%" y="287.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (5 samples, 0.06%)</title><rect x="23.9546%" y="245" width="0.0573%" height="15" fill="rgb(247,202,23)" fg:x="2091" fg:w="5"/><text x="24.2046%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (154 samples, 1.76%)</title><rect x="22.2820%" y="309" width="1.7642%" height="15" fill="rgb(219,102,11)" fg:x="1945" fg:w="154"/><text x="22.5320%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (31 samples, 0.36%)</title><rect x="23.6911%" y="293" width="0.3551%" height="15" fill="rgb(243,110,44)" fg:x="2068" fg:w="31"/><text x="23.9411%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (17 samples, 0.19%)</title><rect x="23.8515%" y="277" width="0.1948%" height="15" fill="rgb(222,74,54)" fg:x="2082" fg:w="17"/><text x="24.1015%" y="287.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (11 samples, 0.13%)</title><rect x="23.9203%" y="261" width="0.1260%" height="15" fill="rgb(216,99,12)" fg:x="2088" fg:w="11"/><text x="24.1703%" y="271.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (3 samples, 0.03%)</title><rect x="24.0119%" y="245" width="0.0344%" height="15" fill="rgb(226,22,26)" fg:x="2096" fg:w="3"/><text x="24.2619%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.02%)</title><rect x="24.9513%" y="245" width="0.0229%" height="15" fill="rgb(217,163,10)" fg:x="2178" fg:w="2"/><text x="25.2013%" y="255.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (114 samples, 1.31%)</title><rect x="24.9399%" y="261" width="1.3060%" height="15" fill="rgb(213,25,53)" fg:x="2177" fg:w="114"/><text x="25.1899%" y="271.50"></text></g><g><title>core::ptr::read_unaligned (111 samples, 1.27%)</title><rect x="24.9742%" y="245" width="1.2716%" height="15" fill="rgb(252,105,26)" fg:x="2180" fg:w="111"/><text x="25.2242%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (86 samples, 0.99%)</title><rect x="25.2606%" y="229" width="0.9852%" height="15" fill="rgb(220,39,43)" fg:x="2205" fg:w="86"/><text x="25.5106%" y="239.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (35 samples, 0.40%)</title><rect x="25.8449%" y="213" width="0.4010%" height="15" fill="rgb(229,68,48)" fg:x="2256" fg:w="35"/><text x="26.0949%" y="223.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vceq_u8 (1 samples, 0.01%)</title><rect x="26.5208%" y="245" width="0.0115%" height="15" fill="rgb(252,8,32)" fg:x="2315" fg:w="1"/><text x="26.7708%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.02%)</title><rect x="26.5322%" y="245" width="0.0229%" height="15" fill="rgb(223,20,43)" fg:x="2316" fg:w="2"/><text x="26.7822%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (9 samples, 0.10%)</title><rect x="26.5552%" y="245" width="0.1031%" height="15" fill="rgb(229,81,49)" fg:x="2318" fg:w="9"/><text x="26.8052%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (730 samples, 8.36%)</title><rect x="18.3182%" y="373" width="8.3629%" height="15" fill="rgb(236,28,36)" fg:x="1599" fg:w="730"/><text x="18.5682%" y="383.50">std::collect..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (726 samples, 8.32%)</title><rect x="18.3641%" y="357" width="8.3171%" height="15" fill="rgb(249,185,26)" fg:x="1603" fg:w="726"/><text x="18.6141%" y="367.50">hashbrown::m..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (721 samples, 8.26%)</title><rect x="18.4214%" y="341" width="8.2598%" height="15" fill="rgb(249,174,33)" fg:x="1608" fg:w="721"/><text x="18.6714%" y="351.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (394 samples, 4.51%)</title><rect x="22.1675%" y="325" width="4.5137%" height="15" fill="rgb(233,201,37)" fg:x="1935" fg:w="394"/><text x="22.4175%" y="335.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (230 samples, 2.63%)</title><rect x="24.0463%" y="309" width="2.6349%" height="15" fill="rgb(221,78,26)" fg:x="2099" fg:w="230"/><text x="24.2963%" y="319.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (211 samples, 2.42%)</title><rect x="24.2639%" y="293" width="2.4172%" height="15" fill="rgb(250,127,30)" fg:x="2118" fg:w="211"/><text x="24.5139%" y="303.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::erase (184 samples, 2.11%)</title><rect x="24.5733%" y="277" width="2.1079%" height="15" fill="rgb(230,49,44)" fg:x="2145" fg:w="184"/><text x="24.8233%" y="287.50">h..</text></g><g><title>hashbrown::control::group::neon::Group::match_tag (38 samples, 0.44%)</title><rect x="26.2458%" y="261" width="0.4353%" height="15" fill="rgb(229,67,23)" fg:x="2291" fg:w="38"/><text x="26.4958%" y="271.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (2 samples, 0.02%)</title><rect x="26.6583%" y="245" width="0.0229%" height="15" fill="rgb(249,83,47)" fg:x="2327" fg:w="2"/><text x="26.9083%" y="255.50"></text></g><g><title>DYLD-STUB$$memcpy (6 samples, 0.07%)</title><rect x="26.8072%" y="357" width="0.0687%" height="15" fill="rgb(215,43,3)" fg:x="2340" fg:w="6"/><text x="27.0572%" y="367.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="26.9218%" y="341" width="0.0115%" height="15" fill="rgb(238,154,13)" fg:x="2350" fg:w="1"/><text x="27.1718%" y="351.50"></text></g><g><title>_platform_memmove (16 samples, 0.18%)</title><rect x="27.0936%" y="309" width="0.1833%" height="15" fill="rgb(219,56,2)" fg:x="2365" fg:w="16"/><text x="27.3436%" y="319.50"></text></g><g><title>bitbeat::Machine::run::_{{closure}} (3 samples, 0.03%)</title><rect x="27.2769%" y="309" width="0.0344%" height="15" fill="rgb(233,0,4)" fg:x="2381" fg:w="3"/><text x="27.5269%" y="319.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (5 samples, 0.06%)</title><rect x="27.3915%" y="293" width="0.0573%" height="15" fill="rgb(235,30,7)" fg:x="2391" fg:w="5"/><text x="27.6415%" y="303.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.11%)</title><rect x="29.3046%" y="277" width="0.1146%" height="15" fill="rgb(250,79,13)" fg:x="2558" fg:w="10"/><text x="29.5546%" y="287.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.05%)</title><rect x="29.4192%" y="277" width="0.0458%" height="15" fill="rgb(211,146,34)" fg:x="2568" fg:w="4"/><text x="29.6692%" y="287.50"></text></g><g><title>_platform_memmove (12 samples, 0.14%)</title><rect x="29.4650%" y="277" width="0.1375%" height="15" fill="rgb(228,22,38)" fg:x="2572" fg:w="12"/><text x="29.7150%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (8 samples, 0.09%)</title><rect x="29.6025%" y="277" width="0.0916%" height="15" fill="rgb(235,168,5)" fg:x="2584" fg:w="8"/><text x="29.8525%" y="287.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="29.7514%" y="261" width="0.0344%" height="15" fill="rgb(221,155,16)" fg:x="2597" fg:w="3"/><text x="30.0014%" y="271.50"></text></g><g><title>_platform_memmove (24 samples, 0.27%)</title><rect x="29.7858%" y="261" width="0.2749%" height="15" fill="rgb(215,215,53)" fg:x="2600" fg:w="24"/><text x="30.0358%" y="271.50"></text></g><g><title>DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="30.2898%" y="213" width="0.0115%" height="15" fill="rgb(223,4,10)" fg:x="2644" fg:w="1"/><text x="30.5398%" y="223.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="30.3013%" y="213" width="0.0229%" height="15" fill="rgb(234,103,6)" fg:x="2645" fg:w="2"/><text x="30.5513%" y="223.50"></text></g><g><title>_malloc_zone_malloc (5 samples, 0.06%)</title><rect x="30.3242%" y="213" width="0.0573%" height="15" fill="rgb(227,97,0)" fg:x="2647" fg:w="5"/><text x="30.5742%" y="223.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (26 samples, 0.30%)</title><rect x="30.3815%" y="213" width="0.2979%" height="15" fill="rgb(234,150,53)" fg:x="2652" fg:w="26"/><text x="30.6315%" y="223.50"></text></g><g><title>tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="30.7481%" y="197" width="0.0229%" height="15" fill="rgb(228,201,54)" fg:x="2684" fg:w="2"/><text x="30.9981%" y="207.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.01%)</title><rect x="30.8970%" y="181" width="0.0115%" height="15" fill="rgb(222,22,37)" fg:x="2697" fg:w="1"/><text x="31.1470%" y="191.50"></text></g><g><title>rack_get_thread_index (2 samples, 0.02%)</title><rect x="30.9085%" y="181" width="0.0229%" height="15" fill="rgb(237,53,32)" fg:x="2698" fg:w="2"/><text x="31.1585%" y="191.50"></text></g><g><title>szone_malloc_should_clear (52 samples, 0.60%)</title><rect x="30.6793%" y="213" width="0.5957%" height="15" fill="rgb(233,25,53)" fg:x="2678" fg:w="52"/><text x="30.9293%" y="223.50"></text></g><g><title>tiny_malloc_should_clear (44 samples, 0.50%)</title><rect x="30.7710%" y="197" width="0.5041%" height="15" fill="rgb(210,40,34)" fg:x="2686" fg:w="44"/><text x="31.0210%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (30 samples, 0.34%)</title><rect x="30.9314%" y="181" width="0.3437%" height="15" fill="rgb(241,220,44)" fg:x="2700" fg:w="30"/><text x="31.1814%" y="191.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.05%)</title><rect x="31.2292%" y="165" width="0.0458%" height="15" fill="rgb(235,28,35)" fg:x="2726" fg:w="4"/><text x="31.4792%" y="175.50"></text></g><g><title>szone_malloc_type_malloc (1 samples, 0.01%)</title><rect x="31.2751%" y="213" width="0.0115%" height="15" fill="rgb(210,56,17)" fg:x="2730" fg:w="1"/><text x="31.5251%" y="223.50"></text></g><g><title>alloc::alloc::alloc (93 samples, 1.07%)</title><rect x="30.2326%" y="229" width="1.0654%" height="15" fill="rgb(224,130,29)" fg:x="2639" fg:w="93"/><text x="30.4826%" y="239.50"></text></g><g><title>tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="31.2865%" y="213" width="0.0115%" height="15" fill="rgb(235,212,8)" fg:x="2731" fg:w="1"/><text x="31.5365%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (101 samples, 1.16%)</title><rect x="30.1524%" y="245" width="1.1571%" height="15" fill="rgb(223,33,50)" fg:x="2632" fg:w="101"/><text x="30.4024%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="31.2980%" y="229" width="0.0115%" height="15" fill="rgb(219,149,13)" fg:x="2732" fg:w="1"/><text x="31.5480%" y="239.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (149 samples, 1.71%)</title><rect x="29.6941%" y="277" width="1.7070%" height="15" fill="rgb(250,156,29)" fg:x="2592" fg:w="149"/><text x="29.9441%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (117 samples, 1.34%)</title><rect x="30.0607%" y="261" width="1.3404%" height="15" fill="rgb(216,193,19)" fg:x="2624" fg:w="117"/><text x="30.3107%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (8 samples, 0.09%)</title><rect x="31.3094%" y="245" width="0.0916%" height="15" fill="rgb(216,135,14)" fg:x="2733" fg:w="8"/><text x="31.5594%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (5 samples, 0.06%)</title><rect x="31.3438%" y="229" width="0.0573%" height="15" fill="rgb(241,47,5)" fg:x="2736" fg:w="5"/><text x="31.5938%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.18%)</title><rect x="33.8298%" y="261" width="0.1833%" height="15" fill="rgb(233,42,35)" fg:x="2953" fg:w="16"/><text x="34.0798%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (35 samples, 0.40%)</title><rect x="34.5973%" y="245" width="0.4010%" height="15" fill="rgb(231,13,6)" fg:x="3020" fg:w="35"/><text x="34.8473%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (177 samples, 2.03%)</title><rect x="34.0131%" y="261" width="2.0277%" height="15" fill="rgb(207,181,40)" fg:x="2969" fg:w="177"/><text x="34.2631%" y="271.50">&lt;..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (91 samples, 1.04%)</title><rect x="34.9983%" y="245" width="1.0425%" height="15" fill="rgb(254,173,49)" fg:x="3055" fg:w="91"/><text x="35.2483%" y="255.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="36.0408%" y="261" width="0.0115%" height="15" fill="rgb(221,1,38)" fg:x="3146" fg:w="1"/><text x="36.2908%" y="271.50"></text></g><g><title>alloc::string::String::from_utf8 (5 samples, 0.06%)</title><rect x="36.0522%" y="261" width="0.0573%" height="15" fill="rgb(206,124,46)" fg:x="3147" fg:w="5"/><text x="36.3022%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (5 samples, 0.06%)</title><rect x="36.1095%" y="261" width="0.0573%" height="15" fill="rgb(249,21,11)" fg:x="3152" fg:w="5"/><text x="36.3595%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.06%)</title><rect x="36.1668%" y="261" width="0.0573%" height="15" fill="rgb(222,201,40)" fg:x="3157" fg:w="5"/><text x="36.4168%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.09%)</title><rect x="36.6021%" y="245" width="0.0916%" height="15" fill="rgb(235,61,29)" fg:x="3195" fg:w="8"/><text x="36.8521%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.06%)</title><rect x="36.7740%" y="229" width="0.0573%" height="15" fill="rgb(219,207,3)" fg:x="3210" fg:w="5"/><text x="37.0240%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (20 samples, 0.23%)</title><rect x="36.6938%" y="245" width="0.2291%" height="15" fill="rgb(222,56,46)" fg:x="3203" fg:w="20"/><text x="36.9438%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (8 samples, 0.09%)</title><rect x="36.8313%" y="229" width="0.0916%" height="15" fill="rgb(239,76,54)" fg:x="3215" fg:w="8"/><text x="37.0813%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.03%)</title><rect x="36.9229%" y="245" width="0.0344%" height="15" fill="rgb(231,124,27)" fg:x="3223" fg:w="3"/><text x="37.1729%" y="255.50"></text></g><g><title>bitbeat::handle_add (69 samples, 0.79%)</title><rect x="36.2241%" y="261" width="0.7905%" height="15" fill="rgb(249,195,6)" fg:x="3162" fg:w="69"/><text x="36.4741%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (5 samples, 0.06%)</title><rect x="36.9573%" y="245" width="0.0573%" height="15" fill="rgb(237,174,47)" fg:x="3226" fg:w="5"/><text x="37.2073%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.06%)</title><rect x="37.7477%" y="245" width="0.0573%" height="15" fill="rgb(206,201,31)" fg:x="3295" fg:w="5"/><text x="37.9977%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.10%)</title><rect x="37.9310%" y="229" width="0.1031%" height="15" fill="rgb(231,57,52)" fg:x="3311" fg:w="9"/><text x="38.1810%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (44 samples, 0.50%)</title><rect x="37.8050%" y="245" width="0.5041%" height="15" fill="rgb(248,177,22)" fg:x="3300" fg:w="44"/><text x="38.0550%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (24 samples, 0.27%)</title><rect x="38.0341%" y="229" width="0.2749%" height="15" fill="rgb(215,211,37)" fg:x="3320" fg:w="24"/><text x="38.2841%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.03%)</title><rect x="38.3091%" y="245" width="0.0344%" height="15" fill="rgb(241,128,51)" fg:x="3344" fg:w="3"/><text x="38.5591%" y="255.50"></text></g><g><title>bitbeat::handle_cmp_le (122 samples, 1.40%)</title><rect x="37.0145%" y="261" width="1.3976%" height="15" fill="rgb(227,165,31)" fg:x="3231" fg:w="122"/><text x="37.2645%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (6 samples, 0.07%)</title><rect x="38.3435%" y="245" width="0.0687%" height="15" fill="rgb(228,167,24)" fg:x="3347" fg:w="6"/><text x="38.5935%" y="255.50"></text></g><g><title>bitbeat::handle_halt (2 samples, 0.02%)</title><rect x="38.4122%" y="261" width="0.0229%" height="15" fill="rgb(228,143,12)" fg:x="3353" fg:w="2"/><text x="38.6622%" y="271.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (26 samples, 0.30%)</title><rect x="39.1454%" y="245" width="0.2979%" height="15" fill="rgb(249,149,8)" fg:x="3417" fg:w="26"/><text x="39.3954%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (19 samples, 0.22%)</title><rect x="39.2256%" y="229" width="0.2177%" height="15" fill="rgb(243,35,44)" fg:x="3424" fg:w="19"/><text x="39.4756%" y="239.50"></text></g><g><title> N]&gt;::try_from (19 samples, 0.22%)</title><rect x="39.2256%" y="213" width="0.2177%" height="15" fill="rgb(246,89,9)" fg:x="3424" fg:w="19"/><text x="39.4756%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="39.4432%" y="245" width="0.0229%" height="15" fill="rgb(233,213,13)" fg:x="3443" fg:w="2"/><text x="39.6932%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.05%)</title><rect x="39.6953%" y="229" width="0.0458%" height="15" fill="rgb(233,141,41)" fg:x="3465" fg:w="4"/><text x="39.9453%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (37 samples, 0.42%)</title><rect x="39.4661%" y="245" width="0.4239%" height="15" fill="rgb(239,167,4)" fg:x="3445" fg:w="37"/><text x="39.7161%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (13 samples, 0.15%)</title><rect x="39.7411%" y="229" width="0.1489%" height="15" fill="rgb(209,217,16)" fg:x="3469" fg:w="13"/><text x="39.9911%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.17%)</title><rect x="39.8900%" y="245" width="0.1718%" height="15" fill="rgb(219,88,35)" fg:x="3482" fg:w="15"/><text x="40.1400%" y="255.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (3 samples, 0.03%)</title><rect x="40.0619%" y="245" width="0.0344%" height="15" fill="rgb(220,193,23)" fg:x="3497" fg:w="3"/><text x="40.3119%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u32,anyhow::Error&gt;&gt; (2 samples, 0.02%)</title><rect x="40.0962%" y="245" width="0.0229%" height="15" fill="rgb(230,90,52)" fg:x="3500" fg:w="2"/><text x="40.3462%" y="255.50"></text></g><g><title>bitbeat::handle_jump_if (150 samples, 1.72%)</title><rect x="38.4351%" y="261" width="1.7184%" height="15" fill="rgb(252,106,19)" fg:x="3355" fg:w="150"/><text x="38.6851%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (3 samples, 0.03%)</title><rect x="40.1191%" y="245" width="0.0344%" height="15" fill="rgb(206,74,20)" fg:x="3502" fg:w="3"/><text x="40.3691%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (34 samples, 0.39%)</title><rect x="41.4480%" y="245" width="0.3895%" height="15" fill="rgb(230,138,44)" fg:x="3618" fg:w="34"/><text x="41.6980%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (31 samples, 0.36%)</title><rect x="41.4824%" y="229" width="0.3551%" height="15" fill="rgb(235,182,43)" fg:x="3621" fg:w="31"/><text x="41.7324%" y="239.50"></text></g><g><title> N]&gt;::try_from (31 samples, 0.36%)</title><rect x="41.4824%" y="213" width="0.3551%" height="15" fill="rgb(242,16,51)" fg:x="3621" fg:w="31"/><text x="41.7324%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.13%)</title><rect x="41.8376%" y="245" width="0.1260%" height="15" fill="rgb(248,9,4)" fg:x="3652" fg:w="11"/><text x="42.0876%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.08%)</title><rect x="42.4218%" y="229" width="0.0802%" height="15" fill="rgb(210,31,22)" fg:x="3703" fg:w="7"/><text x="42.6718%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (74 samples, 0.85%)</title><rect x="41.9636%" y="245" width="0.8477%" height="15" fill="rgb(239,54,39)" fg:x="3663" fg:w="74"/><text x="42.2136%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (27 samples, 0.31%)</title><rect x="42.5020%" y="229" width="0.3093%" height="15" fill="rgb(230,99,41)" fg:x="3710" fg:w="27"/><text x="42.7520%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (21 samples, 0.24%)</title><rect x="42.8113%" y="245" width="0.2406%" height="15" fill="rgb(253,106,12)" fg:x="3737" fg:w="21"/><text x="43.0613%" y="255.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_le_bytes (3 samples, 0.03%)</title><rect x="43.0519%" y="245" width="0.0344%" height="15" fill="rgb(213,46,41)" fg:x="3758" fg:w="3"/><text x="43.3019%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;i64,anyhow::Error&gt;&gt; (4 samples, 0.05%)</title><rect x="43.0863%" y="245" width="0.0458%" height="15" fill="rgb(215,133,35)" fg:x="3761" fg:w="4"/><text x="43.3363%" y="255.50"></text></g><g><title>bitbeat::handle_load_imm (263 samples, 3.01%)</title><rect x="40.1535%" y="261" width="3.0129%" height="15" fill="rgb(213,28,5)" fg:x="3505" fg:w="263"/><text x="40.4035%" y="271.50">bit..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (3 samples, 0.03%)</title><rect x="43.1321%" y="245" width="0.0344%" height="15" fill="rgb(215,77,49)" fg:x="3765" fg:w="3"/><text x="43.3821%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.06%)</title><rect x="43.7163%" y="245" width="0.0573%" height="15" fill="rgb(248,100,22)" fg:x="3816" fg:w="5"/><text x="43.9663%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.09%)</title><rect x="43.8538%" y="229" width="0.0916%" height="15" fill="rgb(208,67,9)" fg:x="3828" fg:w="8"/><text x="44.1038%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (37 samples, 0.42%)</title><rect x="43.7736%" y="245" width="0.4239%" height="15" fill="rgb(219,133,21)" fg:x="3821" fg:w="37"/><text x="44.0236%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (22 samples, 0.25%)</title><rect x="43.9455%" y="229" width="0.2520%" height="15" fill="rgb(246,46,29)" fg:x="3836" fg:w="22"/><text x="44.1955%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (37 samples, 0.42%)</title><rect x="44.1975%" y="245" width="0.4239%" height="15" fill="rgb(246,185,52)" fg:x="3858" fg:w="37"/><text x="44.4475%" y="255.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (2 samples, 0.02%)</title><rect x="44.5985%" y="229" width="0.0229%" height="15" fill="rgb(252,136,11)" fg:x="3893" fg:w="2"/><text x="44.8485%" y="239.50"></text></g><g><title>bitbeat::handle_recv (133 samples, 1.52%)</title><rect x="43.1665%" y="261" width="1.5237%" height="15" fill="rgb(219,138,53)" fg:x="3768" fg:w="133"/><text x="43.4165%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (6 samples, 0.07%)</title><rect x="44.6214%" y="245" width="0.0687%" height="15" fill="rgb(211,51,23)" fg:x="3895" fg:w="6"/><text x="44.8714%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="45.2056%" y="245" width="0.0344%" height="15" fill="rgb(247,221,28)" fg:x="3946" fg:w="3"/><text x="45.4556%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.13%)</title><rect x="45.3889%" y="229" width="0.1260%" height="15" fill="rgb(251,222,45)" fg:x="3962" fg:w="11"/><text x="45.6389%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 0.45%)</title><rect x="45.2400%" y="245" width="0.4468%" height="15" fill="rgb(217,162,53)" fg:x="3949" fg:w="39"/><text x="45.4900%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (15 samples, 0.17%)</title><rect x="45.5150%" y="229" width="0.1718%" height="15" fill="rgb(229,93,14)" fg:x="3973" fg:w="15"/><text x="45.7650%" y="239.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.03%)</title><rect x="45.6868%" y="245" width="0.0344%" height="15" fill="rgb(209,67,49)" fg:x="3988" fg:w="3"/><text x="45.9368%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (3 samples, 0.03%)</title><rect x="46.5002%" y="213" width="0.0344%" height="15" fill="rgb(213,87,29)" fg:x="4059" fg:w="3"/><text x="46.7502%" y="223.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="46.5689%" y="181" width="0.0115%" height="15" fill="rgb(205,151,52)" fg:x="4065" fg:w="1"/><text x="46.8189%" y="191.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.05%)</title><rect x="46.6147%" y="165" width="0.0458%" height="15" fill="rgb(253,215,39)" fg:x="4069" fg:w="4"/><text x="46.8647%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (84 samples, 0.96%)</title><rect x="45.7212%" y="245" width="0.9623%" height="15" fill="rgb(221,220,41)" fg:x="3991" fg:w="84"/><text x="45.9712%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (23 samples, 0.26%)</title><rect x="46.4200%" y="229" width="0.2635%" height="15" fill="rgb(218,133,21)" fg:x="4052" fg:w="23"/><text x="46.6700%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 0.15%)</title><rect x="46.5345%" y="213" width="0.1489%" height="15" fill="rgb(221,193,43)" fg:x="4062" fg:w="13"/><text x="46.7845%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (11 samples, 0.13%)</title><rect x="46.5575%" y="197" width="0.1260%" height="15" fill="rgb(240,128,52)" fg:x="4064" fg:w="11"/><text x="46.8075%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.10%)</title><rect x="46.5804%" y="181" width="0.1031%" height="15" fill="rgb(253,114,12)" fg:x="4066" fg:w="9"/><text x="46.8304%" y="191.50"></text></g><g><title>nanov2_malloc_type (2 samples, 0.02%)</title><rect x="46.6606%" y="165" width="0.0229%" height="15" fill="rgb(215,223,47)" fg:x="4073" fg:w="2"/><text x="46.9106%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="46.6835%" y="245" width="0.0115%" height="15" fill="rgb(248,225,23)" fg:x="4075" fg:w="1"/><text x="46.9335%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (17 samples, 0.19%)</title><rect x="46.6949%" y="245" width="0.1948%" height="15" fill="rgb(250,108,0)" fg:x="4076" fg:w="17"/><text x="46.9449%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (14 samples, 0.16%)</title><rect x="46.7293%" y="229" width="0.1604%" height="15" fill="rgb(228,208,7)" fg:x="4079" fg:w="14"/><text x="46.9793%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="46.8782%" y="213" width="0.0115%" height="15" fill="rgb(244,45,10)" fg:x="4092" fg:w="1"/><text x="47.1282%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (9 samples, 0.10%)</title><rect x="46.8897%" y="245" width="0.1031%" height="15" fill="rgb(207,125,25)" fg:x="4093" fg:w="9"/><text x="47.1397%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.03%)</title><rect x="46.9584%" y="229" width="0.0344%" height="15" fill="rgb(210,195,18)" fg:x="4099" fg:w="3"/><text x="47.2084%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="46.9813%" y="213" width="0.0115%" height="15" fill="rgb(249,80,12)" fg:x="4101" fg:w="1"/><text x="47.2313%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (10 samples, 0.11%)</title><rect x="46.9928%" y="245" width="0.1146%" height="15" fill="rgb(221,65,9)" fg:x="4102" fg:w="10"/><text x="47.2428%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (31 samples, 0.36%)</title><rect x="47.4510%" y="165" width="0.3551%" height="15" fill="rgb(235,49,36)" fg:x="4142" fg:w="31"/><text x="47.7010%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (144 samples, 1.65%)</title><rect x="47.3365%" y="197" width="1.6497%" height="15" fill="rgb(225,32,20)" fg:x="4132" fg:w="144"/><text x="47.5865%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (142 samples, 1.63%)</title><rect x="47.3594%" y="181" width="1.6268%" height="15" fill="rgb(215,141,46)" fg:x="4134" fg:w="142"/><text x="47.6094%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (103 samples, 1.18%)</title><rect x="47.8062%" y="165" width="1.1800%" height="15" fill="rgb(250,160,47)" fg:x="4173" fg:w="103"/><text x="48.0562%" y="175.50"></text></g><g><title>_platform_memmove (3 samples, 0.03%)</title><rect x="49.2153%" y="181" width="0.0344%" height="15" fill="rgb(216,222,40)" fg:x="4296" fg:w="3"/><text x="49.4653%" y="191.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (29 samples, 0.33%)</title><rect x="48.9861%" y="197" width="0.3322%" height="15" fill="rgb(234,217,39)" fg:x="4276" fg:w="29"/><text x="49.2361%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (6 samples, 0.07%)</title><rect x="49.2496%" y="181" width="0.0687%" height="15" fill="rgb(207,178,40)" fg:x="4299" fg:w="6"/><text x="49.4996%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (18 samples, 0.21%)</title><rect x="49.7995%" y="117" width="0.2062%" height="15" fill="rgb(221,136,13)" fg:x="4347" fg:w="18"/><text x="50.0495%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.08%)</title><rect x="50.0057%" y="117" width="0.0802%" height="15" fill="rgb(249,199,10)" fg:x="4365" fg:w="7"/><text x="50.2557%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (280 samples, 3.21%)</title><rect x="47.3250%" y="213" width="3.2077%" height="15" fill="rgb(249,222,13)" fg:x="4131" fg:w="280"/><text x="47.5750%" y="223.50">cor..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (106 samples, 1.21%)</title><rect x="49.3184%" y="197" width="1.2143%" height="15" fill="rgb(244,185,38)" fg:x="4305" fg:w="106"/><text x="49.5684%" y="207.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (101 samples, 1.16%)</title><rect x="49.3756%" y="181" width="1.1571%" height="15" fill="rgb(236,202,9)" fg:x="4310" fg:w="101"/><text x="49.6256%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (101 samples, 1.16%)</title><rect x="49.3756%" y="165" width="1.1571%" height="15" fill="rgb(250,229,37)" fg:x="4310" fg:w="101"/><text x="49.6256%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (99 samples, 1.13%)</title><rect x="49.3986%" y="149" width="1.1342%" height="15" fill="rgb(206,174,23)" fg:x="4312" fg:w="99"/><text x="49.6486%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (95 samples, 1.09%)</title><rect x="49.4444%" y="133" width="1.0883%" height="15" fill="rgb(211,33,43)" fg:x="4316" fg:w="95"/><text x="49.6944%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (39 samples, 0.45%)</title><rect x="50.0859%" y="117" width="0.4468%" height="15" fill="rgb(245,58,50)" fg:x="4372" fg:w="39"/><text x="50.3359%" y="127.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (13 samples, 0.15%)</title><rect x="50.3838%" y="101" width="0.1489%" height="15" fill="rgb(244,68,36)" fg:x="4398" fg:w="13"/><text x="50.6338%" y="111.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (82 samples, 0.94%)</title><rect x="51.1857%" y="197" width="0.9394%" height="15" fill="rgb(232,229,15)" fg:x="4468" fg:w="82"/><text x="51.4357%" y="207.50"></text></g><g><title>core::ptr::read_unaligned (79 samples, 0.91%)</title><rect x="51.2201%" y="181" width="0.9050%" height="15" fill="rgb(254,30,23)" fg:x="4471" fg:w="79"/><text x="51.4701%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (67 samples, 0.77%)</title><rect x="51.3575%" y="165" width="0.7676%" height="15" fill="rgb(235,160,14)" fg:x="4483" fg:w="67"/><text x="51.6075%" y="175.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (22 samples, 0.25%)</title><rect x="51.8731%" y="149" width="0.2520%" height="15" fill="rgb(212,155,44)" fg:x="4528" fg:w="22"/><text x="52.1231%" y="159.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.01%)</title><rect x="52.2397%" y="181" width="0.0115%" height="15" fill="rgb(226,2,50)" fg:x="4560" fg:w="1"/><text x="52.4897%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (4 samples, 0.05%)</title><rect x="52.2511%" y="181" width="0.0458%" height="15" fill="rgb(234,177,6)" fg:x="4561" fg:w="4"/><text x="52.5011%" y="191.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (16 samples, 0.18%)</title><rect x="52.1251%" y="197" width="0.1833%" height="15" fill="rgb(217,24,9)" fg:x="4550" fg:w="16"/><text x="52.3751%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (1 samples, 0.01%)</title><rect x="52.2969%" y="181" width="0.0115%" height="15" fill="rgb(220,13,46)" fg:x="4565" fg:w="1"/><text x="52.5469%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (491 samples, 5.62%)</title><rect x="47.1188%" y="229" width="5.6249%" height="15" fill="rgb(239,221,27)" fg:x="4113" fg:w="491"/><text x="47.3688%" y="239.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (193 samples, 2.21%)</title><rect x="50.5327%" y="213" width="2.2110%" height="15" fill="rgb(222,198,25)" fg:x="4411" fg:w="193"/><text x="50.7827%" y="223.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (38 samples, 0.44%)</title><rect x="52.3084%" y="197" width="0.4353%" height="15" fill="rgb(211,99,13)" fg:x="4566" fg:w="38"/><text x="52.5584%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (15 samples, 0.17%)</title><rect x="52.5719%" y="181" width="0.1718%" height="15" fill="rgb(232,111,31)" fg:x="4589" fg:w="15"/><text x="52.8219%" y="191.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (9 samples, 0.10%)</title><rect x="52.6406%" y="165" width="0.1031%" height="15" fill="rgb(245,82,37)" fg:x="4595" fg:w="9"/><text x="52.8906%" y="175.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (3 samples, 0.03%)</title><rect x="52.7094%" y="149" width="0.0344%" height="15" fill="rgb(227,149,46)" fg:x="4601" fg:w="3"/><text x="52.9594%" y="159.50"></text></g><g><title>bitbeat::handle_send (706 samples, 8.09%)</title><rect x="44.6901%" y="261" width="8.0880%" height="15" fill="rgb(218,36,50)" fg:x="3901" fg:w="706"/><text x="44.9401%" y="271.50">bitbeat::ha..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (495 samples, 5.67%)</title><rect x="47.1073%" y="245" width="5.6708%" height="15" fill="rgb(226,80,48)" fg:x="4112" fg:w="495"/><text x="47.3573%" y="255.50">std::co..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.03%)</title><rect x="52.7437%" y="229" width="0.0344%" height="15" fill="rgb(238,224,15)" fg:x="4604" fg:w="3"/><text x="52.9937%" y="239.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (71 samples, 0.81%)</title><rect x="56.5471%" y="245" width="0.8134%" height="15" fill="rgb(241,136,10)" fg:x="4936" fg:w="71"/><text x="56.7971%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (47 samples, 0.54%)</title><rect x="56.8221%" y="229" width="0.5384%" height="15" fill="rgb(208,32,45)" fg:x="4960" fg:w="47"/><text x="57.0721%" y="239.50"></text></g><g><title> N]&gt;::try_from (47 samples, 0.54%)</title><rect x="56.8221%" y="213" width="0.5384%" height="15" fill="rgb(207,135,9)" fg:x="4960" fg:w="47"/><text x="57.0721%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.31%)</title><rect x="57.3605%" y="245" width="0.3093%" height="15" fill="rgb(206,86,44)" fg:x="5007" fg:w="27"/><text x="57.6105%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.16%)</title><rect x="57.6698%" y="245" width="0.1604%" height="15" fill="rgb(245,177,15)" fg:x="5034" fg:w="14"/><text x="57.9198%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 0.44%)</title><rect x="57.8302%" y="245" width="0.4353%" height="15" fill="rgb(206,64,50)" fg:x="5048" fg:w="38"/><text x="58.0802%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (38 samples, 0.44%)</title><rect x="57.8302%" y="229" width="0.4353%" height="15" fill="rgb(234,36,40)" fg:x="5048" fg:w="38"/><text x="58.0802%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (25 samples, 0.29%)</title><rect x="57.9791%" y="213" width="0.2864%" height="15" fill="rgb(213,64,8)" fg:x="5061" fg:w="25"/><text x="58.2291%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.03%)</title><rect x="59.7548%" y="229" width="0.0344%" height="15" fill="rgb(210,75,36)" fg:x="5216" fg:w="3"/><text x="60.0048%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (212 samples, 2.43%)</title><rect x="58.2656%" y="245" width="2.4287%" height="15" fill="rgb(229,88,21)" fg:x="5086" fg:w="212"/><text x="58.5156%" y="255.50">&lt;a..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (79 samples, 0.91%)</title><rect x="59.7892%" y="229" width="0.9050%" height="15" fill="rgb(252,204,47)" fg:x="5219" fg:w="79"/><text x="60.0392%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (60 samples, 0.69%)</title><rect x="60.6942%" y="245" width="0.6874%" height="15" fill="rgb(208,77,27)" fg:x="5298" fg:w="60"/><text x="60.9442%" y="255.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.05%)</title><rect x="61.3816%" y="245" width="0.0458%" height="15" fill="rgb(221,76,26)" fg:x="5358" fg:w="4"/><text x="61.6316%" y="255.50"></text></g><g><title>_platform_memmove (30 samples, 0.34%)</title><rect x="61.4274%" y="245" width="0.3437%" height="15" fill="rgb(225,139,18)" fg:x="5362" fg:w="30"/><text x="61.6774%" y="255.50"></text></g><g><title>_platform_memset (1 samples, 0.01%)</title><rect x="61.7711%" y="245" width="0.0115%" height="15" fill="rgb(230,137,11)" fg:x="5392" fg:w="1"/><text x="62.0211%" y="255.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="62.2294%" y="213" width="0.0115%" height="15" fill="rgb(212,28,1)" fg:x="5432" fg:w="1"/><text x="62.4794%" y="223.50"></text></g><g><title>_platform_memmove (16 samples, 0.18%)</title><rect x="62.2408%" y="213" width="0.1833%" height="15" fill="rgb(248,164,17)" fg:x="5433" fg:w="16"/><text x="62.4908%" y="223.50"></text></g><g><title>DYLD-STUB$$malloc (6 samples, 0.07%)</title><rect x="64.2342%" y="181" width="0.0687%" height="15" fill="rgb(222,171,42)" fg:x="5607" fg:w="6"/><text x="64.4842%" y="191.50"></text></g><g><title>_malloc_zone_malloc (18 samples, 0.21%)</title><rect x="64.3029%" y="181" width="0.2062%" height="15" fill="rgb(243,84,45)" fg:x="5613" fg:w="18"/><text x="64.5529%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (76 samples, 0.87%)</title><rect x="63.8447%" y="197" width="0.8707%" height="15" fill="rgb(252,49,23)" fg:x="5573" fg:w="76"/><text x="64.0947%" y="207.50"></text></g><g><title>nanov2_malloc_type (18 samples, 0.21%)</title><rect x="64.5091%" y="181" width="0.2062%" height="15" fill="rgb(215,19,7)" fg:x="5631" fg:w="18"/><text x="64.7591%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (204 samples, 2.34%)</title><rect x="62.4241%" y="213" width="2.3370%" height="15" fill="rgb(238,81,41)" fg:x="5449" fg:w="204"/><text x="62.6741%" y="223.50">a..</text></g><g><title>core::hint::assert_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="64.7153%" y="197" width="0.0458%" height="15" fill="rgb(210,199,37)" fg:x="5649" fg:w="4"/><text x="64.9653%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (385 samples, 4.41%)</title><rect x="61.8284%" y="229" width="4.4106%" height="15" fill="rgb(244,192,49)" fg:x="5397" fg:w="385"/><text x="62.0784%" y="239.50">&lt;T as..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (129 samples, 1.48%)</title><rect x="64.7611%" y="213" width="1.4778%" height="15" fill="rgb(226,211,11)" fg:x="5653" fg:w="129"/><text x="65.0111%" y="223.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (53 samples, 0.61%)</title><rect x="65.6318%" y="197" width="0.6072%" height="15" fill="rgb(236,162,54)" fg:x="5729" fg:w="53"/><text x="65.8818%" y="207.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec (393 samples, 4.50%)</title><rect x="61.7826%" y="245" width="4.5022%" height="15" fill="rgb(220,229,9)" fg:x="5393" fg:w="393"/><text x="62.0326%" y="255.50">alloc..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.05%)</title><rect x="66.2390%" y="229" width="0.0458%" height="15" fill="rgb(250,87,22)" fg:x="5782" fg:w="4"/><text x="66.4890%" y="239.50"></text></g><g><title>alloc::string::String::as_str (22 samples, 0.25%)</title><rect x="66.2848%" y="245" width="0.2520%" height="15" fill="rgb(239,43,17)" fg:x="5786" fg:w="22"/><text x="66.5348%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (13 samples, 0.15%)</title><rect x="66.3879%" y="229" width="0.1489%" height="15" fill="rgb(231,177,25)" fg:x="5795" fg:w="13"/><text x="66.6379%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (16 samples, 0.18%)</title><rect x="66.8920%" y="229" width="0.1833%" height="15" fill="rgb(219,179,1)" fg:x="5839" fg:w="16"/><text x="67.1420%" y="239.50"></text></g><g><title>alloc::string::String::from_utf8 (67 samples, 0.77%)</title><rect x="66.5368%" y="245" width="0.7676%" height="15" fill="rgb(238,219,53)" fg:x="5808" fg:w="67"/><text x="66.7868%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (20 samples, 0.23%)</title><rect x="67.0753%" y="229" width="0.2291%" height="15" fill="rgb(232,167,36)" fg:x="5855" fg:w="20"/><text x="67.3253%" y="239.50"></text></g><g><title>DYLD-STUB$$memmove (3 samples, 0.03%)</title><rect x="67.4991%" y="229" width="0.0344%" height="15" fill="rgb(244,19,51)" fg:x="5892" fg:w="3"/><text x="67.7491%" y="239.50"></text></g><g><title>_platform_memmove (11 samples, 0.13%)</title><rect x="67.5335%" y="229" width="0.1260%" height="15" fill="rgb(224,6,22)" fg:x="5895" fg:w="11"/><text x="67.7835%" y="239.50"></text></g><g><title>_realloc (1 samples, 0.01%)</title><rect x="67.7626%" y="197" width="0.0115%" height="15" fill="rgb(224,145,5)" fg:x="5915" fg:w="1"/><text x="68.0126%" y="207.50"></text></g><g><title>_malloc_zone_realloc (1 samples, 0.01%)</title><rect x="67.8428%" y="181" width="0.0115%" height="15" fill="rgb(234,130,49)" fg:x="5922" fg:w="1"/><text x="68.0928%" y="191.50"></text></g><g><title>_nanov2_free (5 samples, 0.06%)</title><rect x="68.0719%" y="149" width="0.0573%" height="15" fill="rgb(254,6,2)" fg:x="5942" fg:w="5"/><text x="68.3219%" y="159.50"></text></g><g><title>nanov2_pointer_size (1 samples, 0.01%)</title><rect x="68.1292%" y="149" width="0.0115%" height="15" fill="rgb(208,96,46)" fg:x="5947" fg:w="1"/><text x="68.3792%" y="159.50"></text></g><g><title>DYLD-STUB$$_platform_memmove (3 samples, 0.03%)</title><rect x="68.2667%" y="133" width="0.0344%" height="15" fill="rgb(239,3,39)" fg:x="5959" fg:w="3"/><text x="68.5167%" y="143.50"></text></g><g><title>_nanov2_free (10 samples, 0.11%)</title><rect x="68.3011%" y="133" width="0.1146%" height="15" fill="rgb(233,210,1)" fg:x="5962" fg:w="10"/><text x="68.5511%" y="143.50"></text></g><g><title>_platform_memmove (9 samples, 0.10%)</title><rect x="68.4156%" y="133" width="0.1031%" height="15" fill="rgb(244,137,37)" fg:x="5972" fg:w="9"/><text x="68.6656%" y="143.50"></text></g><g><title>nanov2_malloc (18 samples, 0.21%)</title><rect x="68.5187%" y="133" width="0.2062%" height="15" fill="rgb(240,136,2)" fg:x="5981" fg:w="18"/><text x="68.7687%" y="143.50"></text></g><g><title>_malloc_zone_realloc (71 samples, 0.81%)</title><rect x="67.9918%" y="165" width="0.8134%" height="15" fill="rgb(239,18,37)" fg:x="5935" fg:w="71"/><text x="68.2418%" y="175.50"></text></g><g><title>nanov2_realloc (58 samples, 0.66%)</title><rect x="68.1407%" y="149" width="0.6645%" height="15" fill="rgb(218,185,22)" fg:x="5948" fg:w="58"/><text x="68.3907%" y="159.50"></text></g><g><title>nanov2_pointer_size (7 samples, 0.08%)</title><rect x="68.7249%" y="133" width="0.0802%" height="15" fill="rgb(225,218,4)" fg:x="5999" fg:w="7"/><text x="68.9749%" y="143.50"></text></g><g><title>nanov2_realloc (2 samples, 0.02%)</title><rect x="68.8051%" y="165" width="0.0229%" height="15" fill="rgb(230,182,32)" fg:x="6006" fg:w="2"/><text x="69.0551%" y="175.50"></text></g><g><title>_realloc (93 samples, 1.07%)</title><rect x="67.8543%" y="181" width="1.0654%" height="15" fill="rgb(242,56,43)" fg:x="5923" fg:w="93"/><text x="68.1043%" y="191.50"></text></g><g><title>nanov2_size (8 samples, 0.09%)</title><rect x="68.8280%" y="165" width="0.0916%" height="15" fill="rgb(233,99,24)" fg:x="6008" fg:w="8"/><text x="69.0780%" y="175.50"></text></g><g><title>nanov2_size (1 samples, 0.01%)</title><rect x="68.9197%" y="181" width="0.0115%" height="15" fill="rgb(234,209,42)" fg:x="6016" fg:w="1"/><text x="69.1697%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (108 samples, 1.24%)</title><rect x="67.7053%" y="213" width="1.2373%" height="15" fill="rgb(227,7,12)" fg:x="5910" fg:w="108"/><text x="67.9553%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (102 samples, 1.17%)</title><rect x="67.7741%" y="197" width="1.1685%" height="15" fill="rgb(245,203,43)" fg:x="5916" fg:w="102"/><text x="68.0241%" y="207.50"></text></g><g><title>realloc (1 samples, 0.01%)</title><rect x="68.9311%" y="181" width="0.0115%" height="15" fill="rgb(238,205,33)" fg:x="6017" fg:w="1"/><text x="69.1811%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (113 samples, 1.29%)</title><rect x="67.6595%" y="229" width="1.2945%" height="15" fill="rgb(231,56,7)" fg:x="5906" fg:w="113"/><text x="67.9095%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="68.9426%" y="213" width="0.0115%" height="15" fill="rgb(244,186,29)" fg:x="6018" fg:w="1"/><text x="69.1926%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="68.9541%" y="229" width="0.0344%" height="15" fill="rgb(234,111,31)" fg:x="6019" fg:w="3"/><text x="69.2041%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (156 samples, 1.79%)</title><rect x="67.3044%" y="245" width="1.7871%" height="15" fill="rgb(241,149,10)" fg:x="5875" fg:w="156"/><text x="67.5544%" y="255.50">a..</text></g><g><title>core::intrinsics::copy::precondition_check (9 samples, 0.10%)</title><rect x="68.9884%" y="229" width="0.1031%" height="15" fill="rgb(249,206,44)" fg:x="6022" fg:w="9"/><text x="69.2384%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.02%)</title><rect x="69.0915%" y="245" width="0.0229%" height="15" fill="rgb(251,153,30)" fg:x="6031" fg:w="2"/><text x="69.3415%" y="255.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.03%)</title><rect x="69.5841%" y="229" width="0.0344%" height="15" fill="rgb(239,152,38)" fg:x="6074" fg:w="3"/><text x="69.8341%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.73%)</title><rect x="69.6185%" y="229" width="0.7332%" height="15" fill="rgb(249,139,47)" fg:x="6077" fg:w="64"/><text x="69.8685%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.46%)</title><rect x="69.8935%" y="213" width="0.4582%" height="15" fill="rgb(244,64,35)" fg:x="6101" fg:w="40"/><text x="70.1435%" y="223.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="70.3517%" y="229" width="0.0229%" height="15" fill="rgb(216,46,15)" fg:x="6141" fg:w="2"/><text x="70.6017%" y="239.50"></text></g><g><title>_platform_memmove (40 samples, 0.46%)</title><rect x="70.3746%" y="229" width="0.4582%" height="15" fill="rgb(250,74,19)" fg:x="6143" fg:w="40"/><text x="70.6246%" y="239.50"></text></g><g><title>_platform_memset (5 samples, 0.06%)</title><rect x="70.8329%" y="229" width="0.0573%" height="15" fill="rgb(249,42,33)" fg:x="6183" fg:w="5"/><text x="71.0829%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.01%)</title><rect x="70.8901%" y="229" width="0.0115%" height="15" fill="rgb(242,149,17)" fg:x="6188" fg:w="1"/><text x="71.1401%" y="239.50"></text></g><g><title>bitbeat::Process::new (163 samples, 1.87%)</title><rect x="69.1144%" y="245" width="1.8673%" height="15" fill="rgb(244,29,21)" fg:x="6033" fg:w="163"/><text x="69.3644%" y="255.50">b..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (7 samples, 0.08%)</title><rect x="70.9016%" y="229" width="0.0802%" height="15" fill="rgb(220,130,37)" fg:x="6189" fg:w="7"/><text x="71.1516%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (6 samples, 0.07%)</title><rect x="70.9130%" y="213" width="0.0687%" height="15" fill="rgb(211,67,2)" fg:x="6190" fg:w="6"/><text x="71.1630%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (47 samples, 0.54%)</title><rect x="71.4515%" y="149" width="0.5384%" height="15" fill="rgb(235,68,52)" fg:x="6237" fg:w="47"/><text x="71.7015%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (46 samples, 0.53%)</title><rect x="71.4629%" y="133" width="0.5270%" height="15" fill="rgb(246,142,3)" fg:x="6238" fg:w="46"/><text x="71.7129%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (19 samples, 0.22%)</title><rect x="71.7723%" y="117" width="0.2177%" height="15" fill="rgb(241,25,7)" fg:x="6265" fg:w="19"/><text x="72.0223%" y="127.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (5 samples, 0.06%)</title><rect x="71.9326%" y="101" width="0.0573%" height="15" fill="rgb(242,119,39)" fg:x="6279" fg:w="5"/><text x="72.1826%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (23 samples, 0.26%)</title><rect x="71.9899%" y="149" width="0.2635%" height="15" fill="rgb(241,98,45)" fg:x="6284" fg:w="23"/><text x="72.2399%" y="159.50"></text></g><g><title>bitbeat::handle_spawn::_{{closure}} (3 samples, 0.03%)</title><rect x="72.8720%" y="85" width="0.0344%" height="15" fill="rgb(254,28,30)" fg:x="6361" fg:w="3"/><text x="73.1220%" y="95.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6 samples, 0.07%)</title><rect x="72.8491%" y="101" width="0.0687%" height="15" fill="rgb(241,142,54)" fg:x="6359" fg:w="6"/><text x="73.0991%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.01%)</title><rect x="72.9064%" y="85" width="0.0115%" height="15" fill="rgb(222,85,15)" fg:x="6364" fg:w="1"/><text x="73.1564%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1 samples, 0.01%)</title><rect x="72.9064%" y="69" width="0.0115%" height="15" fill="rgb(210,85,47)" fg:x="6364" fg:w="1"/><text x="73.1564%" y="79.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.02%)</title><rect x="72.9179%" y="101" width="0.0229%" height="15" fill="rgb(224,206,25)" fg:x="6365" fg:w="2"/><text x="73.1679%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;&amp;u8,i64,(),bitbeat::handle_spawn::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (11 samples, 0.13%)</title><rect x="72.9408%" y="101" width="0.1260%" height="15" fill="rgb(243,201,19)" fg:x="6367" fg:w="11"/><text x="73.1908%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (10 samples, 0.11%)</title><rect x="72.9522%" y="85" width="0.1146%" height="15" fill="rgb(236,59,4)" fg:x="6368" fg:w="10"/><text x="73.2022%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt; (8 samples, 0.09%)</title><rect x="72.9751%" y="69" width="0.0916%" height="15" fill="rgb(254,179,45)" fg:x="6370" fg:w="8"/><text x="73.2251%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (5 samples, 0.06%)</title><rect x="73.0095%" y="53" width="0.0573%" height="15" fill="rgb(226,14,10)" fg:x="6373" fg:w="5"/><text x="73.2595%" y="63.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="73.0553%" y="37" width="0.0115%" height="15" fill="rgb(244,27,41)" fg:x="6377" fg:w="1"/><text x="73.3053%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (165 samples, 1.89%)</title><rect x="71.3026%" y="181" width="1.8903%" height="15" fill="rgb(235,35,32)" fg:x="6224" fg:w="165"/><text x="71.5526%" y="191.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (164 samples, 1.88%)</title><rect x="71.3140%" y="165" width="1.8788%" height="15" fill="rgb(218,68,31)" fg:x="6225" fg:w="164"/><text x="71.5640%" y="175.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (82 samples, 0.94%)</title><rect x="72.2534%" y="149" width="0.9394%" height="15" fill="rgb(207,120,37)" fg:x="6307" fg:w="82"/><text x="72.5034%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (78 samples, 0.89%)</title><rect x="72.2992%" y="133" width="0.8936%" height="15" fill="rgb(227,98,0)" fg:x="6311" fg:w="78"/><text x="72.5492%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (76 samples, 0.87%)</title><rect x="72.3221%" y="117" width="0.8707%" height="15" fill="rgb(207,7,3)" fg:x="6313" fg:w="76"/><text x="72.5721%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (11 samples, 0.13%)</title><rect x="73.0668%" y="101" width="0.1260%" height="15" fill="rgb(206,98,19)" fg:x="6378" fg:w="11"/><text x="73.3168%" y="111.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (4 samples, 0.05%)</title><rect x="73.1470%" y="85" width="0.0458%" height="15" fill="rgb(217,5,26)" fg:x="6385" fg:w="4"/><text x="73.3970%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.23%)</title><rect x="73.1928%" y="181" width="0.2291%" height="15" fill="rgb(235,190,38)" fg:x="6389" fg:w="20"/><text x="73.4428%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (19 samples, 0.22%)</title><rect x="73.2043%" y="165" width="0.2177%" height="15" fill="rgb(247,86,24)" fg:x="6390" fg:w="19"/><text x="73.4543%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (11 samples, 0.13%)</title><rect x="73.2959%" y="149" width="0.1260%" height="15" fill="rgb(205,101,16)" fg:x="6398" fg:w="11"/><text x="73.5459%" y="159.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (3 samples, 0.03%)</title><rect x="73.3876%" y="133" width="0.0344%" height="15" fill="rgb(246,168,33)" fg:x="6406" fg:w="3"/><text x="73.6376%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="73.5479%" y="149" width="0.0115%" height="15" fill="rgb(231,114,1)" fg:x="6420" fg:w="1"/><text x="73.7979%" y="159.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.08%)</title><rect x="73.5594%" y="149" width="0.0802%" height="15" fill="rgb(207,184,53)" fg:x="6421" fg:w="7"/><text x="73.8094%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (27 samples, 0.31%)</title><rect x="73.4219%" y="181" width="0.3093%" height="15" fill="rgb(224,95,51)" fg:x="6409" fg:w="27"/><text x="73.6719%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (20 samples, 0.23%)</title><rect x="73.5021%" y="165" width="0.2291%" height="15" fill="rgb(212,188,45)" fg:x="6416" fg:w="20"/><text x="73.7521%" y="175.50"></text></g><g><title>nanov2_malloc_type (8 samples, 0.09%)</title><rect x="73.6396%" y="149" width="0.0916%" height="15" fill="rgb(223,154,38)" fg:x="6428" fg:w="8"/><text x="73.8896%" y="159.50"></text></g><g><title>nanov2_allocate_outlined (1 samples, 0.01%)</title><rect x="73.7198%" y="133" width="0.0115%" height="15" fill="rgb(251,22,52)" fg:x="6435" fg:w="1"/><text x="73.9698%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (243 samples, 2.78%)</title><rect x="70.9818%" y="245" width="2.7838%" height="15" fill="rgb(229,209,22)" fg:x="6196" fg:w="243"/><text x="71.2318%" y="255.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (239 samples, 2.74%)</title><rect x="71.0276%" y="229" width="2.7380%" height="15" fill="rgb(234,138,34)" fg:x="6200" fg:w="239"/><text x="71.2776%" y="239.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (233 samples, 2.67%)</title><rect x="71.0963%" y="213" width="2.6693%" height="15" fill="rgb(212,95,11)" fg:x="6206" fg:w="233"/><text x="71.3463%" y="223.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (230 samples, 2.63%)</title><rect x="71.1307%" y="197" width="2.6349%" height="15" fill="rgb(240,179,47)" fg:x="6209" fg:w="230"/><text x="71.3807%" y="207.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.03%)</title><rect x="73.7312%" y="181" width="0.0344%" height="15" fill="rgb(240,163,11)" fg:x="6436" fg:w="3"/><text x="73.9812%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1 samples, 0.01%)</title><rect x="73.7656%" y="245" width="0.0115%" height="15" fill="rgb(236,37,12)" fg:x="6439" fg:w="1"/><text x="74.0156%" y="255.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (8 samples, 0.09%)</title><rect x="73.7771%" y="245" width="0.0916%" height="15" fill="rgb(232,164,16)" fg:x="6440" fg:w="8"/><text x="74.0271%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.05%)</title><rect x="74.0062%" y="213" width="0.0458%" height="15" fill="rgb(244,205,15)" fg:x="6460" fg:w="4"/><text x="74.2562%" y="223.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.03%)</title><rect x="74.0520%" y="197" width="0.0344%" height="15" fill="rgb(223,117,47)" fg:x="6464" fg:w="3"/><text x="74.3020%" y="207.50"></text></g><g><title>_free (15 samples, 0.17%)</title><rect x="74.0864%" y="197" width="0.1718%" height="15" fill="rgb(244,107,35)" fg:x="6467" fg:w="15"/><text x="74.3364%" y="207.50"></text></g><g><title>_nanov2_free (30 samples, 0.34%)</title><rect x="74.2582%" y="197" width="0.3437%" height="15" fill="rgb(205,140,8)" fg:x="6482" fg:w="30"/><text x="74.5082%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (72 samples, 0.82%)</title><rect x="73.8687%" y="245" width="0.8248%" height="15" fill="rgb(228,84,46)" fg:x="6448" fg:w="72"/><text x="74.1187%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (68 samples, 0.78%)</title><rect x="73.9145%" y="229" width="0.7790%" height="15" fill="rgb(254,188,9)" fg:x="6452" fg:w="68"/><text x="74.1645%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (56 samples, 0.64%)</title><rect x="74.0520%" y="213" width="0.6415%" height="15" fill="rgb(206,112,54)" fg:x="6464" fg:w="56"/><text x="74.3020%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8 samples, 0.09%)</title><rect x="74.6019%" y="197" width="0.0916%" height="15" fill="rgb(216,84,49)" fg:x="6512" fg:w="8"/><text x="74.8519%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="74.7623%" y="229" width="0.0229%" height="15" fill="rgb(214,194,35)" fg:x="6526" fg:w="2"/><text x="75.0123%" y="239.50"></text></g><g><title>DYLD-STUB$$free (6 samples, 0.07%)</title><rect x="74.8654%" y="197" width="0.0687%" height="15" fill="rgb(249,28,3)" fg:x="6535" fg:w="6"/><text x="75.1154%" y="207.50"></text></g><g><title>_free (7 samples, 0.08%)</title><rect x="74.9341%" y="197" width="0.0802%" height="15" fill="rgb(222,56,52)" fg:x="6541" fg:w="7"/><text x="75.1841%" y="207.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="75.1862%" y="181" width="0.0115%" height="15" fill="rgb(245,217,50)" fg:x="6563" fg:w="1"/><text x="75.4362%" y="191.50"></text></g><g><title>__bzero (1 samples, 0.01%)</title><rect x="75.1976%" y="181" width="0.0115%" height="15" fill="rgb(213,201,24)" fg:x="6564" fg:w="1"/><text x="75.4476%" y="191.50"></text></g><g><title>_nanov2_free (20 samples, 0.23%)</title><rect x="75.0143%" y="197" width="0.2291%" height="15" fill="rgb(248,116,28)" fg:x="6548" fg:w="20"/><text x="75.2643%" y="207.50"></text></g><g><title>_platform_memset (3 samples, 0.03%)</title><rect x="75.2091%" y="181" width="0.0344%" height="15" fill="rgb(219,72,43)" fg:x="6565" fg:w="3"/><text x="75.4591%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (52 samples, 0.60%)</title><rect x="74.6936%" y="245" width="0.5957%" height="15" fill="rgb(209,138,14)" fg:x="6520" fg:w="52"/><text x="74.9436%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (44 samples, 0.50%)</title><rect x="74.7852%" y="229" width="0.5041%" height="15" fill="rgb(222,18,33)" fg:x="6528" fg:w="44"/><text x="75.0352%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.44%)</title><rect x="74.8539%" y="213" width="0.4353%" height="15" fill="rgb(213,199,7)" fg:x="6534" fg:w="38"/><text x="75.1039%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4 samples, 0.05%)</title><rect x="75.2434%" y="197" width="0.0458%" height="15" fill="rgb(250,110,10)" fg:x="6568" fg:w="4"/><text x="75.4934%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="75.3580%" y="229" width="0.0115%" height="15" fill="rgb(248,123,6)" fg:x="6578" fg:w="1"/><text x="75.6080%" y="239.50"></text></g><g><title>_nanov2_free (1 samples, 0.01%)</title><rect x="75.3695%" y="229" width="0.0115%" height="15" fill="rgb(206,91,31)" fg:x="6579" fg:w="1"/><text x="75.6195%" y="239.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.05%)</title><rect x="75.4153%" y="213" width="0.0458%" height="15" fill="rgb(211,154,13)" fg:x="6583" fg:w="4"/><text x="75.6653%" y="223.50"></text></g><g><title>_free (2 samples, 0.02%)</title><rect x="75.4611%" y="213" width="0.0229%" height="15" fill="rgb(225,148,7)" fg:x="6587" fg:w="2"/><text x="75.7111%" y="223.50"></text></g><g><title>_nanov2_free (14 samples, 0.16%)</title><rect x="75.4840%" y="213" width="0.1604%" height="15" fill="rgb(220,160,43)" fg:x="6589" fg:w="14"/><text x="75.7340%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (35 samples, 0.40%)</title><rect x="75.2893%" y="245" width="0.4010%" height="15" fill="rgb(213,52,39)" fg:x="6572" fg:w="35"/><text x="75.5393%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (27 samples, 0.31%)</title><rect x="75.3809%" y="229" width="0.3093%" height="15" fill="rgb(243,137,7)" fg:x="6580" fg:w="27"/><text x="75.6309%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4 samples, 0.05%)</title><rect x="75.6444%" y="213" width="0.0458%" height="15" fill="rgb(230,79,13)" fg:x="6603" fg:w="4"/><text x="75.8944%" y="223.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (4 samples, 0.05%)</title><rect x="75.6902%" y="245" width="0.0458%" height="15" fill="rgb(247,105,23)" fg:x="6607" fg:w="4"/><text x="75.9402%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (3 samples, 0.03%)</title><rect x="75.7017%" y="229" width="0.0344%" height="15" fill="rgb(223,179,41)" fg:x="6608" fg:w="3"/><text x="75.9517%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (1 samples, 0.01%)</title><rect x="75.7361%" y="245" width="0.0115%" height="15" fill="rgb(218,9,34)" fg:x="6611" fg:w="1"/><text x="75.9861%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="76.3089%" y="213" width="0.0229%" height="15" fill="rgb(222,106,8)" fg:x="6661" fg:w="2"/><text x="76.5589%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (64 samples, 0.73%)</title><rect x="76.6296%" y="165" width="0.7332%" height="15" fill="rgb(211,220,0)" fg:x="6689" fg:w="64"/><text x="76.8796%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (277 samples, 3.17%)</title><rect x="76.4349%" y="197" width="3.1733%" height="15" fill="rgb(229,52,16)" fg:x="6672" fg:w="277"/><text x="76.6849%" y="207.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (272 samples, 3.12%)</title><rect x="76.4922%" y="181" width="3.1160%" height="15" fill="rgb(212,155,18)" fg:x="6677" fg:w="272"/><text x="76.7422%" y="191.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (196 samples, 2.25%)</title><rect x="77.3628%" y="165" width="2.2454%" height="15" fill="rgb(242,21,14)" fg:x="6753" fg:w="196"/><text x="77.6128%" y="175.50">&lt;..</text></g><g><title>DYLD-STUB$$memcpy (6 samples, 0.07%)</title><rect x="80.0779%" y="181" width="0.0687%" height="15" fill="rgb(222,19,48)" fg:x="6990" fg:w="6"/><text x="80.3279%" y="191.50"></text></g><g><title>_platform_memmove (17 samples, 0.19%)</title><rect x="80.1466%" y="181" width="0.1948%" height="15" fill="rgb(232,45,27)" fg:x="6996" fg:w="17"/><text x="80.3966%" y="191.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (85 samples, 0.97%)</title><rect x="79.6082%" y="197" width="0.9738%" height="15" fill="rgb(249,103,42)" fg:x="6949" fg:w="85"/><text x="79.8582%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (21 samples, 0.24%)</title><rect x="80.3414%" y="181" width="0.2406%" height="15" fill="rgb(246,81,33)" fg:x="7013" fg:w="21"/><text x="80.5914%" y="191.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="80.5820%" y="197" width="0.0115%" height="15" fill="rgb(252,33,42)" fg:x="7034" fg:w="1"/><text x="80.8320%" y="207.50"></text></g><g><title>core::cmp::Ord::min (38 samples, 0.44%)</title><rect x="81.8192%" y="117" width="0.4353%" height="15" fill="rgb(209,212,41)" fg:x="7142" fg:w="38"/><text x="82.0692%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (6 samples, 0.07%)</title><rect x="83.1596%" y="101" width="0.0687%" height="15" fill="rgb(207,154,6)" fg:x="7259" fg:w="6"/><text x="83.4096%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (156 samples, 1.79%)</title><rect x="82.2546%" y="117" width="1.7871%" height="15" fill="rgb(223,64,47)" fg:x="7180" fg:w="156"/><text x="82.5046%" y="127.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (71 samples, 0.81%)</title><rect x="83.2283%" y="101" width="0.8134%" height="15" fill="rgb(211,161,38)" fg:x="7265" fg:w="71"/><text x="83.4783%" y="111.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (12 samples, 0.14%)</title><rect x="83.9042%" y="85" width="0.1375%" height="15" fill="rgb(219,138,40)" fg:x="7324" fg:w="12"/><text x="84.1542%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (675 samples, 7.73%)</title><rect x="76.3318%" y="213" width="7.7328%" height="15" fill="rgb(241,228,46)" fg:x="6663" fg:w="675"/><text x="76.5818%" y="223.50">core::hash:..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (303 samples, 3.47%)</title><rect x="80.5934%" y="197" width="3.4712%" height="15" fill="rgb(223,209,38)" fg:x="7035" fg:w="303"/><text x="80.8434%" y="207.50">cor..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (297 samples, 3.40%)</title><rect x="80.6622%" y="181" width="3.4025%" height="15" fill="rgb(236,164,45)" fg:x="7041" fg:w="297"/><text x="80.9122%" y="191.50">cor..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (283 samples, 3.24%)</title><rect x="80.8225%" y="165" width="3.2421%" height="15" fill="rgb(231,15,5)" fg:x="7055" fg:w="283"/><text x="81.0725%" y="175.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (277 samples, 3.17%)</title><rect x="80.8913%" y="149" width="3.1733%" height="15" fill="rgb(252,35,15)" fg:x="7061" fg:w="277"/><text x="81.1413%" y="159.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (273 samples, 3.13%)</title><rect x="80.9371%" y="133" width="3.1275%" height="15" fill="rgb(248,181,18)" fg:x="7065" fg:w="273"/><text x="81.1871%" y="143.50">&lt;co..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.02%)</title><rect x="84.0417%" y="117" width="0.0229%" height="15" fill="rgb(233,39,42)" fg:x="7336" fg:w="2"/><text x="84.2917%" y="127.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (96 samples, 1.10%)</title><rect x="84.7176%" y="197" width="1.0998%" height="15" fill="rgb(238,110,33)" fg:x="7395" fg:w="96"/><text x="84.9676%" y="207.50"></text></g><g><title>core::ptr::read_unaligned (93 samples, 1.07%)</title><rect x="84.7520%" y="181" width="1.0654%" height="15" fill="rgb(233,195,10)" fg:x="7398" fg:w="93"/><text x="85.0020%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (79 samples, 0.91%)</title><rect x="84.9124%" y="165" width="0.9050%" height="15" fill="rgb(254,105,3)" fg:x="7412" fg:w="79"/><text x="85.1624%" y="175.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (31 samples, 0.36%)</title><rect x="85.4623%" y="149" width="0.3551%" height="15" fill="rgb(221,225,9)" fg:x="7460" fg:w="31"/><text x="85.7123%" y="159.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (5 samples, 0.06%)</title><rect x="85.9549%" y="181" width="0.0573%" height="15" fill="rgb(224,227,45)" fg:x="7503" fg:w="5"/><text x="86.2049%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (6 samples, 0.07%)</title><rect x="86.0121%" y="181" width="0.0687%" height="15" fill="rgb(229,198,43)" fg:x="7508" fg:w="6"/><text x="86.2621%" y="191.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (31 samples, 0.36%)</title><rect x="85.8174%" y="197" width="0.3551%" height="15" fill="rgb(206,209,35)" fg:x="7491" fg:w="31"/><text x="86.0674%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (8 samples, 0.09%)</title><rect x="86.0809%" y="181" width="0.0916%" height="15" fill="rgb(245,195,53)" fg:x="7514" fg:w="8"/><text x="86.3309%" y="191.50"></text></g><g><title>alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (96 samples, 1.10%)</title><rect x="87.4785%" y="149" width="1.0998%" height="15" fill="rgb(240,92,26)" fg:x="7636" fg:w="96"/><text x="87.7285%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (89 samples, 1.02%)</title><rect x="87.5587%" y="133" width="1.0196%" height="15" fill="rgb(207,40,23)" fg:x="7643" fg:w="89"/><text x="87.8087%" y="143.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (72 samples, 0.82%)</title><rect x="87.7535%" y="117" width="0.8248%" height="15" fill="rgb(223,111,35)" fg:x="7660" fg:w="72"/><text x="88.0035%" y="127.50"></text></g><g><title>DYLD-STUB$$memcmp (3 samples, 0.03%)</title><rect x="88.7960%" y="117" width="0.0344%" height="15" fill="rgb(229,147,28)" fg:x="7751" fg:w="3"/><text x="89.0460%" y="127.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (26 samples, 0.30%)</title><rect x="88.6929%" y="133" width="0.2979%" height="15" fill="rgb(211,29,28)" fg:x="7742" fg:w="26"/><text x="88.9429%" y="143.50"></text></g><g><title>_platform_memcmp (14 samples, 0.16%)</title><rect x="88.8303%" y="117" width="0.1604%" height="15" fill="rgb(228,72,33)" fg:x="7754" fg:w="14"/><text x="89.0803%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,145 samples, 13.12%)</title><rect x="75.8850%" y="229" width="13.1172%" height="15" fill="rgb(205,214,31)" fg:x="6624" fg:w="1145"/><text x="76.1350%" y="239.50">hashbrown::map::Hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (431 samples, 4.94%)</title><rect x="84.0646%" y="213" width="4.9376%" height="15" fill="rgb(224,111,15)" fg:x="7338" fg:w="431"/><text x="84.3146%" y="223.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (247 samples, 2.83%)</title><rect x="86.1725%" y="197" width="2.8296%" height="15" fill="rgb(253,21,26)" fg:x="7522" fg:w="247"/><text x="86.4225%" y="207.50">ha..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (214 samples, 2.45%)</title><rect x="86.5506%" y="181" width="2.4516%" height="15" fill="rgb(245,139,43)" fg:x="7555" fg:w="214"/><text x="86.8006%" y="191.50">ha..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (208 samples, 2.38%)</title><rect x="86.6193%" y="165" width="2.3829%" height="15" fill="rgb(252,170,7)" fg:x="7561" fg:w="208"/><text x="86.8693%" y="175.50">&lt;Q..</text></g><g><title>core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (37 samples, 0.42%)</title><rect x="88.5783%" y="149" width="0.4239%" height="15" fill="rgb(231,118,14)" fg:x="7732" fg:w="37"/><text x="88.8283%" y="159.50"></text></g><g><title>_platform_memcmp (1 samples, 0.01%)</title><rect x="88.9907%" y="133" width="0.0115%" height="15" fill="rgb(238,83,0)" fg:x="7768" fg:w="1"/><text x="89.2407%" y="143.50"></text></g><g><title>bitbeat::handle_spawn (3,164 samples, 36.25%)</title><rect x="52.7781%" y="261" width="36.2470%" height="15" fill="rgb(221,39,39)" fg:x="4607" fg:w="3164"/><text x="53.0281%" y="271.50">bitbeat::handle_spawn</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,159 samples, 13.28%)</title><rect x="75.7475%" y="245" width="13.2776%" height="15" fill="rgb(222,119,46)" fg:x="6612" fg:w="1159"/><text x="75.9975%" y="255.50">std::collections::ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.02%)</title><rect x="89.0022%" y="229" width="0.0229%" height="15" fill="rgb(222,165,49)" fg:x="7769" fg:w="2"/><text x="89.2522%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.09%)</title><rect x="89.7354%" y="245" width="0.0916%" height="15" fill="rgb(219,113,52)" fg:x="7833" fg:w="8"/><text x="89.9854%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.08%)</title><rect x="89.9416%" y="229" width="0.0802%" height="15" fill="rgb(214,7,15)" fg:x="7851" fg:w="7"/><text x="90.1916%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (43 samples, 0.49%)</title><rect x="89.8270%" y="245" width="0.4926%" height="15" fill="rgb(235,32,4)" fg:x="7841" fg:w="43"/><text x="90.0770%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (26 samples, 0.30%)</title><rect x="90.0218%" y="229" width="0.2979%" height="15" fill="rgb(238,90,54)" fg:x="7858" fg:w="26"/><text x="90.2718%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.02%)</title><rect x="90.3196%" y="245" width="0.0229%" height="15" fill="rgb(213,208,19)" fg:x="7884" fg:w="2"/><text x="90.5696%" y="255.50"></text></g><g><title>bitbeat::handle_sub (123 samples, 1.41%)</title><rect x="89.0251%" y="261" width="1.4091%" height="15" fill="rgb(233,156,4)" fg:x="7771" fg:w="123"/><text x="89.2751%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (8 samples, 0.09%)</title><rect x="90.3425%" y="245" width="0.0916%" height="15" fill="rgb(207,194,5)" fg:x="7886" fg:w="8"/><text x="90.5925%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.01%)</title><rect x="90.4342%" y="261" width="0.0115%" height="15" fill="rgb(206,111,30)" fg:x="7894" fg:w="1"/><text x="90.6842%" y="271.50"></text></g><g><title>bitbeat::Process::step (5,155 samples, 59.06%)</title><rect x="31.4011%" y="277" width="59.0560%" height="15" fill="rgb(243,70,54)" fg:x="2741" fg:w="5155"/><text x="31.6511%" y="287.50">bitbeat::Process::step</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u32,anyhow::Error&gt;&gt; (1 samples, 0.01%)</title><rect x="90.4456%" y="261" width="0.0115%" height="15" fill="rgb(242,28,8)" fg:x="7895" fg:w="1"/><text x="90.6956%" y="271.50"></text></g><g><title>bitbeat::handle_add (1 samples, 0.01%)</title><rect x="90.4571%" y="277" width="0.0115%" height="15" fill="rgb(219,106,18)" fg:x="7896" fg:w="1"/><text x="90.7071%" y="287.50"></text></g><g><title>bitbeat::handle_cmp_le (3 samples, 0.03%)</title><rect x="90.4686%" y="277" width="0.0344%" height="15" fill="rgb(244,222,10)" fg:x="7897" fg:w="3"/><text x="90.7186%" y="287.50"></text></g><g><title>bitbeat::handle_jump_if (3 samples, 0.03%)</title><rect x="90.5029%" y="277" width="0.0344%" height="15" fill="rgb(236,179,52)" fg:x="7900" fg:w="3"/><text x="90.7529%" y="287.50"></text></g><g><title>bitbeat::handle_load_imm (2 samples, 0.02%)</title><rect x="90.5373%" y="277" width="0.0229%" height="15" fill="rgb(213,23,39)" fg:x="7903" fg:w="2"/><text x="90.7873%" y="287.50"></text></g><g><title>bitbeat::handle_recv (2 samples, 0.02%)</title><rect x="90.5602%" y="277" width="0.0229%" height="15" fill="rgb(238,48,10)" fg:x="7905" fg:w="2"/><text x="90.8102%" y="287.50"></text></g><g><title>bitbeat::handle_send (3 samples, 0.03%)</title><rect x="90.5831%" y="277" width="0.0344%" height="15" fill="rgb(251,196,23)" fg:x="7907" fg:w="3"/><text x="90.8331%" y="287.50"></text></g><g><title>bitbeat::handle_sub (1 samples, 0.01%)</title><rect x="90.6175%" y="277" width="0.0115%" height="15" fill="rgb(250,152,24)" fg:x="7910" fg:w="1"/><text x="90.8675%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (63 samples, 0.72%)</title><rect x="90.6289%" y="277" width="0.7217%" height="15" fill="rgb(209,150,17)" fg:x="7911" fg:w="63"/><text x="90.8789%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (59 samples, 0.68%)</title><rect x="90.6748%" y="261" width="0.6759%" height="15" fill="rgb(234,202,34)" fg:x="7915" fg:w="59"/><text x="90.9248%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="91.3048%" y="245" width="0.0458%" height="15" fill="rgb(253,148,53)" fg:x="7970" fg:w="4"/><text x="91.5548%" y="255.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="91.3965%" y="261" width="0.0344%" height="15" fill="rgb(218,129,16)" fg:x="7978" fg:w="3"/><text x="91.6465%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::new (25 samples, 0.29%)</title><rect x="91.3507%" y="277" width="0.2864%" height="15" fill="rgb(216,85,19)" fg:x="7974" fg:w="25"/><text x="91.6007%" y="287.50"></text></g><g><title>_platform_memmove (18 samples, 0.21%)</title><rect x="91.4309%" y="261" width="0.2062%" height="15" fill="rgb(235,228,7)" fg:x="7981" fg:w="18"/><text x="91.6809%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (18 samples, 0.21%)</title><rect x="91.6371%" y="277" width="0.2062%" height="15" fill="rgb(245,175,0)" fg:x="7999" fg:w="18"/><text x="91.8871%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (10 samples, 0.11%)</title><rect x="91.7287%" y="261" width="0.1146%" height="15" fill="rgb(208,168,36)" fg:x="8007" fg:w="10"/><text x="91.9787%" y="271.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="91.7860%" y="245" width="0.0573%" height="15" fill="rgb(246,171,24)" fg:x="8012" fg:w="5"/><text x="92.0360%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (6 samples, 0.07%)</title><rect x="91.8433%" y="277" width="0.0687%" height="15" fill="rgb(215,142,24)" fg:x="8017" fg:w="6"/><text x="92.0933%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (38 samples, 0.44%)</title><rect x="92.2557%" y="197" width="0.4353%" height="15" fill="rgb(250,187,7)" fg:x="8053" fg:w="38"/><text x="92.5057%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (139 samples, 1.59%)</title><rect x="92.1526%" y="229" width="1.5924%" height="15" fill="rgb(228,66,33)" fg:x="8044" fg:w="139"/><text x="92.4026%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (136 samples, 1.56%)</title><rect x="92.1870%" y="213" width="1.5580%" height="15" fill="rgb(234,215,21)" fg:x="8047" fg:w="136"/><text x="92.4370%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (92 samples, 1.05%)</title><rect x="92.6910%" y="197" width="1.0540%" height="15" fill="rgb(222,191,20)" fg:x="8091" fg:w="92"/><text x="92.9410%" y="207.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.06%)</title><rect x="94.0658%" y="213" width="0.0573%" height="15" fill="rgb(245,79,54)" fg:x="8211" fg:w="5"/><text x="94.3158%" y="223.50"></text></g><g><title>_platform_memmove (12 samples, 0.14%)</title><rect x="94.1230%" y="213" width="0.1375%" height="15" fill="rgb(240,10,37)" fg:x="8216" fg:w="12"/><text x="94.3730%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (53 samples, 0.61%)</title><rect x="93.7450%" y="229" width="0.6072%" height="15" fill="rgb(214,192,32)" fg:x="8183" fg:w="53"/><text x="93.9950%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (8 samples, 0.09%)</title><rect x="94.2605%" y="213" width="0.0916%" height="15" fill="rgb(209,36,54)" fg:x="8228" fg:w="8"/><text x="94.5105%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (29 samples, 0.33%)</title><rect x="94.8219%" y="149" width="0.3322%" height="15" fill="rgb(220,10,11)" fg:x="8277" fg:w="29"/><text x="95.0719%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (14 samples, 0.16%)</title><rect x="95.1541%" y="149" width="0.1604%" height="15" fill="rgb(221,106,17)" fg:x="8306" fg:w="14"/><text x="95.4041%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (122 samples, 1.40%)</title><rect x="94.4324%" y="165" width="1.3976%" height="15" fill="rgb(251,142,44)" fg:x="8243" fg:w="122"/><text x="94.6824%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (45 samples, 0.52%)</title><rect x="95.3145%" y="149" width="0.5155%" height="15" fill="rgb(238,13,15)" fg:x="8320" fg:w="45"/><text x="95.5645%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (19 samples, 0.22%)</title><rect x="95.6123%" y="133" width="0.2177%" height="15" fill="rgb(208,107,27)" fg:x="8346" fg:w="19"/><text x="95.8623%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (324 samples, 3.71%)</title><rect x="92.1297%" y="245" width="3.7118%" height="15" fill="rgb(205,136,37)" fg:x="8042" fg:w="324"/><text x="92.3797%" y="255.50">core..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (130 samples, 1.49%)</title><rect x="94.3522%" y="229" width="1.4893%" height="15" fill="rgb(250,205,27)" fg:x="8236" fg:w="130"/><text x="94.6022%" y="239.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (128 samples, 1.47%)</title><rect x="94.3751%" y="213" width="1.4664%" height="15" fill="rgb(210,80,43)" fg:x="8238" fg:w="128"/><text x="94.6251%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (128 samples, 1.47%)</title><rect x="94.3751%" y="197" width="1.4664%" height="15" fill="rgb(247,160,36)" fg:x="8238" fg:w="128"/><text x="94.6251%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (124 samples, 1.42%)</title><rect x="94.4209%" y="181" width="1.4206%" height="15" fill="rgb(234,13,49)" fg:x="8242" fg:w="124"/><text x="94.6709%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.01%)</title><rect x="95.8300%" y="165" width="0.0115%" height="15" fill="rgb(234,122,0)" fg:x="8365" fg:w="1"/><text x="96.0800%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7 samples, 0.08%)</title><rect x="95.9216%" y="229" width="0.0802%" height="15" fill="rgb(207,146,38)" fg:x="8373" fg:w="7"/><text x="96.1716%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.01%)</title><rect x="95.9904%" y="213" width="0.0115%" height="15" fill="rgb(207,177,25)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::rehash_in_place (1 samples, 0.01%)</title><rect x="95.9904%" y="197" width="0.0115%" height="15" fill="rgb(211,178,42)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (1 samples, 0.01%)</title><rect x="95.9904%" y="181" width="0.0115%" height="15" fill="rgb(230,69,54)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="191.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (1 samples, 0.01%)</title><rect x="95.9904%" y="165" width="0.0115%" height="15" fill="rgb(214,135,41)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.01%)</title><rect x="95.9904%" y="149" width="0.0115%" height="15" fill="rgb(237,67,25)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="159.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.01%)</title><rect x="95.9904%" y="133" width="0.0115%" height="15" fill="rgb(222,189,50)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="143.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.01%)</title><rect x="95.9904%" y="117" width="0.0115%" height="15" fill="rgb(245,148,34)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="127.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.01%)</title><rect x="95.9904%" y="101" width="0.0115%" height="15" fill="rgb(222,29,6)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="95.9904%" y="85" width="0.0115%" height="15" fill="rgb(221,189,43)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="95.9904%" y="69" width="0.0115%" height="15" fill="rgb(207,36,27)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.01%)</title><rect x="95.9904%" y="53" width="0.0115%" height="15" fill="rgb(217,90,24)" fg:x="8379" fg:w="1"/><text x="96.2404%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.01%)</title><rect x="96.5174%" y="197" width="0.0115%" height="15" fill="rgb(224,66,35)" fg:x="8425" fg:w="1"/><text x="96.7674%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (89 samples, 1.02%)</title><rect x="96.4601%" y="213" width="1.0196%" height="15" fill="rgb(221,13,50)" fg:x="8420" fg:w="89"/><text x="96.7101%" y="223.50"></text></g><g><title>core::ptr::read_unaligned (83 samples, 0.95%)</title><rect x="96.5288%" y="197" width="0.9509%" height="15" fill="rgb(236,68,49)" fg:x="8426" fg:w="83"/><text x="96.7788%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (75 samples, 0.86%)</title><rect x="96.6205%" y="181" width="0.8592%" height="15" fill="rgb(229,146,28)" fg:x="8434" fg:w="75"/><text x="96.8705%" y="191.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (9 samples, 0.10%)</title><rect x="97.3766%" y="165" width="0.1031%" height="15" fill="rgb(225,31,38)" fg:x="8500" fg:w="9"/><text x="97.6266%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vceq_u8 (3 samples, 0.03%)</title><rect x="97.7432%" y="197" width="0.0344%" height="15" fill="rgb(250,208,3)" fg:x="8532" fg:w="3"/><text x="97.9932%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.02%)</title><rect x="97.7775%" y="197" width="0.0229%" height="15" fill="rgb(246,54,23)" fg:x="8535" fg:w="2"/><text x="98.0275%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (5 samples, 0.06%)</title><rect x="97.8004%" y="197" width="0.0573%" height="15" fill="rgb(243,76,11)" fg:x="8537" fg:w="5"/><text x="98.0504%" y="207.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (35 samples, 0.40%)</title><rect x="97.4797%" y="213" width="0.4010%" height="15" fill="rgb(245,21,50)" fg:x="8509" fg:w="35"/><text x="97.7297%" y="223.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (2 samples, 0.02%)</title><rect x="97.8577%" y="197" width="0.0229%" height="15" fill="rgb(228,9,43)" fg:x="8542" fg:w="2"/><text x="98.1077%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.01%)</title><rect x="97.8806%" y="213" width="0.0115%" height="15" fill="rgb(208,100,47)" fg:x="8544" fg:w="1"/><text x="98.1306%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.01%)</title><rect x="97.8806%" y="197" width="0.0115%" height="15" fill="rgb(232,26,8)" fg:x="8544" fg:w="1"/><text x="98.1306%" y="207.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.01%)</title><rect x="97.8806%" y="181" width="0.0115%" height="15" fill="rgb(216,166,38)" fg:x="8544" fg:w="1"/><text x="98.1306%" y="191.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (1 samples, 0.01%)</title><rect x="97.8806%" y="165" width="0.0115%" height="15" fill="rgb(251,202,51)" fg:x="8544" fg:w="1"/><text x="98.1306%" y="175.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcltz_s8 (10 samples, 0.11%)</title><rect x="98.4191%" y="181" width="0.1146%" height="15" fill="rgb(254,216,34)" fg:x="8591" fg:w="10"/><text x="98.6691%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8 (4 samples, 0.05%)</title><rect x="98.5336%" y="181" width="0.0458%" height="15" fill="rgb(251,32,27)" fg:x="8601" fg:w="4"/><text x="98.7836%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (72 samples, 0.82%)</title><rect x="97.8921%" y="213" width="0.8248%" height="15" fill="rgb(208,127,28)" fg:x="8545" fg:w="72"/><text x="98.1421%" y="223.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_empty_or_deleted (33 samples, 0.38%)</title><rect x="98.3389%" y="197" width="0.3781%" height="15" fill="rgb(224,137,22)" fg:x="8584" fg:w="33"/><text x="98.5889%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (12 samples, 0.14%)</title><rect x="98.5794%" y="181" width="0.1375%" height="15" fill="rgb(254,70,32)" fg:x="8605" fg:w="12"/><text x="98.8294%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (255 samples, 2.92%)</title><rect x="95.8414%" y="245" width="2.9213%" height="15" fill="rgb(229,75,37)" fg:x="8366" fg:w="255"/><text x="96.0914%" y="255.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (241 samples, 2.76%)</title><rect x="96.0018%" y="229" width="2.7609%" height="15" fill="rgb(252,64,23)" fg:x="8380" fg:w="241"/><text x="96.2518%" y="239.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.05%)</title><rect x="98.7169%" y="213" width="0.0458%" height="15" fill="rgb(232,162,48)" fg:x="8617" fg:w="4"/><text x="98.9669%" y="223.50"></text></g><g><title>bitbeat::Machine::run::_{{closure}} (6,273 samples, 71.86%)</title><rect x="27.4487%" y="293" width="71.8639%" height="15" fill="rgb(246,160,12)" fg:x="2396" fg:w="6273"/><text x="27.6987%" y="303.50">bitbeat::Machine::run::_{{closure}}</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (646 samples, 7.40%)</title><rect x="91.9120%" y="277" width="7.4006%" height="15" fill="rgb(247,166,0)" fg:x="8023" fg:w="646"/><text x="92.1620%" y="287.50">std::colle..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (644 samples, 7.38%)</title><rect x="91.9349%" y="261" width="7.3777%" height="15" fill="rgb(249,219,21)" fg:x="8025" fg:w="644"/><text x="92.1849%" y="271.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (48 samples, 0.55%)</title><rect x="98.7627%" y="245" width="0.5499%" height="15" fill="rgb(205,209,3)" fg:x="8621" fg:w="48"/><text x="99.0127%" y="255.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6,310 samples, 72.29%)</title><rect x="27.0363%" y="325" width="72.2878%" height="15" fill="rgb(243,44,1)" fg:x="2360" fg:w="6310"/><text x="27.2863%" y="335.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (6,286 samples, 72.01%)</title><rect x="27.3113%" y="309" width="72.0128%" height="15" fill="rgb(206,159,16)" fg:x="2384" fg:w="6286"/><text x="27.5613%" y="319.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::cell::RefCell&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="99.3126%" y="293" width="0.0115%" height="15" fill="rgb(244,77,30)" fg:x="8669" fg:w="1"/><text x="99.5626%" y="303.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="99.3241%" y="325" width="0.0115%" height="15" fill="rgb(218,69,12)" fg:x="8670" fg:w="1"/><text x="99.5741%" y="335.50"></text></g><g><title>__rust_try (6,336 samples, 72.59%)</title><rect x="26.8759%" y="357" width="72.5856%" height="15" fill="rgb(212,87,7)" fg:x="2346" fg:w="6336"/><text x="27.1259%" y="367.50">__rust_try</text></g><g><title>std::panicking::try::do_call (6,331 samples, 72.53%)</title><rect x="26.9332%" y="341" width="72.5284%" height="15" fill="rgb(245,114,25)" fg:x="2351" fg:w="6331"/><text x="27.1832%" y="351.50">std::panicking::try::do_call</text></g><g><title>_platform_memmove (11 samples, 0.13%)</title><rect x="99.3355%" y="325" width="0.1260%" height="15" fill="rgb(210,61,42)" fg:x="8671" fg:w="11"/><text x="99.5855%" y="335.50"></text></g><g><title>all (8,729 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(211,52,33)" fg:x="0" fg:w="8729"/><text x="0.2500%" y="543.50"></text></g><g><title>start (8,729 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(234,58,33)" fg:x="0" fg:w="8729"/><text x="0.2500%" y="527.50">start</text></g><g><title>main (8,728 samples, 99.99%)</title><rect x="0.0115%" y="501" width="99.9885%" height="15" fill="rgb(220,115,36)" fg:x="1" fg:w="8728"/><text x="0.2615%" y="511.50">main</text></g><g><title>std::rt::lang_start (8,728 samples, 99.99%)</title><rect x="0.0115%" y="485" width="99.9885%" height="15" fill="rgb(243,153,54)" fg:x="1" fg:w="8728"/><text x="0.2615%" y="495.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (8,728 samples, 99.99%)</title><rect x="0.0115%" y="469" width="99.9885%" height="15" fill="rgb(251,47,18)" fg:x="1" fg:w="8728"/><text x="0.2615%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (8,728 samples, 99.99%)</title><rect x="0.0115%" y="453" width="99.9885%" height="15" fill="rgb(242,102,42)" fg:x="1" fg:w="8728"/><text x="0.2615%" y="463.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (8,728 samples, 99.99%)</title><rect x="0.0115%" y="437" width="99.9885%" height="15" fill="rgb(234,31,38)" fg:x="1" fg:w="8728"/><text x="0.2615%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,728 samples, 99.99%)</title><rect x="0.0115%" y="421" width="99.9885%" height="15" fill="rgb(221,117,51)" fg:x="1" fg:w="8728"/><text x="0.2615%" y="431.50">core::ops::function::FnOnce::call_once</text></g><g><title>bitbeat::main (8,728 samples, 99.99%)</title><rect x="0.0115%" y="405" width="99.9885%" height="15" fill="rgb(212,20,18)" fg:x="1" fg:w="8728"/><text x="0.2615%" y="415.50">bitbeat::main</text></g><g><title>bitbeat::Machine::run (8,727 samples, 99.98%)</title><rect x="0.0229%" y="389" width="99.9771%" height="15" fill="rgb(245,133,36)" fg:x="2" fg:w="8727"/><text x="0.2729%" y="399.50">bitbeat::Machine::run</text></g><g><title>std::panic::catch_unwind (6,400 samples, 73.32%)</title><rect x="26.6812%" y="373" width="73.3188%" height="15" fill="rgb(212,6,19)" fg:x="2329" fg:w="6400"/><text x="26.9312%" y="383.50">std::panic::catch_unwind</text></g><g><title>_platform_memmove (47 samples, 0.54%)</title><rect x="99.4616%" y="357" width="0.5384%" height="15" fill="rgb(218,1,36)" fg:x="8682" fg:w="47"/><text x="99.7116%" y="367.50"></text></g></svg></svg>