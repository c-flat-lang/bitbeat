<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="27255"><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (5 samples, 0.02%)</title><rect x="0.0000%" y="485" width="0.0183%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="495.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (5 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0183%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="0.0183%" y="373" width="0.0147%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="4"/><text x="0.2683%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (3 samples, 0.01%)</title><rect x="0.0367%" y="373" width="0.0110%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="3"/><text x="0.2867%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (27 samples, 0.10%)</title><rect x="2.2345%" y="341" width="0.0991%" height="15" fill="rgb(208,68,35)" fg:x="609" fg:w="27"/><text x="2.4845%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (34 samples, 0.12%)</title><rect x="3.0600%" y="325" width="0.1247%" height="15" fill="rgb(232,128,0)" fg:x="834" fg:w="34"/><text x="3.3100%" y="335.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (382 samples, 1.40%)</title><rect x="1.9446%" y="357" width="1.4016%" height="15" fill="rgb(207,160,47)" fg:x="530" fg:w="382"/><text x="2.1946%" y="367.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (276 samples, 1.01%)</title><rect x="2.3335%" y="341" width="1.0127%" height="15" fill="rgb(228,23,34)" fg:x="636" fg:w="276"/><text x="2.5835%" y="351.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (44 samples, 0.16%)</title><rect x="3.1847%" y="325" width="0.1614%" height="15" fill="rgb(218,30,26)" fg:x="868" fg:w="44"/><text x="3.4347%" y="335.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.02%)</title><rect x="3.3462%" y="357" width="0.0183%" height="15" fill="rgb(220,122,19)" fg:x="912" fg:w="5"/><text x="3.5962%" y="367.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.06%)</title><rect x="3.3645%" y="357" width="0.0587%" height="15" fill="rgb(250,228,42)" fg:x="917" fg:w="16"/><text x="3.6145%" y="367.50"></text></g><g><title>DYLD-STUB$$memcpy (22 samples, 0.08%)</title><rect x="3.4232%" y="357" width="0.0807%" height="15" fill="rgb(240,193,28)" fg:x="933" fg:w="22"/><text x="3.6732%" y="367.50"></text></g><g><title>_platform_memmove (156 samples, 0.57%)</title><rect x="3.5039%" y="357" width="0.5724%" height="15" fill="rgb(216,20,37)" fg:x="955" fg:w="156"/><text x="3.7539%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (616 samples, 2.26%)</title><rect x="4.0763%" y="357" width="2.2601%" height="15" fill="rgb(206,188,39)" fg:x="1111" fg:w="616"/><text x="4.3263%" y="367.50">a..</text></g><g><title>core::hint::assert_unchecked::precondition_check (41 samples, 0.15%)</title><rect x="6.1860%" y="341" width="0.1504%" height="15" fill="rgb(217,207,13)" fg:x="1686" fg:w="41"/><text x="6.4360%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (448 samples, 1.64%)</title><rect x="6.3365%" y="357" width="1.6437%" height="15" fill="rgb(231,73,38)" fg:x="1727" fg:w="448"/><text x="6.5865%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (265 samples, 0.97%)</title><rect x="7.9875%" y="357" width="0.9723%" height="15" fill="rgb(225,20,46)" fg:x="2177" fg:w="265"/><text x="8.2375%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (167 samples, 0.61%)</title><rect x="8.3471%" y="341" width="0.6127%" height="15" fill="rgb(210,31,41)" fg:x="2275" fg:w="167"/><text x="8.5971%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (41 samples, 0.15%)</title><rect x="8.8094%" y="325" width="0.1504%" height="15" fill="rgb(221,200,47)" fg:x="2401" fg:w="41"/><text x="9.0594%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (235 samples, 0.86%)</title><rect x="8.9598%" y="357" width="0.8622%" height="15" fill="rgb(226,26,5)" fg:x="2442" fg:w="235"/><text x="9.2098%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (193 samples, 0.71%)</title><rect x="9.1139%" y="341" width="0.7081%" height="15" fill="rgb(249,33,26)" fg:x="2484" fg:w="193"/><text x="9.3639%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (19 samples, 0.07%)</title><rect x="9.7523%" y="325" width="0.0697%" height="15" fill="rgb(235,183,28)" fg:x="2658" fg:w="19"/><text x="10.0023%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (121 samples, 0.44%)</title><rect x="9.8221%" y="357" width="0.4440%" height="15" fill="rgb(221,5,38)" fg:x="2677" fg:w="121"/><text x="10.0721%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (85 samples, 0.31%)</title><rect x="9.9541%" y="341" width="0.3119%" height="15" fill="rgb(247,18,42)" fg:x="2713" fg:w="85"/><text x="10.2041%" y="351.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (50 samples, 0.18%)</title><rect x="10.0826%" y="325" width="0.1835%" height="15" fill="rgb(241,131,45)" fg:x="2748" fg:w="50"/><text x="10.3326%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send&gt;&gt;&gt; (51 samples, 0.19%)</title><rect x="10.2660%" y="357" width="0.1871%" height="15" fill="rgb(249,31,29)" fg:x="2798" fg:w="51"/><text x="10.5160%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.02%)</title><rect x="10.9741%" y="341" width="0.0183%" height="15" fill="rgb(225,111,53)" fg:x="2991" fg:w="5"/><text x="11.2241%" y="351.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (24 samples, 0.09%)</title><rect x="12.2216%" y="325" width="0.0881%" height="15" fill="rgb(238,160,17)" fg:x="3331" fg:w="24"/><text x="12.4716%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.01%)</title><rect x="12.6619%" y="309" width="0.0110%" height="15" fill="rgb(214,148,48)" fg:x="3451" fg:w="3"/><text x="12.9119%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (857 samples, 3.14%)</title><rect x="13.2856%" y="277" width="3.1444%" height="15" fill="rgb(232,36,49)" fg:x="3621" fg:w="857"/><text x="13.5356%" y="287.50">&lt;co..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,128 samples, 11.48%)</title><rect x="12.6729%" y="309" width="11.4768%" height="15" fill="rgb(209,103,24)" fg:x="3454" fg:w="3128"/><text x="12.9229%" y="319.50">&lt;std::hash::rando..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,095 samples, 11.36%)</title><rect x="12.7940%" y="293" width="11.3557%" height="15" fill="rgb(229,88,8)" fg:x="3487" fg:w="3095"/><text x="13.0440%" y="303.50">&lt;core::hash::sip:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,104 samples, 7.72%)</title><rect x="16.4300%" y="277" width="7.7197%" height="15" fill="rgb(213,181,19)" fg:x="4478" fg:w="2104"/><text x="16.6800%" y="287.50">&lt;core::hash..</text></g><g><title>DYLD-STUB$$memcpy (72 samples, 0.26%)</title><rect x="25.1257%" y="293" width="0.2642%" height="15" fill="rgb(254,191,54)" fg:x="6848" fg:w="72"/><text x="25.3757%" y="303.50"></text></g><g><title>_platform_memmove (187 samples, 0.69%)</title><rect x="25.3898%" y="293" width="0.6861%" height="15" fill="rgb(241,83,37)" fg:x="6920" fg:w="187"/><text x="25.6398%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (687 samples, 2.52%)</title><rect x="24.1497%" y="309" width="2.5206%" height="15" fill="rgb(233,36,39)" fg:x="6582" fg:w="687"/><text x="24.3997%" y="319.50">&lt;s..</text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (162 samples, 0.59%)</title><rect x="26.0759%" y="293" width="0.5944%" height="15" fill="rgb(226,3,54)" fg:x="7107" fg:w="162"/><text x="26.3259%" y="303.50"></text></g><g><title>_platform_memmove (4 samples, 0.01%)</title><rect x="26.6703%" y="309" width="0.0147%" height="15" fill="rgb(245,192,40)" fg:x="7269" fg:w="4"/><text x="26.9203%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (563 samples, 2.07%)</title><rect x="29.7817%" y="229" width="2.0657%" height="15" fill="rgb(238,167,29)" fg:x="8117" fg:w="563"/><text x="30.0317%" y="239.50">&lt;..</text></g><g><title>core::hash::sip::u8to64_le (204 samples, 0.75%)</title><rect x="31.8474%" y="229" width="0.7485%" height="15" fill="rgb(232,182,51)" fg:x="8680" fg:w="204"/><text x="32.0974%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,292 samples, 8.41%)</title><rect x="27.5252%" y="245" width="8.4095%" height="15" fill="rgb(231,60,39)" fg:x="7502" fg:w="2292"/><text x="27.7752%" y="255.50">&lt;core::hash:..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (910 samples, 3.34%)</title><rect x="32.5959%" y="229" width="3.3388%" height="15" fill="rgb(208,69,12)" fg:x="8884" fg:w="910"/><text x="32.8459%" y="239.50">cor..</text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (272 samples, 1.00%)</title><rect x="34.9367%" y="213" width="0.9980%" height="15" fill="rgb(235,93,37)" fg:x="9522" fg:w="272"/><text x="35.1867%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6,463 samples, 23.71%)</title><rect x="12.3097%" y="325" width="23.7131%" height="15" fill="rgb(213,116,39)" fg:x="3355" fg:w="6463"/><text x="12.5597%" y="335.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (2,545 samples, 9.34%)</title><rect x="26.6850%" y="309" width="9.3377%" height="15" fill="rgb(222,207,29)" fg:x="7273" fg:w="2545"/><text x="26.9350%" y="319.50">core::hash::i..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (2,475 samples, 9.08%)</title><rect x="26.9418%" y="293" width="9.0809%" height="15" fill="rgb(206,96,30)" fg:x="7343" fg:w="2475"/><text x="27.1918%" y="303.50">core::hash::i..</text></g><g><title>core::hash::Hasher::write_usize (2,444 samples, 8.97%)</title><rect x="27.0556%" y="277" width="8.9672%" height="15" fill="rgb(218,138,4)" fg:x="7374" fg:w="2444"/><text x="27.3056%" y="287.50">core::hash::H..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2,379 samples, 8.73%)</title><rect x="27.2941%" y="261" width="8.7287%" height="15" fill="rgb(250,191,14)" fg:x="7439" fg:w="2379"/><text x="27.5441%" y="271.50">&lt;std::hash::..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (24 samples, 0.09%)</title><rect x="35.9347%" y="245" width="0.0881%" height="15" fill="rgb(239,60,40)" fg:x="9794" fg:w="24"/><text x="36.1847%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (17 samples, 0.06%)</title><rect x="42.0400%" y="293" width="0.0624%" height="15" fill="rgb(206,27,48)" fg:x="11458" fg:w="17"/><text x="42.2900%" y="303.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (1,689 samples, 6.20%)</title><rect x="41.8235%" y="309" width="6.1970%" height="15" fill="rgb(225,35,8)" fg:x="11399" fg:w="1689"/><text x="42.0735%" y="319.50">core::co..</text></g><g><title>core::ptr::read_unaligned (1,613 samples, 5.92%)</title><rect x="42.1024%" y="293" width="5.9182%" height="15" fill="rgb(250,213,24)" fg:x="11475" fg:w="1613"/><text x="42.3524%" y="303.50">core::pt..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1,410 samples, 5.17%)</title><rect x="42.8472%" y="277" width="5.1734%" height="15" fill="rgb(247,123,22)" fg:x="11678" fg:w="1410"/><text x="43.0972%" y="287.50">core::..</text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (540 samples, 1.98%)</title><rect x="46.0393%" y="261" width="1.9813%" height="15" fill="rgb(231,138,38)" fg:x="12548" fg:w="540"/><text x="46.2893%" y="271.50">c..</text></g><g><title>core::core_arch::arm_shared::neon::generated::vceq_u8 (10 samples, 0.04%)</title><rect x="48.7177%" y="293" width="0.0367%" height="15" fill="rgb(231,145,46)" fg:x="13278" fg:w="10"/><text x="48.9677%" y="303.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (23 samples, 0.08%)</title><rect x="48.7544%" y="293" width="0.0844%" height="15" fill="rgb(251,118,11)" fg:x="13288" fg:w="23"/><text x="49.0044%" y="303.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (70 samples, 0.26%)</title><rect x="48.8387%" y="293" width="0.2568%" height="15" fill="rgb(217,147,25)" fg:x="13311" fg:w="70"/><text x="49.0887%" y="303.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (348 samples, 1.28%)</title><rect x="48.0205%" y="309" width="1.2768%" height="15" fill="rgb(247,81,37)" fg:x="13088" fg:w="348"/><text x="48.2705%" y="319.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (55 samples, 0.20%)</title><rect x="49.0956%" y="293" width="0.2018%" height="15" fill="rgb(209,12,38)" fg:x="13381" fg:w="55"/><text x="49.3456%" y="303.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (72 samples, 0.26%)</title><rect x="51.4768%" y="261" width="0.2642%" height="15" fill="rgb(227,1,9)" fg:x="14030" fg:w="72"/><text x="51.7268%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (11,196 samples, 41.08%)</title><rect x="10.9925%" y="341" width="41.0787%" height="15" fill="rgb(248,47,43)" fg:x="2996" fg:w="11196"/><text x="11.2425%" y="351.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4,374 samples, 16.05%)</title><rect x="36.0227%" y="325" width="16.0484%" height="15" fill="rgb(221,10,30)" fg:x="9818" fg:w="4374"/><text x="36.2727%" y="335.50">hashbrown::raw::RawTable&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (756 samples, 2.77%)</title><rect x="49.2974%" y="309" width="2.7738%" height="15" fill="rgb(210,229,1)" fg:x="13436" fg:w="756"/><text x="49.5474%" y="319.50">ha..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (297 samples, 1.09%)</title><rect x="50.9815%" y="293" width="1.0897%" height="15" fill="rgb(222,148,37)" fg:x="13895" fg:w="297"/><text x="51.2315%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (230 samples, 0.84%)</title><rect x="51.2273%" y="277" width="0.8439%" height="15" fill="rgb(234,67,33)" fg:x="13962" fg:w="230"/><text x="51.4773%" y="287.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (90 samples, 0.33%)</title><rect x="51.7410%" y="261" width="0.3302%" height="15" fill="rgb(247,98,35)" fg:x="14102" fg:w="90"/><text x="51.9910%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (11,401 samples, 41.83%)</title><rect x="10.4605%" y="357" width="41.8309%" height="15" fill="rgb(247,138,52)" fg:x="2851" fg:w="11401"/><text x="10.7105%" y="367.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (60 samples, 0.22%)</title><rect x="52.0712%" y="341" width="0.2201%" height="15" fill="rgb(213,79,30)" fg:x="14192" fg:w="60"/><text x="52.3212%" y="351.50"></text></g><g><title>DYLD-STUB$$memcpy (36 samples, 0.13%)</title><rect x="52.8564%" y="341" width="0.1321%" height="15" fill="rgb(246,177,23)" fg:x="14406" fg:w="36"/><text x="53.1064%" y="351.50"></text></g><g><title>DYLD-STUB$$memcpy (26 samples, 0.10%)</title><rect x="53.8103%" y="293" width="0.0954%" height="15" fill="rgb(230,62,27)" fg:x="14666" fg:w="26"/><text x="54.0603%" y="303.50"></text></g><g><title>_platform_memmove (164 samples, 0.60%)</title><rect x="53.9057%" y="293" width="0.6017%" height="15" fill="rgb(216,154,8)" fg:x="14692" fg:w="164"/><text x="54.1557%" y="303.50"></text></g><g><title>bitbeat::Machine::run::_{{closure}} (19 samples, 0.07%)</title><rect x="54.5074%" y="293" width="0.0697%" height="15" fill="rgb(244,35,45)" fg:x="14856" fg:w="19"/><text x="54.7574%" y="303.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="54.8303%" y="277" width="0.0110%" height="15" fill="rgb(251,115,12)" fg:x="14944" fg:w="3"/><text x="55.0803%" y="287.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.08%)</title><rect x="56.4814%" y="261" width="0.0771%" height="15" fill="rgb(240,54,50)" fg:x="15394" fg:w="21"/><text x="56.7314%" y="271.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (19 samples, 0.07%)</title><rect x="56.5584%" y="261" width="0.0697%" height="15" fill="rgb(233,84,52)" fg:x="15415" fg:w="19"/><text x="56.8084%" y="271.50"></text></g><g><title>_platform_memmove (10 samples, 0.04%)</title><rect x="56.6281%" y="261" width="0.0367%" height="15" fill="rgb(207,117,47)" fg:x="15434" fg:w="10"/><text x="56.8781%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (30 samples, 0.11%)</title><rect x="56.6648%" y="261" width="0.1101%" height="15" fill="rgb(249,43,39)" fg:x="15444" fg:w="30"/><text x="56.9148%" y="271.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="56.8079%" y="245" width="0.0110%" height="15" fill="rgb(209,38,44)" fg:x="15483" fg:w="3"/><text x="57.0579%" y="255.50"></text></g><g><title>_platform_memmove (153 samples, 0.56%)</title><rect x="56.8189%" y="245" width="0.5614%" height="15" fill="rgb(236,212,23)" fg:x="15486" fg:w="153"/><text x="57.0689%" y="255.50"></text></g><g><title>_malloc_zone_malloc (8 samples, 0.03%)</title><rect x="57.5050%" y="197" width="0.0294%" height="15" fill="rgb(242,79,21)" fg:x="15673" fg:w="8"/><text x="57.7550%" y="207.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (33 samples, 0.12%)</title><rect x="57.5344%" y="197" width="0.1211%" height="15" fill="rgb(211,96,35)" fg:x="15681" fg:w="33"/><text x="57.7844%" y="207.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="57.6628%" y="181" width="0.0110%" height="15" fill="rgb(253,215,40)" fg:x="15716" fg:w="3"/><text x="57.9128%" y="191.50"></text></g><g><title>rack_get_thread_index (6 samples, 0.02%)</title><rect x="57.7105%" y="165" width="0.0220%" height="15" fill="rgb(211,81,21)" fg:x="15729" fg:w="6"/><text x="57.9605%" y="175.50"></text></g><g><title>alloc::alloc::alloc (88 samples, 0.32%)</title><rect x="57.4830%" y="213" width="0.3229%" height="15" fill="rgb(208,190,38)" fg:x="15667" fg:w="88"/><text x="57.7330%" y="223.50"></text></g><g><title>szone_malloc_should_clear (41 samples, 0.15%)</title><rect x="57.6555%" y="197" width="0.1504%" height="15" fill="rgb(235,213,38)" fg:x="15714" fg:w="41"/><text x="57.9055%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (36 samples, 0.13%)</title><rect x="57.6738%" y="181" width="0.1321%" height="15" fill="rgb(237,122,38)" fg:x="15719" fg:w="36"/><text x="57.9238%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (20 samples, 0.07%)</title><rect x="57.7325%" y="165" width="0.0734%" height="15" fill="rgb(244,218,35)" fg:x="15735" fg:w="20"/><text x="57.9825%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (4 samples, 0.01%)</title><rect x="57.8059%" y="213" width="0.0147%" height="15" fill="rgb(240,68,47)" fg:x="15755" fg:w="4"/><text x="58.0559%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (104 samples, 0.38%)</title><rect x="57.4463%" y="229" width="0.3816%" height="15" fill="rgb(210,16,53)" fg:x="15657" fg:w="104"/><text x="57.6963%" y="239.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (292 samples, 1.07%)</title><rect x="56.7749%" y="261" width="1.0714%" height="15" fill="rgb(235,124,12)" fg:x="15474" fg:w="292"/><text x="57.0249%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (125 samples, 0.46%)</title><rect x="57.3876%" y="245" width="0.4586%" height="15" fill="rgb(224,169,11)" fg:x="15641" fg:w="125"/><text x="57.6376%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (5 samples, 0.02%)</title><rect x="57.8279%" y="229" width="0.0183%" height="15" fill="rgb(250,166,2)" fg:x="15761" fg:w="5"/><text x="58.0779%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (50 samples, 0.18%)</title><rect x="59.9340%" y="245" width="0.1835%" height="15" fill="rgb(242,216,29)" fg:x="16335" fg:w="50"/><text x="60.1840%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (123 samples, 0.45%)</title><rect x="60.6861%" y="229" width="0.4513%" height="15" fill="rgb(230,116,27)" fg:x="16540" fg:w="123"/><text x="60.9361%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (557 samples, 2.04%)</title><rect x="60.1174%" y="245" width="2.0437%" height="15" fill="rgb(228,99,48)" fg:x="16385" fg:w="557"/><text x="60.3674%" y="255.50">&lt;..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (279 samples, 1.02%)</title><rect x="61.1374%" y="229" width="1.0237%" height="15" fill="rgb(253,11,6)" fg:x="16663" fg:w="279"/><text x="61.3874%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (32 samples, 0.12%)</title><rect x="62.1721%" y="245" width="0.1174%" height="15" fill="rgb(247,143,39)" fg:x="16945" fg:w="32"/><text x="62.4221%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.02%)</title><rect x="62.4252%" y="229" width="0.0183%" height="15" fill="rgb(236,97,10)" fg:x="17014" fg:w="5"/><text x="62.6752%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (19 samples, 0.07%)</title><rect x="62.4436%" y="229" width="0.0697%" height="15" fill="rgb(233,208,19)" fg:x="17019" fg:w="19"/><text x="62.6936%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.04%)</title><rect x="62.4766%" y="213" width="0.0367%" height="15" fill="rgb(216,164,2)" fg:x="17028" fg:w="10"/><text x="62.7266%" y="223.50"></text></g><g><title>bitbeat::handle_add (60 samples, 0.22%)</title><rect x="62.2968%" y="245" width="0.2201%" height="15" fill="rgb(220,129,5)" fg:x="16979" fg:w="60"/><text x="62.5468%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.04%)</title><rect x="62.6674%" y="229" width="0.0367%" height="15" fill="rgb(242,17,10)" fg:x="17080" fg:w="10"/><text x="62.9174%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="62.7518%" y="213" width="0.0147%" height="15" fill="rgb(242,107,0)" fg:x="17103" fg:w="4"/><text x="63.0018%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (47 samples, 0.17%)</title><rect x="62.7041%" y="229" width="0.1724%" height="15" fill="rgb(251,28,31)" fg:x="17090" fg:w="47"/><text x="62.9541%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (30 samples, 0.11%)</title><rect x="62.7665%" y="213" width="0.1101%" height="15" fill="rgb(233,223,10)" fg:x="17107" fg:w="30"/><text x="63.0165%" y="223.50"></text></g><g><title>bitbeat::handle_cmp_le (102 samples, 0.37%)</title><rect x="62.5170%" y="245" width="0.3742%" height="15" fill="rgb(215,21,27)" fg:x="17039" fg:w="102"/><text x="62.7670%" y="255.50"></text></g><g><title>bitbeat::handle_halt (5 samples, 0.02%)</title><rect x="62.8912%" y="245" width="0.0183%" height="15" fill="rgb(232,23,21)" fg:x="17141" fg:w="5"/><text x="63.1412%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (29 samples, 0.11%)</title><rect x="63.1077%" y="229" width="0.1064%" height="15" fill="rgb(244,5,23)" fg:x="17200" fg:w="29"/><text x="63.3577%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (22 samples, 0.08%)</title><rect x="63.1334%" y="213" width="0.0807%" height="15" fill="rgb(226,81,46)" fg:x="17207" fg:w="22"/><text x="63.3834%" y="223.50"></text></g><g><title> N]&gt;::try_from (22 samples, 0.08%)</title><rect x="63.1334%" y="197" width="0.0807%" height="15" fill="rgb(247,70,30)" fg:x="17207" fg:w="22"/><text x="63.3834%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="63.2581%" y="213" width="0.0147%" height="15" fill="rgb(212,68,19)" fg:x="17241" fg:w="4"/><text x="63.5081%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (26 samples, 0.10%)</title><rect x="63.2214%" y="229" width="0.0954%" height="15" fill="rgb(240,187,13)" fg:x="17231" fg:w="26"/><text x="63.4714%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (12 samples, 0.04%)</title><rect x="63.2728%" y="213" width="0.0440%" height="15" fill="rgb(223,113,26)" fg:x="17245" fg:w="12"/><text x="63.5228%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.03%)</title><rect x="63.3168%" y="229" width="0.0330%" height="15" fill="rgb(206,192,2)" fg:x="17257" fg:w="9"/><text x="63.5668%" y="239.50"></text></g><g><title>bitbeat::handle_jump_if (126 samples, 0.46%)</title><rect x="62.9096%" y="245" width="0.4623%" height="15" fill="rgb(241,108,4)" fg:x="17146" fg:w="126"/><text x="63.1596%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (34 samples, 0.12%)</title><rect x="63.9075%" y="229" width="0.1247%" height="15" fill="rgb(247,173,49)" fg:x="17418" fg:w="34"/><text x="64.1575%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (30 samples, 0.11%)</title><rect x="63.9222%" y="213" width="0.1101%" height="15" fill="rgb(224,114,35)" fg:x="17422" fg:w="30"/><text x="64.1722%" y="223.50"></text></g><g><title> N]&gt;::try_from (30 samples, 0.11%)</title><rect x="63.9222%" y="197" width="0.1101%" height="15" fill="rgb(245,159,27)" fg:x="17422" fg:w="30"/><text x="64.1722%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (15 samples, 0.06%)</title><rect x="64.0323%" y="229" width="0.0550%" height="15" fill="rgb(245,172,44)" fg:x="17452" fg:w="15"/><text x="64.2823%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.01%)</title><rect x="64.2011%" y="213" width="0.0147%" height="15" fill="rgb(236,23,11)" fg:x="17498" fg:w="4"/><text x="64.4511%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (77 samples, 0.28%)</title><rect x="64.0873%" y="229" width="0.2825%" height="15" fill="rgb(205,117,38)" fg:x="17467" fg:w="77"/><text x="64.3373%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (42 samples, 0.15%)</title><rect x="64.2157%" y="213" width="0.1541%" height="15" fill="rgb(237,72,25)" fg:x="17502" fg:w="42"/><text x="64.4657%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.07%)</title><rect x="64.3698%" y="229" width="0.0660%" height="15" fill="rgb(244,70,9)" fg:x="17544" fg:w="18"/><text x="64.6198%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.01%)</title><rect x="64.4359%" y="229" width="0.0110%" height="15" fill="rgb(217,125,39)" fg:x="17562" fg:w="3"/><text x="64.6859%" y="239.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_le_bytes (5 samples, 0.02%)</title><rect x="64.4469%" y="229" width="0.0183%" height="15" fill="rgb(235,36,10)" fg:x="17565" fg:w="5"/><text x="64.6969%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;i64,anyhow::Error&gt;&gt; (3 samples, 0.01%)</title><rect x="64.4652%" y="229" width="0.0110%" height="15" fill="rgb(251,123,47)" fg:x="17570" fg:w="3"/><text x="64.7152%" y="239.50"></text></g><g><title>bitbeat::handle_load_imm (306 samples, 1.12%)</title><rect x="63.3719%" y="245" width="1.1227%" height="15" fill="rgb(221,13,13)" fg:x="17272" fg:w="306"/><text x="63.6219%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (5 samples, 0.02%)</title><rect x="64.4762%" y="229" width="0.0183%" height="15" fill="rgb(238,131,9)" fg:x="17573" fg:w="5"/><text x="64.7262%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (52 samples, 0.19%)</title><rect x="66.0429%" y="229" width="0.1908%" height="15" fill="rgb(211,50,8)" fg:x="18000" fg:w="52"/><text x="66.2929%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (93 samples, 0.34%)</title><rect x="66.6997%" y="213" width="0.3412%" height="15" fill="rgb(245,182,24)" fg:x="18179" fg:w="93"/><text x="66.9497%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (422 samples, 1.55%)</title><rect x="66.2337%" y="229" width="1.5483%" height="15" fill="rgb(242,14,37)" fg:x="18052" fg:w="422"/><text x="66.4837%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (202 samples, 0.74%)</title><rect x="67.0409%" y="213" width="0.7411%" height="15" fill="rgb(246,228,12)" fg:x="18272" fg:w="202"/><text x="67.2909%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (131 samples, 0.48%)</title><rect x="67.7821%" y="229" width="0.4806%" height="15" fill="rgb(213,55,15)" fg:x="18474" fg:w="131"/><text x="68.0321%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (21 samples, 0.08%)</title><rect x="68.2627%" y="229" width="0.0771%" height="15" fill="rgb(209,9,3)" fg:x="18605" fg:w="21"/><text x="68.5127%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (47 samples, 0.17%)</title><rect x="68.3398%" y="229" width="0.1724%" height="15" fill="rgb(230,59,30)" fg:x="18626" fg:w="47"/><text x="68.5898%" y="239.50"></text></g><g><title>bitbeat::handle_recv (1,096 samples, 4.02%)</title><rect x="64.4946%" y="245" width="4.0213%" height="15" fill="rgb(209,121,21)" fg:x="17578" fg:w="1096"/><text x="64.7446%" y="255.50">bitb..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.01%)</title><rect x="68.7177%" y="229" width="0.0147%" height="15" fill="rgb(220,109,13)" fg:x="18729" fg:w="4"/><text x="68.9677%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.03%)</title><rect x="68.7764%" y="213" width="0.0294%" height="15" fill="rgb(232,18,1)" fg:x="18745" fg:w="8"/><text x="69.0264%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (34 samples, 0.12%)</title><rect x="68.7323%" y="229" width="0.1247%" height="15" fill="rgb(215,41,42)" fg:x="18733" fg:w="34"/><text x="68.9823%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (14 samples, 0.05%)</title><rect x="68.8057%" y="213" width="0.0514%" height="15" fill="rgb(224,123,36)" fg:x="18753" fg:w="14"/><text x="69.0557%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (4 samples, 0.01%)</title><rect x="69.0002%" y="197" width="0.0147%" height="15" fill="rgb(240,125,3)" fg:x="18806" fg:w="4"/><text x="69.2502%" y="207.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="69.0516%" y="149" width="0.0110%" height="15" fill="rgb(205,98,50)" fg:x="18820" fg:w="3"/><text x="69.3016%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (17 samples, 0.06%)</title><rect x="69.0222%" y="181" width="0.0624%" height="15" fill="rgb(205,185,37)" fg:x="18812" fg:w="17"/><text x="69.2722%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.06%)</title><rect x="69.0295%" y="165" width="0.0550%" height="15" fill="rgb(238,207,15)" fg:x="18814" fg:w="15"/><text x="69.2795%" y="175.50"></text></g><g><title>nanov2_malloc_type (6 samples, 0.02%)</title><rect x="69.0626%" y="149" width="0.0220%" height="15" fill="rgb(213,199,42)" fg:x="18823" fg:w="6"/><text x="69.3126%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (63 samples, 0.23%)</title><rect x="68.8571%" y="229" width="0.2312%" height="15" fill="rgb(235,201,11)" fg:x="18767" fg:w="63"/><text x="69.1071%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (26 samples, 0.10%)</title><rect x="68.9928%" y="213" width="0.0954%" height="15" fill="rgb(207,46,11)" fg:x="18804" fg:w="26"/><text x="69.2428%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 0.07%)</title><rect x="69.0149%" y="197" width="0.0734%" height="15" fill="rgb(241,35,35)" fg:x="18810" fg:w="20"/><text x="69.2649%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (18 samples, 0.07%)</title><rect x="69.0956%" y="229" width="0.0660%" height="15" fill="rgb(243,32,47)" fg:x="18832" fg:w="18"/><text x="69.3456%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (10 samples, 0.04%)</title><rect x="69.1249%" y="213" width="0.0367%" height="15" fill="rgb(247,202,23)" fg:x="18840" fg:w="10"/><text x="69.3749%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (4 samples, 0.01%)</title><rect x="69.1616%" y="229" width="0.0147%" height="15" fill="rgb(219,102,11)" fg:x="18850" fg:w="4"/><text x="69.4116%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.01%)</title><rect x="69.1653%" y="213" width="0.0110%" height="15" fill="rgb(243,110,44)" fg:x="18851" fg:w="3"/><text x="69.4153%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (4 samples, 0.01%)</title><rect x="69.1763%" y="229" width="0.0147%" height="15" fill="rgb(222,74,54)" fg:x="18854" fg:w="4"/><text x="69.4263%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.01%)</title><rect x="69.2827%" y="197" width="0.0147%" height="15" fill="rgb(216,99,12)" fg:x="18883" fg:w="4"/><text x="69.5327%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 0.10%)</title><rect x="69.3194%" y="149" width="0.1027%" height="15" fill="rgb(226,22,26)" fg:x="18893" fg:w="28"/><text x="69.5694%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (129 samples, 0.47%)</title><rect x="69.3010%" y="181" width="0.4733%" height="15" fill="rgb(217,163,10)" fg:x="18888" fg:w="129"/><text x="69.5510%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (129 samples, 0.47%)</title><rect x="69.3010%" y="165" width="0.4733%" height="15" fill="rgb(213,25,53)" fg:x="18888" fg:w="129"/><text x="69.5510%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (96 samples, 0.35%)</title><rect x="69.4221%" y="149" width="0.3522%" height="15" fill="rgb(252,105,26)" fg:x="18921" fg:w="96"/><text x="69.6721%" y="159.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="69.8074%" y="165" width="0.0183%" height="15" fill="rgb(220,39,43)" fg:x="19026" fg:w="5"/><text x="70.0574%" y="175.50"></text></g><g><title>_platform_memmove (7 samples, 0.03%)</title><rect x="69.8257%" y="165" width="0.0257%" height="15" fill="rgb(229,68,48)" fg:x="19031" fg:w="7"/><text x="70.0757%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (24 samples, 0.09%)</title><rect x="69.7744%" y="181" width="0.0881%" height="15" fill="rgb(252,8,32)" fg:x="19017" fg:w="24"/><text x="70.0244%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.01%)</title><rect x="69.8514%" y="165" width="0.0110%" height="15" fill="rgb(223,20,43)" fg:x="19038" fg:w="3"/><text x="70.1014%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (19 samples, 0.07%)</title><rect x="69.9762%" y="101" width="0.0697%" height="15" fill="rgb(229,81,49)" fg:x="19072" fg:w="19"/><text x="70.2262%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.03%)</title><rect x="70.0459%" y="101" width="0.0257%" height="15" fill="rgb(236,28,36)" fg:x="19091" fg:w="7"/><text x="70.2959%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (110 samples, 0.40%)</title><rect x="69.9101%" y="117" width="0.4036%" height="15" fill="rgb(249,185,26)" fg:x="19054" fg:w="110"/><text x="70.1601%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (66 samples, 0.24%)</title><rect x="70.0715%" y="101" width="0.2422%" height="15" fill="rgb(249,174,33)" fg:x="19098" fg:w="66"/><text x="70.3215%" y="111.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (9 samples, 0.03%)</title><rect x="70.2807%" y="85" width="0.0330%" height="15" fill="rgb(233,201,37)" fg:x="19155" fg:w="9"/><text x="70.5307%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (279 samples, 1.02%)</title><rect x="69.2974%" y="197" width="1.0237%" height="15" fill="rgb(221,78,26)" fg:x="18887" fg:w="279"/><text x="69.5474%" y="207.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (125 samples, 0.46%)</title><rect x="69.8624%" y="181" width="0.4586%" height="15" fill="rgb(250,127,30)" fg:x="19041" fg:w="125"/><text x="70.1124%" y="191.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (120 samples, 0.44%)</title><rect x="69.8808%" y="165" width="0.4403%" height="15" fill="rgb(230,49,44)" fg:x="19046" fg:w="120"/><text x="70.1308%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (119 samples, 0.44%)</title><rect x="69.8844%" y="149" width="0.4366%" height="15" fill="rgb(229,67,23)" fg:x="19047" fg:w="119"/><text x="70.1344%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (116 samples, 0.43%)</title><rect x="69.8954%" y="133" width="0.4256%" height="15" fill="rgb(249,83,47)" fg:x="19050" fg:w="116"/><text x="70.1454%" y="143.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (76 samples, 0.28%)</title><rect x="70.6329%" y="181" width="0.2788%" height="15" fill="rgb(215,43,3)" fg:x="19251" fg:w="76"/><text x="70.8829%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (71 samples, 0.26%)</title><rect x="70.6513%" y="165" width="0.2605%" height="15" fill="rgb(238,154,13)" fg:x="19256" fg:w="71"/><text x="70.9013%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (58 samples, 0.21%)</title><rect x="70.6990%" y="149" width="0.2128%" height="15" fill="rgb(219,56,2)" fg:x="19269" fg:w="58"/><text x="70.9490%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (27 samples, 0.10%)</title><rect x="70.8127%" y="133" width="0.0991%" height="15" fill="rgb(233,0,4)" fg:x="19300" fg:w="27"/><text x="71.0627%" y="143.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (4 samples, 0.01%)</title><rect x="70.9521%" y="165" width="0.0147%" height="15" fill="rgb(235,30,7)" fg:x="19338" fg:w="4"/><text x="71.2021%" y="175.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (16 samples, 0.06%)</title><rect x="70.9118%" y="181" width="0.0587%" height="15" fill="rgb(250,79,13)" fg:x="19327" fg:w="16"/><text x="71.1618%" y="191.50"></text></g><g><title>bitbeat::handle_send (698 samples, 2.56%)</title><rect x="68.5159%" y="245" width="2.5610%" height="15" fill="rgb(211,146,34)" fg:x="18674" fg:w="698"/><text x="68.7659%" y="255.50">bi..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (514 samples, 1.89%)</title><rect x="69.1910%" y="229" width="1.8859%" height="15" fill="rgb(228,22,38)" fg:x="18858" fg:w="514"/><text x="69.4410%" y="239.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (508 samples, 1.86%)</title><rect x="69.2130%" y="213" width="1.8639%" height="15" fill="rgb(235,168,5)" fg:x="18864" fg:w="508"/><text x="69.4630%" y="223.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (206 samples, 0.76%)</title><rect x="70.3210%" y="197" width="0.7558%" height="15" fill="rgb(221,155,16)" fg:x="19166" fg:w="206"/><text x="70.5710%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (29 samples, 0.11%)</title><rect x="70.9705%" y="181" width="0.1064%" height="15" fill="rgb(215,215,53)" fg:x="19343" fg:w="29"/><text x="71.2205%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (10 samples, 0.04%)</title><rect x="71.0402%" y="165" width="0.0367%" height="15" fill="rgb(223,4,10)" fg:x="19362" fg:w="10"/><text x="71.2902%" y="175.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (7 samples, 0.03%)</title><rect x="71.0512%" y="149" width="0.0257%" height="15" fill="rgb(234,103,6)" fg:x="19365" fg:w="7"/><text x="71.3012%" y="159.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (3 samples, 0.01%)</title><rect x="71.0659%" y="133" width="0.0110%" height="15" fill="rgb(227,97,0)" fg:x="19369" fg:w="3"/><text x="71.3159%" y="143.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (95 samples, 0.35%)</title><rect x="72.1409%" y="229" width="0.3486%" height="15" fill="rgb(234,150,53)" fg:x="19662" fg:w="95"/><text x="72.3909%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (81 samples, 0.30%)</title><rect x="72.1923%" y="213" width="0.2972%" height="15" fill="rgb(228,201,54)" fg:x="19676" fg:w="81"/><text x="72.4423%" y="223.50"></text></g><g><title> N]&gt;::try_from (81 samples, 0.30%)</title><rect x="72.1923%" y="197" width="0.2972%" height="15" fill="rgb(222,22,37)" fg:x="19676" fg:w="81"/><text x="72.4423%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (29 samples, 0.11%)</title><rect x="72.4895%" y="229" width="0.1064%" height="15" fill="rgb(237,53,32)" fg:x="19757" fg:w="29"/><text x="72.7395%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.04%)</title><rect x="72.5959%" y="229" width="0.0404%" height="15" fill="rgb(233,25,53)" fg:x="19786" fg:w="11"/><text x="72.8459%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (31 samples, 0.11%)</title><rect x="72.6362%" y="229" width="0.1137%" height="15" fill="rgb(210,40,34)" fg:x="19797" fg:w="31"/><text x="72.8862%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (27 samples, 0.10%)</title><rect x="72.6509%" y="213" width="0.0991%" height="15" fill="rgb(241,220,44)" fg:x="19801" fg:w="27"/><text x="72.9009%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (18 samples, 0.07%)</title><rect x="72.6839%" y="197" width="0.0660%" height="15" fill="rgb(235,28,35)" fg:x="19810" fg:w="18"/><text x="72.9339%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (250 samples, 0.92%)</title><rect x="72.7500%" y="229" width="0.9173%" height="15" fill="rgb(210,56,17)" fg:x="19828" fg:w="250"/><text x="73.0000%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (66 samples, 0.24%)</title><rect x="73.4251%" y="213" width="0.2422%" height="15" fill="rgb(224,130,29)" fg:x="20012" fg:w="66"/><text x="73.6751%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (77 samples, 0.28%)</title><rect x="73.6672%" y="229" width="0.2825%" height="15" fill="rgb(235,212,8)" fg:x="20078" fg:w="77"/><text x="73.9172%" y="239.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.01%)</title><rect x="73.9497%" y="229" width="0.0147%" height="15" fill="rgb(223,33,50)" fg:x="20155" fg:w="4"/><text x="74.1997%" y="239.50"></text></g><g><title>_platform_memmove (20 samples, 0.07%)</title><rect x="73.9644%" y="229" width="0.0734%" height="15" fill="rgb(219,149,13)" fg:x="20159" fg:w="20"/><text x="74.2144%" y="239.50"></text></g><g><title>DYLD-STUB$$memcpy (5 samples, 0.02%)</title><rect x="74.1809%" y="197" width="0.0183%" height="15" fill="rgb(250,156,29)" fg:x="20218" fg:w="5"/><text x="74.4309%" y="207.50"></text></g><g><title>_platform_memmove (11 samples, 0.04%)</title><rect x="74.1992%" y="197" width="0.0404%" height="15" fill="rgb(216,193,19)" fg:x="20223" fg:w="11"/><text x="74.4492%" y="207.50"></text></g><g><title>DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="74.8083%" y="165" width="0.0183%" height="15" fill="rgb(216,135,14)" fg:x="20389" fg:w="5"/><text x="75.0583%" y="175.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="74.8266%" y="165" width="0.0110%" height="15" fill="rgb(241,47,5)" fg:x="20394" fg:w="3"/><text x="75.0766%" y="175.50"></text></g><g><title>_malloc_zone_malloc (19 samples, 0.07%)</title><rect x="74.8376%" y="165" width="0.0697%" height="15" fill="rgb(233,42,35)" fg:x="20397" fg:w="19"/><text x="75.0876%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (80 samples, 0.29%)</title><rect x="74.7129%" y="181" width="0.2935%" height="15" fill="rgb(231,13,6)" fg:x="20363" fg:w="80"/><text x="74.9629%" y="191.50"></text></g><g><title>nanov2_malloc_type (27 samples, 0.10%)</title><rect x="74.9074%" y="165" width="0.0991%" height="15" fill="rgb(207,181,40)" fg:x="20416" fg:w="27"/><text x="75.1574%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (210 samples, 0.77%)</title><rect x="74.2433%" y="197" width="0.7705%" height="15" fill="rgb(254,173,49)" fg:x="20235" fg:w="210"/><text x="74.4933%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (364 samples, 1.34%)</title><rect x="74.0855%" y="213" width="1.3355%" height="15" fill="rgb(221,1,38)" fg:x="20192" fg:w="364"/><text x="74.3355%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (111 samples, 0.41%)</title><rect x="75.0138%" y="197" width="0.4073%" height="15" fill="rgb(206,124,46)" fg:x="20445" fg:w="111"/><text x="75.2638%" y="207.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (43 samples, 0.16%)</title><rect x="75.2633%" y="181" width="0.1578%" height="15" fill="rgb(249,21,11)" fg:x="20513" fg:w="43"/><text x="75.5133%" y="191.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec (381 samples, 1.40%)</title><rect x="74.0378%" y="229" width="1.3979%" height="15" fill="rgb(222,201,40)" fg:x="20179" fg:w="381"/><text x="74.2878%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.01%)</title><rect x="75.4210%" y="213" width="0.0147%" height="15" fill="rgb(235,61,29)" fg:x="20556" fg:w="4"/><text x="75.6710%" y="223.50"></text></g><g><title>alloc::string::String::as_str (33 samples, 0.12%)</title><rect x="75.4357%" y="229" width="0.1211%" height="15" fill="rgb(219,207,3)" fg:x="20560" fg:w="33"/><text x="75.6857%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (11 samples, 0.04%)</title><rect x="75.5164%" y="213" width="0.0404%" height="15" fill="rgb(222,56,46)" fg:x="20582" fg:w="11"/><text x="75.7664%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (17 samples, 0.06%)</title><rect x="75.6705%" y="213" width="0.0624%" height="15" fill="rgb(239,76,54)" fg:x="20624" fg:w="17"/><text x="75.9205%" y="223.50"></text></g><g><title>alloc::string::String::from_utf8 (63 samples, 0.23%)</title><rect x="75.5568%" y="229" width="0.2312%" height="15" fill="rgb(231,124,27)" fg:x="20593" fg:w="63"/><text x="75.8068%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (15 samples, 0.06%)</title><rect x="75.7329%" y="213" width="0.0550%" height="15" fill="rgb(249,195,6)" fg:x="20641" fg:w="15"/><text x="75.9829%" y="223.50"></text></g><g><title>_platform_memmove (6 samples, 0.02%)</title><rect x="75.8943%" y="213" width="0.0220%" height="15" fill="rgb(237,174,47)" fg:x="20685" fg:w="6"/><text x="76.1443%" y="223.50"></text></g><g><title>_nanov2_free (9 samples, 0.03%)</title><rect x="76.0521%" y="117" width="0.0330%" height="15" fill="rgb(206,201,31)" fg:x="20728" fg:w="9"/><text x="76.3021%" y="127.50"></text></g><g><title>_platform_memmove (9 samples, 0.03%)</title><rect x="76.0851%" y="117" width="0.0330%" height="15" fill="rgb(231,57,52)" fg:x="20737" fg:w="9"/><text x="76.3351%" y="127.50"></text></g><g><title>nanov2_malloc (31 samples, 0.11%)</title><rect x="76.1181%" y="117" width="0.1137%" height="15" fill="rgb(248,177,22)" fg:x="20746" fg:w="31"/><text x="76.3681%" y="127.50"></text></g><g><title>nanov2_allocate_outlined (12 samples, 0.04%)</title><rect x="76.1879%" y="101" width="0.0440%" height="15" fill="rgb(215,211,37)" fg:x="20765" fg:w="12"/><text x="76.4379%" y="111.50"></text></g><g><title>nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="76.2209%" y="85" width="0.0110%" height="15" fill="rgb(241,128,51)" fg:x="20774" fg:w="3"/><text x="76.4709%" y="95.50"></text></g><g><title>_malloc_zone_realloc (72 samples, 0.26%)</title><rect x="75.9934%" y="149" width="0.2642%" height="15" fill="rgb(227,165,31)" fg:x="20712" fg:w="72"/><text x="76.2434%" y="159.50"></text></g><g><title>nanov2_realloc (62 samples, 0.23%)</title><rect x="76.0301%" y="133" width="0.2275%" height="15" fill="rgb(228,167,24)" fg:x="20722" fg:w="62"/><text x="76.2801%" y="143.50"></text></g><g><title>nanov2_pointer_size (7 samples, 0.03%)</title><rect x="76.2319%" y="117" width="0.0257%" height="15" fill="rgb(228,143,12)" fg:x="20777" fg:w="7"/><text x="76.4819%" y="127.50"></text></g><g><title>_realloc (89 samples, 0.33%)</title><rect x="75.9604%" y="165" width="0.3265%" height="15" fill="rgb(249,149,8)" fg:x="20703" fg:w="89"/><text x="76.2104%" y="175.50"></text></g><g><title>nanov2_size (6 samples, 0.02%)</title><rect x="76.2649%" y="149" width="0.0220%" height="15" fill="rgb(243,35,44)" fg:x="20786" fg:w="6"/><text x="76.5149%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (99 samples, 0.36%)</title><rect x="75.9274%" y="197" width="0.3632%" height="15" fill="rgb(246,89,9)" fg:x="20694" fg:w="99"/><text x="76.1774%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (90 samples, 0.33%)</title><rect x="75.9604%" y="181" width="0.3302%" height="15" fill="rgb(233,213,13)" fg:x="20703" fg:w="90"/><text x="76.2104%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (104 samples, 0.38%)</title><rect x="75.9163%" y="213" width="0.3816%" height="15" fill="rgb(233,141,41)" fg:x="20691" fg:w="104"/><text x="76.1663%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (165 samples, 0.61%)</title><rect x="75.7879%" y="229" width="0.6054%" height="15" fill="rgb(239,167,4)" fg:x="20656" fg:w="165"/><text x="76.0379%" y="239.50"></text></g><g><title>core::intrinsics::copy::precondition_check (25 samples, 0.09%)</title><rect x="76.3016%" y="213" width="0.0917%" height="15" fill="rgb(209,217,16)" fg:x="20796" fg:w="25"/><text x="76.5516%" y="223.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.07%)</title><rect x="76.5034%" y="213" width="0.0660%" height="15" fill="rgb(219,88,35)" fg:x="20851" fg:w="18"/><text x="76.7534%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.26%)</title><rect x="76.5694%" y="213" width="0.2568%" height="15" fill="rgb(220,193,23)" fg:x="20869" fg:w="70"/><text x="76.8194%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.13%)</title><rect x="76.6942%" y="197" width="0.1321%" height="15" fill="rgb(230,90,52)" fg:x="20903" fg:w="36"/><text x="76.9442%" y="207.50"></text></g><g><title>_platform_memmove (22 samples, 0.08%)</title><rect x="76.8336%" y="213" width="0.0807%" height="15" fill="rgb(252,106,19)" fg:x="20941" fg:w="22"/><text x="77.0836%" y="223.50"></text></g><g><title>_platform_memset (3 samples, 0.01%)</title><rect x="76.9143%" y="213" width="0.0110%" height="15" fill="rgb(206,74,20)" fg:x="20963" fg:w="3"/><text x="77.1643%" y="223.50"></text></g><g><title>bitbeat::Process::new (145 samples, 0.53%)</title><rect x="76.4007%" y="229" width="0.5320%" height="15" fill="rgb(230,138,44)" fg:x="20823" fg:w="145"/><text x="76.6507%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (57 samples, 0.21%)</title><rect x="77.0464%" y="133" width="0.2091%" height="15" fill="rgb(235,182,43)" fg:x="20999" fg:w="57"/><text x="77.2964%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (57 samples, 0.21%)</title><rect x="77.0464%" y="117" width="0.2091%" height="15" fill="rgb(242,16,51)" fg:x="20999" fg:w="57"/><text x="77.2964%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (11 samples, 0.04%)</title><rect x="77.2152%" y="101" width="0.0404%" height="15" fill="rgb(248,9,4)" fg:x="21045" fg:w="11"/><text x="77.4652%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.04%)</title><rect x="77.2555%" y="133" width="0.0367%" height="15" fill="rgb(210,31,22)" fg:x="21056" fg:w="10"/><text x="77.5055%" y="143.50"></text></g><g><title>bitbeat::handle_spawn::_{{closure}} (3 samples, 0.01%)</title><rect x="77.4537%" y="69" width="0.0110%" height="15" fill="rgb(239,54,39)" fg:x="21110" fg:w="3"/><text x="77.7037%" y="79.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7 samples, 0.03%)</title><rect x="77.4463%" y="85" width="0.0257%" height="15" fill="rgb(230,99,41)" fg:x="21108" fg:w="7"/><text x="77.6963%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;&amp;u8,i64,(),bitbeat::handle_spawn::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (7 samples, 0.03%)</title><rect x="77.4794%" y="85" width="0.0257%" height="15" fill="rgb(253,106,12)" fg:x="21117" fg:w="7"/><text x="77.7294%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (4 samples, 0.01%)</title><rect x="77.4904%" y="69" width="0.0147%" height="15" fill="rgb(213,46,41)" fg:x="21120" fg:w="4"/><text x="77.7404%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt; (4 samples, 0.01%)</title><rect x="77.4904%" y="53" width="0.0147%" height="15" fill="rgb(215,133,35)" fg:x="21120" fg:w="4"/><text x="77.7404%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (3 samples, 0.01%)</title><rect x="77.4940%" y="37" width="0.0110%" height="15" fill="rgb(213,28,5)" fg:x="21121" fg:w="3"/><text x="77.7440%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (149 samples, 0.55%)</title><rect x="77.0097%" y="165" width="0.5467%" height="15" fill="rgb(215,77,49)" fg:x="20989" fg:w="149"/><text x="77.2597%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (148 samples, 0.54%)</title><rect x="77.0134%" y="149" width="0.5430%" height="15" fill="rgb(248,100,22)" fg:x="20990" fg:w="148"/><text x="77.2634%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (72 samples, 0.26%)</title><rect x="77.2922%" y="133" width="0.2642%" height="15" fill="rgb(208,67,9)" fg:x="21066" fg:w="72"/><text x="77.5422%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67 samples, 0.25%)</title><rect x="77.3106%" y="117" width="0.2458%" height="15" fill="rgb(219,133,21)" fg:x="21071" fg:w="67"/><text x="77.5606%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60 samples, 0.22%)</title><rect x="77.3363%" y="101" width="0.2201%" height="15" fill="rgb(246,46,29)" fg:x="21078" fg:w="60"/><text x="77.5863%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (14 samples, 0.05%)</title><rect x="77.5050%" y="85" width="0.0514%" height="15" fill="rgb(246,185,52)" fg:x="21124" fg:w="14"/><text x="77.7550%" y="95.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (13 samples, 0.05%)</title><rect x="77.5087%" y="69" width="0.0477%" height="15" fill="rgb(252,136,11)" fg:x="21125" fg:w="13"/><text x="77.7587%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (21 samples, 0.08%)</title><rect x="77.5564%" y="165" width="0.0771%" height="15" fill="rgb(219,138,53)" fg:x="21138" fg:w="21"/><text x="77.8064%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.07%)</title><rect x="77.5601%" y="149" width="0.0734%" height="15" fill="rgb(211,51,23)" fg:x="21139" fg:w="20"/><text x="77.8101%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (14 samples, 0.05%)</title><rect x="77.5821%" y="133" width="0.0514%" height="15" fill="rgb(247,221,28)" fg:x="21145" fg:w="14"/><text x="77.8321%" y="143.50"></text></g><g><title>DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="77.6738%" y="133" width="0.0110%" height="15" fill="rgb(251,222,45)" fg:x="21170" fg:w="3"/><text x="77.9238%" y="143.50"></text></g><g><title>_malloc_zone_malloc (11 samples, 0.04%)</title><rect x="77.6848%" y="133" width="0.0404%" height="15" fill="rgb(217,162,53)" fg:x="21173" fg:w="11"/><text x="77.9348%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (27 samples, 0.10%)</title><rect x="77.6628%" y="149" width="0.0991%" height="15" fill="rgb(229,93,14)" fg:x="21167" fg:w="27"/><text x="77.9128%" y="159.50"></text></g><g><title>nanov2_malloc_type (10 samples, 0.04%)</title><rect x="77.7252%" y="133" width="0.0367%" height="15" fill="rgb(209,67,49)" fg:x="21184" fg:w="10"/><text x="77.9752%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (36 samples, 0.13%)</title><rect x="77.6335%" y="165" width="0.1321%" height="15" fill="rgb(213,87,29)" fg:x="21159" fg:w="36"/><text x="77.8835%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (228 samples, 0.84%)</title><rect x="76.9327%" y="229" width="0.8365%" height="15" fill="rgb(205,151,52)" fg:x="20968" fg:w="228"/><text x="77.1827%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (228 samples, 0.84%)</title><rect x="76.9327%" y="213" width="0.8365%" height="15" fill="rgb(253,215,39)" fg:x="20968" fg:w="228"/><text x="77.1827%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (222 samples, 0.81%)</title><rect x="76.9547%" y="197" width="0.8145%" height="15" fill="rgb(221,220,41)" fg:x="20974" fg:w="222"/><text x="77.2047%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (220 samples, 0.81%)</title><rect x="76.9620%" y="181" width="0.8072%" height="15" fill="rgb(218,133,21)" fg:x="20976" fg:w="220"/><text x="77.2120%" y="191.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (5 samples, 0.02%)</title><rect x="77.7766%" y="229" width="0.0183%" height="15" fill="rgb(221,193,43)" fg:x="21198" fg:w="5"/><text x="78.0266%" y="239.50"></text></g><g><title>_free (10 samples, 0.04%)</title><rect x="77.8536%" y="181" width="0.0367%" height="15" fill="rgb(240,128,52)" fg:x="21219" fg:w="10"/><text x="78.1036%" y="191.50"></text></g><g><title>_nanov2_free (29 samples, 0.11%)</title><rect x="77.8903%" y="181" width="0.1064%" height="15" fill="rgb(253,114,12)" fg:x="21229" fg:w="29"/><text x="78.1403%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (58 samples, 0.21%)</title><rect x="77.7949%" y="229" width="0.2128%" height="15" fill="rgb(215,223,47)" fg:x="21203" fg:w="58"/><text x="78.0449%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (53 samples, 0.19%)</title><rect x="77.8132%" y="213" width="0.1945%" height="15" fill="rgb(248,225,23)" fg:x="21208" fg:w="53"/><text x="78.0632%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (46 samples, 0.17%)</title><rect x="77.8389%" y="197" width="0.1688%" height="15" fill="rgb(250,108,0)" fg:x="21215" fg:w="46"/><text x="78.0889%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3 samples, 0.01%)</title><rect x="77.9967%" y="181" width="0.0110%" height="15" fill="rgb(228,208,7)" fg:x="21258" fg:w="3"/><text x="78.2467%" y="191.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="78.0591%" y="181" width="0.0147%" height="15" fill="rgb(244,45,10)" fg:x="21275" fg:w="4"/><text x="78.3091%" y="191.50"></text></g><g><title>_free (4 samples, 0.01%)</title><rect x="78.0737%" y="181" width="0.0147%" height="15" fill="rgb(207,125,25)" fg:x="21279" fg:w="4"/><text x="78.3237%" y="191.50"></text></g><g><title>_nanov2_free (15 samples, 0.06%)</title><rect x="78.0884%" y="181" width="0.0550%" height="15" fill="rgb(210,195,18)" fg:x="21283" fg:w="15"/><text x="78.3384%" y="191.50"></text></g><g><title>_platform_memset (3 samples, 0.01%)</title><rect x="78.1325%" y="165" width="0.0110%" height="15" fill="rgb(249,80,12)" fg:x="21295" fg:w="3"/><text x="78.3825%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.11%)</title><rect x="78.0334%" y="197" width="0.1137%" height="15" fill="rgb(221,65,9)" fg:x="21268" fg:w="31"/><text x="78.2834%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (40 samples, 0.15%)</title><rect x="78.0077%" y="229" width="0.1468%" height="15" fill="rgb(235,49,36)" fg:x="21261" fg:w="40"/><text x="78.2577%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (35 samples, 0.13%)</title><rect x="78.0261%" y="213" width="0.1284%" height="15" fill="rgb(225,32,20)" fg:x="21266" fg:w="35"/><text x="78.2761%" y="223.50"></text></g><g><title>_free (5 samples, 0.02%)</title><rect x="78.1802%" y="197" width="0.0183%" height="15" fill="rgb(215,141,46)" fg:x="21308" fg:w="5"/><text x="78.4302%" y="207.50"></text></g><g><title>_nanov2_free (10 samples, 0.04%)</title><rect x="78.1985%" y="197" width="0.0367%" height="15" fill="rgb(250,160,47)" fg:x="21313" fg:w="10"/><text x="78.4485%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (27 samples, 0.10%)</title><rect x="78.1545%" y="229" width="0.0991%" height="15" fill="rgb(216,222,40)" fg:x="21301" fg:w="27"/><text x="78.4045%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (23 samples, 0.08%)</title><rect x="78.1691%" y="213" width="0.0844%" height="15" fill="rgb(234,217,39)" fg:x="21305" fg:w="23"/><text x="78.4191%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (5 samples, 0.02%)</title><rect x="78.2352%" y="197" width="0.0183%" height="15" fill="rgb(207,178,40)" fg:x="21323" fg:w="5"/><text x="78.4852%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (84 samples, 0.31%)</title><rect x="78.4994%" y="149" width="0.3082%" height="15" fill="rgb(221,136,13)" fg:x="21395" fg:w="84"/><text x="78.7494%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (299 samples, 1.10%)</title><rect x="78.4370%" y="181" width="1.0970%" height="15" fill="rgb(249,199,10)" fg:x="21378" fg:w="299"/><text x="78.6870%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (295 samples, 1.08%)</title><rect x="78.4517%" y="165" width="1.0824%" height="15" fill="rgb(249,222,13)" fg:x="21382" fg:w="295"/><text x="78.7017%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (198 samples, 0.73%)</title><rect x="78.8076%" y="149" width="0.7265%" height="15" fill="rgb(244,185,38)" fg:x="21479" fg:w="198"/><text x="79.0576%" y="159.50"></text></g><g><title>DYLD-STUB$$memcpy (8 samples, 0.03%)</title><rect x="79.6258%" y="165" width="0.0294%" height="15" fill="rgb(236,202,9)" fg:x="21702" fg:w="8"/><text x="79.8758%" y="175.50"></text></g><g><title>_platform_memmove (25 samples, 0.09%)</title><rect x="79.6551%" y="165" width="0.0917%" height="15" fill="rgb(250,229,37)" fg:x="21710" fg:w="25"/><text x="79.9051%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (81 samples, 0.30%)</title><rect x="79.5340%" y="181" width="0.2972%" height="15" fill="rgb(206,174,23)" fg:x="21677" fg:w="81"/><text x="79.7840%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (23 samples, 0.08%)</title><rect x="79.7468%" y="165" width="0.0844%" height="15" fill="rgb(211,33,43)" fg:x="21735" fg:w="23"/><text x="79.9968%" y="175.50"></text></g><g><title>core::cmp::Ord::min (31 samples, 0.11%)</title><rect x="80.1835%" y="101" width="0.1137%" height="15" fill="rgb(245,58,50)" fg:x="21854" fg:w="31"/><text x="80.4335%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (7 samples, 0.03%)</title><rect x="80.6347%" y="85" width="0.0257%" height="15" fill="rgb(244,68,36)" fg:x="21977" fg:w="7"/><text x="80.8847%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (173 samples, 0.63%)</title><rect x="80.2972%" y="101" width="0.6347%" height="15" fill="rgb(232,229,15)" fg:x="21885" fg:w="173"/><text x="80.5472%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (74 samples, 0.27%)</title><rect x="80.6604%" y="85" width="0.2715%" height="15" fill="rgb(254,30,23)" fg:x="21984" fg:w="74"/><text x="80.9104%" y="95.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (11 samples, 0.04%)</title><rect x="80.8916%" y="69" width="0.0404%" height="15" fill="rgb(235,160,14)" fg:x="22047" fg:w="11"/><text x="81.1416%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (691 samples, 2.54%)</title><rect x="78.4003%" y="197" width="2.5353%" height="15" fill="rgb(212,155,44)" fg:x="21368" fg:w="691"/><text x="78.6503%" y="207.50">co..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (301 samples, 1.10%)</title><rect x="79.8312%" y="181" width="1.1044%" height="15" fill="rgb(226,2,50)" fg:x="21758" fg:w="301"/><text x="80.0812%" y="191.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (299 samples, 1.10%)</title><rect x="79.8386%" y="165" width="1.0970%" height="15" fill="rgb(234,177,6)" fg:x="21760" fg:w="299"/><text x="80.0886%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (287 samples, 1.05%)</title><rect x="79.8826%" y="149" width="1.0530%" height="15" fill="rgb(217,24,9)" fg:x="21772" fg:w="287"/><text x="80.1326%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (284 samples, 1.04%)</title><rect x="79.8936%" y="133" width="1.0420%" height="15" fill="rgb(220,13,46)" fg:x="21775" fg:w="284"/><text x="80.1436%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (276 samples, 1.01%)</title><rect x="79.9229%" y="117" width="1.0127%" height="15" fill="rgb(239,221,27)" fg:x="21783" fg:w="276"/><text x="80.1729%" y="127.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (118 samples, 0.43%)</title><rect x="81.1447%" y="181" width="0.4329%" height="15" fill="rgb(222,198,25)" fg:x="22116" fg:w="118"/><text x="81.3947%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (115 samples, 0.42%)</title><rect x="81.1558%" y="165" width="0.4219%" height="15" fill="rgb(211,99,13)" fg:x="22119" fg:w="115"/><text x="81.4058%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (90 samples, 0.33%)</title><rect x="81.2475%" y="149" width="0.3302%" height="15" fill="rgb(232,111,31)" fg:x="22144" fg:w="90"/><text x="81.4975%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (23 samples, 0.08%)</title><rect x="81.4933%" y="133" width="0.0844%" height="15" fill="rgb(245,82,37)" fg:x="22211" fg:w="23"/><text x="81.7433%" y="143.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.01%)</title><rect x="81.6511%" y="165" width="0.0110%" height="15" fill="rgb(227,149,46)" fg:x="22254" fg:w="3"/><text x="81.9011%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (6 samples, 0.02%)</title><rect x="81.6621%" y="165" width="0.0220%" height="15" fill="rgb(218,36,50)" fg:x="22257" fg:w="6"/><text x="81.9121%" y="175.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (33 samples, 0.12%)</title><rect x="81.5777%" y="181" width="0.1211%" height="15" fill="rgb(226,80,48)" fg:x="22234" fg:w="33"/><text x="81.8277%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (4 samples, 0.01%)</title><rect x="81.6841%" y="165" width="0.0147%" height="15" fill="rgb(238,224,15)" fg:x="22263" fg:w="4"/><text x="81.9341%" y="175.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (70 samples, 0.26%)</title><rect x="82.2455%" y="101" width="0.2568%" height="15" fill="rgb(241,136,10)" fg:x="22416" fg:w="70"/><text x="82.4955%" y="111.50"></text></g><g><title>alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (105 samples, 0.39%)</title><rect x="82.1207%" y="133" width="0.3853%" height="15" fill="rgb(208,32,45)" fg:x="22382" fg:w="105"/><text x="82.3707%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (96 samples, 0.35%)</title><rect x="82.1537%" y="117" width="0.3522%" height="15" fill="rgb(207,135,9)" fg:x="22391" fg:w="96"/><text x="82.4037%" y="127.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12 samples, 0.04%)</title><rect x="82.5353%" y="117" width="0.0440%" height="15" fill="rgb(206,86,44)" fg:x="22495" fg:w="12"/><text x="82.7853%" y="127.50"></text></g><g><title>_platform_memcmp (8 samples, 0.03%)</title><rect x="82.5500%" y="101" width="0.0294%" height="15" fill="rgb(245,177,15)" fg:x="22499" fg:w="8"/><text x="82.8000%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,162 samples, 4.26%)</title><rect x="78.3196%" y="213" width="4.2634%" height="15" fill="rgb(206,64,50)" fg:x="21346" fg:w="1162"/><text x="78.5696%" y="223.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (449 samples, 1.65%)</title><rect x="80.9356%" y="197" width="1.6474%" height="15" fill="rgb(234,36,40)" fg:x="22059" fg:w="449"/><text x="81.1856%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (241 samples, 0.88%)</title><rect x="81.6988%" y="181" width="0.8842%" height="15" fill="rgb(213,64,8)" fg:x="22267" fg:w="241"/><text x="81.9488%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (204 samples, 0.75%)</title><rect x="81.8345%" y="165" width="0.7485%" height="15" fill="rgb(210,75,36)" fg:x="22304" fg:w="204"/><text x="82.0845%" y="175.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (196 samples, 0.72%)</title><rect x="81.8639%" y="149" width="0.7191%" height="15" fill="rgb(229,88,21)" fg:x="22312" fg:w="196"/><text x="82.1139%" y="159.50"></text></g><g><title>core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (21 samples, 0.08%)</title><rect x="82.5060%" y="133" width="0.0771%" height="15" fill="rgb(252,204,47)" fg:x="22487" fg:w="21"/><text x="82.7560%" y="143.50"></text></g><g><title>bitbeat::handle_spawn (3,138 samples, 11.51%)</title><rect x="71.0769%" y="245" width="11.5135%" height="15" fill="rgb(208,77,27)" fg:x="19372" fg:w="3138"/><text x="71.3269%" y="255.50">bitbeat::handle_s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,178 samples, 4.32%)</title><rect x="78.2682%" y="229" width="4.3221%" height="15" fill="rgb(221,76,26)" fg:x="21332" fg:w="1178"/><text x="78.5182%" y="239.50">std::..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.01%)</title><rect x="82.7775%" y="229" width="0.0110%" height="15" fill="rgb(225,139,18)" fg:x="22561" fg:w="3"/><text x="83.0275%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.03%)</title><rect x="82.8472%" y="213" width="0.0294%" height="15" fill="rgb(230,137,11)" fg:x="22580" fg:w="8"/><text x="83.0972%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (46 samples, 0.17%)</title><rect x="82.7885%" y="229" width="0.1688%" height="15" fill="rgb(212,28,1)" fg:x="22564" fg:w="46"/><text x="83.0385%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (22 samples, 0.08%)</title><rect x="82.8765%" y="213" width="0.0807%" height="15" fill="rgb(248,164,17)" fg:x="22588" fg:w="22"/><text x="83.1265%" y="223.50"></text></g><g><title>bitbeat::Process::step (6,851 samples, 25.14%)</title><rect x="57.8463%" y="261" width="25.1367%" height="15" fill="rgb(222,171,42)" fg:x="15766" fg:w="6851"/><text x="58.0963%" y="271.50">bitbeat::Process::step</text></g><g><title>bitbeat::handle_sub (107 samples, 0.39%)</title><rect x="82.5904%" y="245" width="0.3926%" height="15" fill="rgb(243,84,45)" fg:x="22510" fg:w="107"/><text x="82.8404%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (5 samples, 0.02%)</title><rect x="82.9646%" y="229" width="0.0183%" height="15" fill="rgb(252,49,23)" fg:x="22612" fg:w="5"/><text x="83.2146%" y="239.50"></text></g><g><title>bitbeat::handle_cmp_le (4 samples, 0.01%)</title><rect x="82.9866%" y="261" width="0.0147%" height="15" fill="rgb(215,19,7)" fg:x="22618" fg:w="4"/><text x="83.2366%" y="271.50"></text></g><g><title>bitbeat::handle_load_imm (3 samples, 0.01%)</title><rect x="83.0050%" y="261" width="0.0110%" height="15" fill="rgb(238,81,41)" fg:x="22623" fg:w="3"/><text x="83.2550%" y="271.50"></text></g><g><title>bitbeat::handle_recv (43 samples, 0.16%)</title><rect x="83.0160%" y="261" width="0.1578%" height="15" fill="rgb(210,199,37)" fg:x="22626" fg:w="43"/><text x="83.2660%" y="271.50"></text></g><g><title>bitbeat::handle_send (3 samples, 0.01%)</title><rect x="83.1737%" y="261" width="0.0110%" height="15" fill="rgb(244,192,49)" fg:x="22669" fg:w="3"/><text x="83.4237%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (508 samples, 1.86%)</title><rect x="83.1847%" y="261" width="1.8639%" height="15" fill="rgb(226,211,11)" fg:x="22672" fg:w="508"/><text x="83.4347%" y="271.50">c..</text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (420 samples, 1.54%)</title><rect x="83.5076%" y="245" width="1.5410%" height="15" fill="rgb(236,162,54)" fg:x="22760" fg:w="420"/><text x="83.7576%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (204 samples, 0.75%)</title><rect x="84.3001%" y="229" width="0.7485%" height="15" fill="rgb(220,229,9)" fg:x="22976" fg:w="204"/><text x="84.5501%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::new (18 samples, 0.07%)</title><rect x="85.0486%" y="261" width="0.0660%" height="15" fill="rgb(250,87,22)" fg:x="23180" fg:w="18"/><text x="85.2986%" y="271.50"></text></g><g><title>_platform_memmove (12 samples, 0.04%)</title><rect x="85.0706%" y="245" width="0.0440%" height="15" fill="rgb(239,43,17)" fg:x="23186" fg:w="12"/><text x="85.3206%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (125 samples, 0.46%)</title><rect x="85.1147%" y="261" width="0.4586%" height="15" fill="rgb(231,177,25)" fg:x="23198" fg:w="125"/><text x="85.3647%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (80 samples, 0.29%)</title><rect x="85.2798%" y="245" width="0.2935%" height="15" fill="rgb(219,179,1)" fg:x="23243" fg:w="80"/><text x="85.5298%" y="255.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (43 samples, 0.16%)</title><rect x="85.4155%" y="229" width="0.1578%" height="15" fill="rgb(238,219,53)" fg:x="23280" fg:w="43"/><text x="85.6655%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (50 samples, 0.18%)</title><rect x="85.6980%" y="181" width="0.1835%" height="15" fill="rgb(232,167,36)" fg:x="23357" fg:w="50"/><text x="85.9480%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (153 samples, 0.56%)</title><rect x="85.6613%" y="213" width="0.5614%" height="15" fill="rgb(244,19,51)" fg:x="23347" fg:w="153"/><text x="85.9113%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (152 samples, 0.56%)</title><rect x="85.6650%" y="197" width="0.5577%" height="15" fill="rgb(224,6,22)" fg:x="23348" fg:w="152"/><text x="85.9150%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (93 samples, 0.34%)</title><rect x="85.8815%" y="181" width="0.3412%" height="15" fill="rgb(224,145,5)" fg:x="23407" fg:w="93"/><text x="86.1315%" y="191.50"></text></g><g><title>DYLD-STUB$$memcpy (6 samples, 0.02%)</title><rect x="86.3181%" y="197" width="0.0220%" height="15" fill="rgb(234,130,49)" fg:x="23526" fg:w="6"/><text x="86.5681%" y="207.50"></text></g><g><title>_platform_memmove (14 samples, 0.05%)</title><rect x="86.3401%" y="197" width="0.0514%" height="15" fill="rgb(254,6,2)" fg:x="23532" fg:w="14"/><text x="86.5901%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (52 samples, 0.19%)</title><rect x="86.2227%" y="213" width="0.1908%" height="15" fill="rgb(208,96,46)" fg:x="23500" fg:w="52"/><text x="86.4727%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (6 samples, 0.02%)</title><rect x="86.3915%" y="197" width="0.0220%" height="15" fill="rgb(239,3,39)" fg:x="23546" fg:w="6"/><text x="86.6415%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (25 samples, 0.09%)</title><rect x="86.5786%" y="133" width="0.0917%" height="15" fill="rgb(233,210,1)" fg:x="23597" fg:w="25"/><text x="86.8286%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (11 samples, 0.04%)</title><rect x="86.6703%" y="133" width="0.0404%" height="15" fill="rgb(244,137,37)" fg:x="23622" fg:w="11"/><text x="86.9203%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (330 samples, 1.21%)</title><rect x="85.6430%" y="229" width="1.2108%" height="15" fill="rgb(240,136,2)" fg:x="23342" fg:w="330"/><text x="85.8930%" y="239.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (120 samples, 0.44%)</title><rect x="86.4135%" y="213" width="0.4403%" height="15" fill="rgb(239,18,37)" fg:x="23552" fg:w="120"/><text x="86.6635%" y="223.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (118 samples, 0.43%)</title><rect x="86.4208%" y="197" width="0.4329%" height="15" fill="rgb(218,185,22)" fg:x="23554" fg:w="118"/><text x="86.6708%" y="207.50"></text></g><g><title>core::hash::Hasher::write_usize (117 samples, 0.43%)</title><rect x="86.4245%" y="181" width="0.4293%" height="15" fill="rgb(225,218,4)" fg:x="23555" fg:w="117"/><text x="86.6745%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (115 samples, 0.42%)</title><rect x="86.4318%" y="165" width="0.4219%" height="15" fill="rgb(230,182,32)" fg:x="23557" fg:w="115"/><text x="86.6818%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (111 samples, 0.41%)</title><rect x="86.4465%" y="149" width="0.4073%" height="15" fill="rgb(242,56,43)" fg:x="23561" fg:w="111"/><text x="86.6965%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (39 samples, 0.14%)</title><rect x="86.7107%" y="133" width="0.1431%" height="15" fill="rgb(233,99,24)" fg:x="23633" fg:w="39"/><text x="86.9607%" y="143.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (9 samples, 0.03%)</title><rect x="86.8208%" y="117" width="0.0330%" height="15" fill="rgb(234,209,42)" fg:x="23663" fg:w="9"/><text x="87.0708%" y="127.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (11 samples, 0.04%)</title><rect x="87.2831%" y="181" width="0.0404%" height="15" fill="rgb(227,7,12)" fg:x="23789" fg:w="11"/><text x="87.5331%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (10 samples, 0.04%)</title><rect x="87.2867%" y="165" width="0.0367%" height="15" fill="rgb(245,203,43)" fg:x="23790" fg:w="10"/><text x="87.5367%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (10 samples, 0.04%)</title><rect x="87.2867%" y="149" width="0.0367%" height="15" fill="rgb(238,205,33)" fg:x="23790" fg:w="10"/><text x="87.5367%" y="159.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcgez_s8 (7 samples, 0.03%)</title><rect x="87.3381%" y="165" width="0.0257%" height="15" fill="rgb(231,56,7)" fg:x="23804" fg:w="7"/><text x="87.5881%" y="175.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_full (10 samples, 0.04%)</title><rect x="87.3308%" y="181" width="0.0367%" height="15" fill="rgb(244,186,29)" fg:x="23802" fg:w="10"/><text x="87.5808%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 0.10%)</title><rect x="87.5179%" y="101" width="0.1027%" height="15" fill="rgb(234,111,31)" fg:x="23853" fg:w="28"/><text x="87.7679%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (179 samples, 0.66%)</title><rect x="87.4702%" y="133" width="0.6568%" height="15" fill="rgb(241,149,10)" fg:x="23840" fg:w="179"/><text x="87.7202%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (176 samples, 0.65%)</title><rect x="87.4812%" y="117" width="0.6458%" height="15" fill="rgb(249,206,44)" fg:x="23843" fg:w="176"/><text x="87.7312%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (138 samples, 0.51%)</title><rect x="87.6206%" y="101" width="0.5063%" height="15" fill="rgb(251,153,30)" fg:x="23881" fg:w="138"/><text x="87.8706%" y="111.50"></text></g><g><title>_platform_memmove (17 samples, 0.06%)</title><rect x="88.2040%" y="117" width="0.0624%" height="15" fill="rgb(239,152,38)" fg:x="24040" fg:w="17"/><text x="88.4540%" y="127.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (47 samples, 0.17%)</title><rect x="88.1269%" y="133" width="0.1724%" height="15" fill="rgb(249,139,47)" fg:x="24019" fg:w="47"/><text x="88.3769%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 0.03%)</title><rect x="88.2664%" y="117" width="0.0330%" height="15" fill="rgb(244,64,35)" fg:x="24057" fg:w="9"/><text x="88.5164%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 0.10%)</title><rect x="88.5085%" y="53" width="0.1027%" height="15" fill="rgb(216,46,15)" fg:x="24123" fg:w="28"/><text x="88.7585%" y="63.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.01%)</title><rect x="88.6113%" y="53" width="0.0110%" height="15" fill="rgb(250,74,19)" fg:x="24151" fg:w="3"/><text x="88.8613%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (117 samples, 0.43%)</title><rect x="88.3471%" y="69" width="0.4293%" height="15" fill="rgb(249,42,33)" fg:x="24079" fg:w="117"/><text x="88.5971%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (42 samples, 0.15%)</title><rect x="88.6223%" y="53" width="0.1541%" height="15" fill="rgb(242,149,17)" fg:x="24154" fg:w="42"/><text x="88.8723%" y="63.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (10 samples, 0.04%)</title><rect x="88.7397%" y="37" width="0.0367%" height="15" fill="rgb(244,29,21)" fg:x="24186" fg:w="10"/><text x="88.9897%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (385 samples, 1.41%)</title><rect x="87.3675%" y="181" width="1.4126%" height="15" fill="rgb(220,130,37)" fg:x="23812" fg:w="385"/><text x="87.6175%" y="191.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (370 samples, 1.36%)</title><rect x="87.4225%" y="165" width="1.3575%" height="15" fill="rgb(211,67,2)" fg:x="23827" fg:w="370"/><text x="87.6725%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (366 samples, 1.34%)</title><rect x="87.4372%" y="149" width="1.3429%" height="15" fill="rgb(235,68,52)" fg:x="23831" fg:w="366"/><text x="87.6872%" y="159.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (131 samples, 0.48%)</title><rect x="88.2994%" y="133" width="0.4806%" height="15" fill="rgb(246,142,3)" fg:x="24066" fg:w="131"/><text x="88.5494%" y="143.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (129 samples, 0.47%)</title><rect x="88.3067%" y="117" width="0.4733%" height="15" fill="rgb(241,25,7)" fg:x="24068" fg:w="129"/><text x="88.5567%" y="127.50"></text></g><g><title>core::hash::Hasher::write_usize (126 samples, 0.46%)</title><rect x="88.3177%" y="101" width="0.4623%" height="15" fill="rgb(242,119,39)" fg:x="24071" fg:w="126"/><text x="88.5677%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (122 samples, 0.45%)</title><rect x="88.3324%" y="85" width="0.4476%" height="15" fill="rgb(241,98,45)" fg:x="24075" fg:w="122"/><text x="88.5824%" y="95.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (78 samples, 0.29%)</title><rect x="88.8498%" y="149" width="0.2862%" height="15" fill="rgb(254,28,30)" fg:x="24216" fg:w="78"/><text x="89.0998%" y="159.50"></text></g><g><title>core::ptr::read_unaligned (76 samples, 0.28%)</title><rect x="88.8571%" y="133" width="0.2788%" height="15" fill="rgb(241,142,54)" fg:x="24218" fg:w="76"/><text x="89.1071%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (65 samples, 0.24%)</title><rect x="88.8975%" y="117" width="0.2385%" height="15" fill="rgb(222,85,15)" fg:x="24229" fg:w="65"/><text x="89.1475%" y="127.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (24 samples, 0.09%)</title><rect x="89.0479%" y="101" width="0.0881%" height="15" fill="rgb(210,85,47)" fg:x="24270" fg:w="24"/><text x="89.2979%" y="111.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcltz_s8 (23 samples, 0.08%)</title><rect x="89.3047%" y="117" width="0.0844%" height="15" fill="rgb(224,206,25)" fg:x="24340" fg:w="23"/><text x="89.5547%" y="127.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.01%)</title><rect x="89.3964%" y="117" width="0.0110%" height="15" fill="rgb(243,201,19)" fg:x="24365" fg:w="3"/><text x="89.6464%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (77 samples, 0.28%)</title><rect x="89.1359%" y="149" width="0.2825%" height="15" fill="rgb(236,59,4)" fg:x="24294" fg:w="77"/><text x="89.3859%" y="159.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_empty_or_deleted (46 samples, 0.17%)</title><rect x="89.2497%" y="133" width="0.1688%" height="15" fill="rgb(254,179,45)" fg:x="24325" fg:w="46"/><text x="89.4997%" y="143.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (3 samples, 0.01%)</title><rect x="89.4074%" y="117" width="0.0110%" height="15" fill="rgb(226,14,10)" fg:x="24368" fg:w="3"/><text x="89.6574%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (698 samples, 2.56%)</title><rect x="86.8831%" y="213" width="2.5610%" height="15" fill="rgb(244,27,41)" fg:x="23680" fg:w="698"/><text x="87.1331%" y="223.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (694 samples, 2.55%)</title><rect x="86.8978%" y="197" width="2.5463%" height="15" fill="rgb(235,35,32)" fg:x="23684" fg:w="694"/><text x="87.1478%" y="207.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (181 samples, 0.66%)</title><rect x="88.7800%" y="181" width="0.6641%" height="15" fill="rgb(218,68,31)" fg:x="24197" fg:w="181"/><text x="89.0300%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (176 samples, 0.65%)</title><rect x="88.7984%" y="165" width="0.6458%" height="15" fill="rgb(207,120,37)" fg:x="24202" fg:w="176"/><text x="89.0484%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (7 samples, 0.03%)</title><rect x="89.4185%" y="149" width="0.0257%" height="15" fill="rgb(227,98,0)" fg:x="24371" fg:w="7"/><text x="89.6685%" y="159.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (83 samples, 0.30%)</title><rect x="89.6863%" y="197" width="0.3045%" height="15" fill="rgb(207,7,3)" fg:x="24444" fg:w="83"/><text x="89.9363%" y="207.50"></text></g><g><title>core::ptr::read_unaligned (81 samples, 0.30%)</title><rect x="89.6936%" y="181" width="0.2972%" height="15" fill="rgb(206,98,19)" fg:x="24446" fg:w="81"/><text x="89.9436%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (76 samples, 0.28%)</title><rect x="89.7120%" y="165" width="0.2788%" height="15" fill="rgb(217,5,26)" fg:x="24451" fg:w="76"/><text x="89.9620%" y="175.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (19 samples, 0.07%)</title><rect x="89.9211%" y="149" width="0.0697%" height="15" fill="rgb(235,190,38)" fg:x="24508" fg:w="19"/><text x="90.1711%" y="159.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vceq_u8 (4 samples, 0.01%)</title><rect x="90.0936%" y="181" width="0.0147%" height="15" fill="rgb(247,86,24)" fg:x="24555" fg:w="4"/><text x="90.3436%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (10 samples, 0.04%)</title><rect x="90.1156%" y="181" width="0.0367%" height="15" fill="rgb(205,101,16)" fg:x="24561" fg:w="10"/><text x="90.3656%" y="191.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (48 samples, 0.18%)</title><rect x="89.9908%" y="197" width="0.1761%" height="15" fill="rgb(246,168,33)" fg:x="24527" fg:w="48"/><text x="90.2408%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (4 samples, 0.01%)</title><rect x="90.1523%" y="181" width="0.0147%" height="15" fill="rgb(231,114,1)" fg:x="24571" fg:w="4"/><text x="90.4023%" y="191.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcltz_s8 (16 samples, 0.06%)</title><rect x="92.2840%" y="165" width="0.0587%" height="15" fill="rgb(207,184,53)" fg:x="25152" fg:w="16"/><text x="92.5340%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (6 samples, 0.02%)</title><rect x="92.3427%" y="165" width="0.0220%" height="15" fill="rgb(224,95,51)" fg:x="25168" fg:w="6"/><text x="92.5927%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (600 samples, 2.20%)</title><rect x="90.1743%" y="197" width="2.2014%" height="15" fill="rgb(212,188,45)" fg:x="24577" fg:w="600"/><text x="90.4243%" y="207.50">h..</text></g><g><title>hashbrown::control::group::neon::Group::match_empty_or_deleted (524 samples, 1.92%)</title><rect x="90.4531%" y="181" width="1.9226%" height="15" fill="rgb(223,154,38)" fg:x="24653" fg:w="524"/><text x="90.7031%" y="191.50">h..</text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (3 samples, 0.01%)</title><rect x="92.3647%" y="165" width="0.0110%" height="15" fill="rgb(251,22,52)" fg:x="25174" fg:w="3"/><text x="92.6147%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,512 samples, 5.55%)</title><rect x="86.8538%" y="229" width="5.5476%" height="15" fill="rgb(229,209,22)" fg:x="23672" fg:w="1512"/><text x="87.1038%" y="239.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (806 samples, 2.96%)</title><rect x="89.4441%" y="213" width="2.9573%" height="15" fill="rgb(234,138,34)" fg:x="24378" fg:w="806"/><text x="89.6941%" y="223.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (7 samples, 0.03%)</title><rect x="92.3757%" y="197" width="0.0257%" height="15" fill="rgb(212,95,11)" fg:x="25177" fg:w="7"/><text x="92.6257%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (61 samples, 0.22%)</title><rect x="92.4014%" y="229" width="0.2238%" height="15" fill="rgb(240,179,47)" fg:x="25184" fg:w="61"/><text x="92.6514%" y="239.50"></text></g><g><title>bitbeat::Machine::run::_{{closure}} (10,300 samples, 37.79%)</title><rect x="54.8413%" y="277" width="37.7912%" height="15" fill="rgb(240,163,11)" fg:x="14947" fg:w="10300"/><text x="55.0913%" y="287.50">bitbeat::Machine::run::_{{closure}}</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,923 samples, 7.06%)</title><rect x="85.5770%" y="261" width="7.0556%" height="15" fill="rgb(236,37,12)" fg:x="23324" fg:w="1923"/><text x="85.8270%" y="271.50">std::coll..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,919 samples, 7.04%)</title><rect x="85.5916%" y="245" width="7.0409%" height="15" fill="rgb(232,164,16)" fg:x="23328" fg:w="1919"/><text x="85.8416%" y="255.50">hashbrown..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10,656 samples, 39.10%)</title><rect x="53.5388%" y="309" width="39.0974%" height="15" fill="rgb(244,205,15)" fg:x="14592" fg:w="10656"/><text x="53.7888%" y="319.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::fun..</text></g><g><title>core::ops::function::FnOnce::call_once (10,373 samples, 38.06%)</title><rect x="54.5771%" y="293" width="38.0591%" height="15" fill="rgb(223,117,47)" fg:x="14875" fg:w="10373"/><text x="54.8271%" y="303.50">core::ops::function::FnOnce::call_once</text></g><g><title>DYLD-STUB$$memcpy (14 samples, 0.05%)</title><rect x="92.6362%" y="309" width="0.0514%" height="15" fill="rgb(244,107,35)" fg:x="25248" fg:w="14"/><text x="92.8862%" y="319.50"></text></g><g><title>__rust_try (10,989 samples, 40.32%)</title><rect x="52.9884%" y="341" width="40.3192%" height="15" fill="rgb(205,140,8)" fg:x="14442" fg:w="10989"/><text x="53.2384%" y="351.50">__rust_try</text></g><g><title>std::panicking::try::do_call (10,915 samples, 40.05%)</title><rect x="53.2600%" y="325" width="40.0477%" height="15" fill="rgb(228,84,46)" fg:x="14516" fg:w="10915"/><text x="53.5100%" y="335.50">std::panicking::try::do_call</text></g><g><title>_platform_memmove (169 samples, 0.62%)</title><rect x="92.6876%" y="309" width="0.6201%" height="15" fill="rgb(254,188,9)" fg:x="25262" fg:w="169"/><text x="92.9376%" y="319.50"></text></g><g><title>bitbeat::Machine::run (25,711 samples, 94.33%)</title><rect x="0.0477%" y="373" width="94.3350%" height="15" fill="rgb(206,112,54)" fg:x="13" fg:w="25711"/><text x="0.2977%" y="383.50">bitbeat::Machine::run</text></g><g><title>std::panic::catch_unwind (11,472 samples, 42.09%)</title><rect x="52.2913%" y="357" width="42.0914%" height="15" fill="rgb(216,84,49)" fg:x="14252" fg:w="11472"/><text x="52.5413%" y="367.50">std::panic::catch_unwind</text></g><g><title>_platform_memmove (293 samples, 1.08%)</title><rect x="93.3076%" y="341" width="1.0750%" height="15" fill="rgb(214,194,35)" fg:x="25431" fg:w="293"/><text x="93.5576%" y="351.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.01%)</title><rect x="94.3900%" y="261" width="0.0110%" height="15" fill="rgb(249,28,3)" fg:x="25726" fg:w="3"/><text x="94.6400%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::new (3 samples, 0.01%)</title><rect x="94.4084%" y="261" width="0.0110%" height="15" fill="rgb(222,56,52)" fg:x="25731" fg:w="3"/><text x="94.6584%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (4 samples, 0.01%)</title><rect x="94.4194%" y="261" width="0.0147%" height="15" fill="rgb(245,217,50)" fg:x="25734" fg:w="4"/><text x="94.6694%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (15 samples, 0.06%)</title><rect x="94.4340%" y="261" width="0.0550%" height="15" fill="rgb(213,201,24)" fg:x="25738" fg:w="15"/><text x="94.6840%" y="271.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (5 samples, 0.02%)</title><rect x="94.4891%" y="261" width="0.0183%" height="15" fill="rgb(248,116,28)" fg:x="25753" fg:w="5"/><text x="94.7391%" y="271.50"></text></g><g><title>hashbrown::control::group::neon::Group::load_aligned (115 samples, 0.42%)</title><rect x="94.5074%" y="261" width="0.4219%" height="15" fill="rgb(219,72,43)" fg:x="25758" fg:w="115"/><text x="94.7574%" y="271.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (114 samples, 0.42%)</title><rect x="94.5111%" y="245" width="0.4183%" height="15" fill="rgb(209,138,14)" fg:x="25759" fg:w="114"/><text x="94.7611%" y="255.50"></text></g><g><title>core::ptr::read_unaligned (113 samples, 0.41%)</title><rect x="94.5148%" y="229" width="0.4146%" height="15" fill="rgb(222,18,33)" fg:x="25760" fg:w="113"/><text x="94.7648%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (111 samples, 0.41%)</title><rect x="94.5221%" y="213" width="0.4073%" height="15" fill="rgb(213,199,7)" fg:x="25762" fg:w="111"/><text x="94.7721%" y="223.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (16 samples, 0.06%)</title><rect x="94.8707%" y="197" width="0.0587%" height="15" fill="rgb(250,110,10)" fg:x="25857" fg:w="16"/><text x="95.1207%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (7 samples, 0.03%)</title><rect x="94.9294%" y="261" width="0.0257%" height="15" fill="rgb(248,123,6)" fg:x="25873" fg:w="7"/><text x="95.1794%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (195 samples, 0.72%)</title><rect x="94.3827%" y="277" width="0.7155%" height="15" fill="rgb(206,91,31)" fg:x="25724" fg:w="195"/><text x="94.6327%" y="287.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (39 samples, 0.14%)</title><rect x="94.9551%" y="261" width="0.1431%" height="15" fill="rgb(211,154,13)" fg:x="25880" fg:w="39"/><text x="95.2051%" y="271.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_full (4 samples, 0.01%)</title><rect x="95.0835%" y="245" width="0.0147%" height="15" fill="rgb(225,148,7)" fg:x="25915" fg:w="4"/><text x="95.3335%" y="255.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="95.6338%" y="133" width="0.0147%" height="15" fill="rgb(220,160,43)" fg:x="26065" fg:w="4"/><text x="95.8838%" y="143.50"></text></g><g><title>__rdl_dealloc (15 samples, 0.06%)</title><rect x="95.6485%" y="133" width="0.0550%" height="15" fill="rgb(213,52,39)" fg:x="26069" fg:w="15"/><text x="95.8985%" y="143.50"></text></g><g><title>_free (5 samples, 0.02%)</title><rect x="95.7035%" y="133" width="0.0183%" height="15" fill="rgb(243,137,7)" fg:x="26084" fg:w="5"/><text x="95.9535%" y="143.50"></text></g><g><title>_nanov2_free (17 samples, 0.06%)</title><rect x="95.7219%" y="133" width="0.0624%" height="15" fill="rgb(230,79,13)" fg:x="26089" fg:w="17"/><text x="95.9719%" y="143.50"></text></g><g><title>_szone_free (11 samples, 0.04%)</title><rect x="95.7843%" y="133" width="0.0404%" height="15" fill="rgb(247,105,23)" fg:x="26106" fg:w="11"/><text x="96.0343%" y="143.50"></text></g><g><title>_platform_memset (14 samples, 0.05%)</title><rect x="96.3309%" y="117" width="0.0514%" height="15" fill="rgb(223,179,41)" fg:x="26255" fg:w="14"/><text x="96.5809%" y="127.50"></text></g><g><title>get_tiny_previous_free_msize (3 samples, 0.01%)</title><rect x="97.0574%" y="101" width="0.0110%" height="15" fill="rgb(218,9,34)" fg:x="26453" fg:w="3"/><text x="97.3074%" y="111.50"></text></g><g><title>mvm_deallocate_plat (20 samples, 0.07%)</title><rect x="97.0684%" y="101" width="0.0734%" height="15" fill="rgb(222,106,8)" fg:x="26456" fg:w="20"/><text x="97.3184%" y="111.50"></text></g><g><title>mach_vm_deallocate (20 samples, 0.07%)</title><rect x="97.0684%" y="85" width="0.0734%" height="15" fill="rgb(211,220,0)" fg:x="26456" fg:w="20"/><text x="97.3184%" y="95.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (20 samples, 0.07%)</title><rect x="97.0684%" y="69" width="0.0734%" height="15" fill="rgb(229,52,16)" fg:x="26456" fg:w="20"/><text x="97.3184%" y="79.50"></text></g><g><title>tiny_free_detach_region (33 samples, 0.12%)</title><rect x="97.1418%" y="101" width="0.1211%" height="15" fill="rgb(212,155,18)" fg:x="26476" fg:w="33"/><text x="97.3918%" y="111.50"></text></g><g><title>tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="97.2519%" y="85" width="0.0110%" height="15" fill="rgb(242,21,14)" fg:x="26506" fg:w="3"/><text x="97.5019%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (14 samples, 0.05%)</title><rect x="97.2629%" y="101" width="0.0514%" height="15" fill="rgb(222,19,48)" fg:x="26509" fg:w="14"/><text x="97.5129%" y="111.50"></text></g><g><title>tiny_free_list_remove_ptr (21 samples, 0.08%)</title><rect x="97.3143%" y="101" width="0.0771%" height="15" fill="rgb(232,45,27)" fg:x="26523" fg:w="21"/><text x="97.5643%" y="111.50"></text></g><g><title>tiny_free_reattach_region (22 samples, 0.08%)</title><rect x="97.3913%" y="101" width="0.0807%" height="15" fill="rgb(249,103,42)" fg:x="26544" fg:w="22"/><text x="97.6413%" y="111.50"></text></g><g><title>tiny_free_scan_madvise_free (21 samples, 0.08%)</title><rect x="97.4720%" y="101" width="0.0771%" height="15" fill="rgb(246,81,33)" fg:x="26566" fg:w="21"/><text x="97.7220%" y="111.50"></text></g><g><title>mvm_madvise_free_plat (116 samples, 0.43%)</title><rect x="97.5637%" y="85" width="0.4256%" height="15" fill="rgb(252,33,42)" fg:x="26591" fg:w="116"/><text x="97.8137%" y="95.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (116 samples, 0.43%)</title><rect x="97.5637%" y="69" width="0.4256%" height="15" fill="rgb(209,212,41)" fg:x="26591" fg:w="116"/><text x="97.8137%" y="79.50"></text></g><g><title>madvise (116 samples, 0.43%)</title><rect x="97.5637%" y="53" width="0.4256%" height="15" fill="rgb(207,154,6)" fg:x="26591" fg:w="116"/><text x="97.8137%" y="63.50"></text></g><g><title>tiny_free_no_lock (440 samples, 1.61%)</title><rect x="96.3823%" y="117" width="1.6144%" height="15" fill="rgb(223,64,47)" fg:x="26269" fg:w="440"/><text x="96.6323%" y="127.50"></text></g><g><title>tiny_madvise_free_range_no_lock (122 samples, 0.45%)</title><rect x="97.5491%" y="101" width="0.4476%" height="15" fill="rgb(211,161,38)" fg:x="26587" fg:w="122"/><text x="97.7991%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (669 samples, 2.45%)</title><rect x="95.5494%" y="149" width="2.4546%" height="15" fill="rgb(219,138,40)" fg:x="26042" fg:w="669"/><text x="95.7994%" y="159.50">&lt;a..</text></g><g><title>free_tiny (594 samples, 2.18%)</title><rect x="95.8246%" y="133" width="2.1794%" height="15" fill="rgb(241,228,46)" fg:x="26117" fg:w="594"/><text x="96.0746%" y="143.50">f..</text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (677 samples, 2.48%)</title><rect x="95.5421%" y="165" width="2.4839%" height="15" fill="rgb(223,209,38)" fg:x="26040" fg:w="677"/><text x="95.7921%" y="175.50">&lt;&amp;..</text></g><g><title>free_tiny (4 samples, 0.01%)</title><rect x="98.0114%" y="149" width="0.0147%" height="15" fill="rgb(236,164,45)" fg:x="26713" fg:w="4"/><text x="98.2614%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;core::cell::RefCell&lt;bitbeat::Process&gt;,&amp;alloc::alloc::Global&gt;&gt; (705 samples, 2.59%)</title><rect x="95.4614%" y="197" width="2.5867%" height="15" fill="rgb(231,15,5)" fg:x="26018" fg:w="705"/><text x="95.7114%" y="207.50">co..</text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (700 samples, 2.57%)</title><rect x="95.4797%" y="181" width="2.5683%" height="15" fill="rgb(252,35,15)" fg:x="26023" fg:w="700"/><text x="95.7297%" y="191.50">&lt;a..</text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (4 samples, 0.01%)</title><rect x="98.0334%" y="165" width="0.0147%" height="15" fill="rgb(248,181,18)" fg:x="26719" fg:w="4"/><text x="98.2834%" y="175.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::end_bound (6 samples, 0.02%)</title><rect x="98.5140%" y="85" width="0.0220%" height="15" fill="rgb(233,39,42)" fg:x="26850" fg:w="6"/><text x="98.7640%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (91 samples, 0.33%)</title><rect x="98.3636%" y="117" width="0.3339%" height="15" fill="rgb(238,110,33)" fg:x="26809" fg:w="91"/><text x="98.6136%" y="127.50"></text></g><g><title>core::slice::index::range (81 samples, 0.30%)</title><rect x="98.4003%" y="101" width="0.2972%" height="15" fill="rgb(233,195,10)" fg:x="26819" fg:w="81"/><text x="98.6503%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::start_bound (44 samples, 0.16%)</title><rect x="98.5360%" y="85" width="0.1614%" height="15" fill="rgb(254,105,3)" fg:x="26856" fg:w="44"/><text x="98.7860%" y="95.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (125 samples, 0.46%)</title><rect x="98.2572%" y="133" width="0.4586%" height="15" fill="rgb(221,225,9)" fg:x="26780" fg:w="125"/><text x="98.5072%" y="143.50"></text></g><g><title>core::slice::index::range (4 samples, 0.01%)</title><rect x="98.7012%" y="117" width="0.0147%" height="15" fill="rgb(224,227,45)" fg:x="26901" fg:w="4"/><text x="98.9512%" y="127.50"></text></g><g><title>_free (4 samples, 0.01%)</title><rect x="98.7415%" y="101" width="0.0147%" height="15" fill="rgb(229,198,43)" fg:x="26912" fg:w="4"/><text x="98.9915%" y="111.50"></text></g><g><title>_nanov2_free (18 samples, 0.07%)</title><rect x="98.7562%" y="101" width="0.0660%" height="15" fill="rgb(206,209,35)" fg:x="26916" fg:w="18"/><text x="99.0062%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (12 samples, 0.04%)</title><rect x="98.8222%" y="101" width="0.0440%" height="15" fill="rgb(245,195,53)" fg:x="26934" fg:w="12"/><text x="99.0722%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;i64&gt;&gt; (174 samples, 0.64%)</title><rect x="98.2462%" y="149" width="0.6384%" height="15" fill="rgb(240,92,26)" fg:x="26777" fg:w="174"/><text x="98.4962%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (46 samples, 0.17%)</title><rect x="98.7158%" y="133" width="0.1688%" height="15" fill="rgb(207,40,23)" fg:x="26905" fg:w="46"/><text x="98.9658%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.16%)</title><rect x="98.7268%" y="117" width="0.1578%" height="15" fill="rgb(223,111,35)" fg:x="26908" fg:w="43"/><text x="98.9768%" y="127.50"></text></g><g><title>nanov2_madvise_block (5 samples, 0.02%)</title><rect x="98.8663%" y="101" width="0.0183%" height="15" fill="rgb(229,147,28)" fg:x="26946" fg:w="5"/><text x="99.1163%" y="111.50"></text></g><g><title>nanov2_madvise_block_locked (5 samples, 0.02%)</title><rect x="98.8663%" y="85" width="0.0183%" height="15" fill="rgb(211,29,28)" fg:x="26946" fg:w="5"/><text x="99.1163%" y="95.50"></text></g><g><title>mvm_madvise_free_plat (5 samples, 0.02%)</title><rect x="98.8663%" y="69" width="0.0183%" height="15" fill="rgb(228,72,33)" fg:x="26946" fg:w="5"/><text x="99.1163%" y="79.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (5 samples, 0.02%)</title><rect x="98.8663%" y="53" width="0.0183%" height="15" fill="rgb(205,214,31)" fg:x="26946" fg:w="5"/><text x="99.1163%" y="63.50"></text></g><g><title>madvise (5 samples, 0.02%)</title><rect x="98.8663%" y="37" width="0.0183%" height="15" fill="rgb(224,111,15)" fg:x="26946" fg:w="5"/><text x="99.1163%" y="47.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1,149 samples, 4.22%)</title><rect x="95.3697%" y="213" width="4.2157%" height="15" fill="rgb(253,21,26)" fg:x="25993" fg:w="1149"/><text x="95.6197%" y="223.50">alloc..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt; (419 samples, 1.54%)</title><rect x="98.0481%" y="197" width="1.5373%" height="15" fill="rgb(245,139,43)" fg:x="26723" fg:w="419"/><text x="98.2981%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;bitbeat::Process&gt;&gt; (416 samples, 1.53%)</title><rect x="98.0591%" y="181" width="1.5263%" height="15" fill="rgb(252,170,7)" fg:x="26726" fg:w="416"/><text x="98.3091%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitbeat::Process&gt; (415 samples, 1.52%)</title><rect x="98.0627%" y="165" width="1.5227%" height="15" fill="rgb(231,118,14)" fg:x="26727" fg:w="415"/><text x="98.3127%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitbeat::Function&gt;&gt; (191 samples, 0.70%)</title><rect x="98.8846%" y="149" width="0.7008%" height="15" fill="rgb(238,83,0)" fg:x="26951" fg:w="191"/><text x="99.1346%" y="159.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (162 samples, 0.59%)</title><rect x="98.9910%" y="133" width="0.5944%" height="15" fill="rgb(221,39,39)" fg:x="26980" fg:w="162"/><text x="99.2410%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::drop_in_place (1,269 samples, 4.66%)</title><rect x="95.0981%" y="277" width="4.6560%" height="15" fill="rgb(222,119,46)" fg:x="25919" fg:w="1269"/><text x="95.3481%" y="287.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;)&gt; (1,261 samples, 4.63%)</title><rect x="95.1275%" y="261" width="4.6267%" height="15" fill="rgb(222,165,49)" fg:x="25927" fg:w="1261"/><text x="95.3775%" y="271.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (1,261 samples, 4.63%)</title><rect x="95.1275%" y="245" width="4.6267%" height="15" fill="rgb(219,113,52)" fg:x="25927" fg:w="1261"/><text x="95.3775%" y="255.50">core:..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,259 samples, 4.62%)</title><rect x="95.1348%" y="229" width="4.6193%" height="15" fill="rgb(214,7,15)" fg:x="25929" fg:w="1259"/><text x="95.3848%" y="239.50">&lt;allo..</text></g><g><title>alloc::rc::RcInnerPtr::strong (46 samples, 0.17%)</title><rect x="99.5854%" y="213" width="0.1688%" height="15" fill="rgb(235,32,4)" fg:x="27142" fg:w="46"/><text x="99.8354%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (24 samples, 0.09%)</title><rect x="99.7542%" y="277" width="0.0881%" height="15" fill="rgb(238,90,54)" fg:x="27188" fg:w="24"/><text x="100.0042%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (8 samples, 0.03%)</title><rect x="99.8422%" y="277" width="0.0294%" height="15" fill="rgb(213,208,19)" fg:x="27212" fg:w="8"/><text x="100.0922%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1,525 samples, 5.60%)</title><rect x="94.3827%" y="293" width="5.5953%" height="15" fill="rgb(233,156,4)" fg:x="25724" fg:w="1525"/><text x="94.6327%" y="303.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (27 samples, 0.10%)</title><rect x="99.8789%" y="277" width="0.0991%" height="15" fill="rgb(207,194,5)" fg:x="27222" fg:w="27"/><text x="100.1289%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitbeat::Machine&gt; (1,526 samples, 5.60%)</title><rect x="94.3827%" y="373" width="5.5990%" height="15" fill="rgb(206,111,30)" fg:x="25724" fg:w="1526"/><text x="94.6327%" y="383.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (1,526 samples, 5.60%)</title><rect x="94.3827%" y="357" width="5.5990%" height="15" fill="rgb(243,70,54)" fg:x="25724" fg:w="1526"/><text x="94.6327%" y="367.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;,std::hash::random::RandomState&gt;&gt; (1,526 samples, 5.60%)</title><rect x="94.3827%" y="341" width="5.5990%" height="15" fill="rgb(242,28,8)" fg:x="25724" fg:w="1526"/><text x="94.6327%" y="351.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;)&gt;&gt; (1,526 samples, 5.60%)</title><rect x="94.3827%" y="325" width="5.5990%" height="15" fill="rgb(219,106,18)" fg:x="25724" fg:w="1526"/><text x="94.6327%" y="335.50">core::p..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,526 samples, 5.60%)</title><rect x="94.3827%" y="309" width="5.5990%" height="15" fill="rgb(244,222,10)" fg:x="25724" fg:w="1526"/><text x="94.6327%" y="319.50">&lt;hashbr..</text></g><g><title>all (27,255 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(236,179,52)" fg:x="0" fg:w="27255"/><text x="0.2500%" y="527.50"></text></g><g><title>start (27,255 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(213,23,39)" fg:x="0" fg:w="27255"/><text x="0.2500%" y="511.50">start</text></g><g><title>main (27,250 samples, 99.98%)</title><rect x="0.0183%" y="485" width="99.9817%" height="15" fill="rgb(238,48,10)" fg:x="5" fg:w="27250"/><text x="0.2683%" y="495.50">main</text></g><g><title>std::rt::lang_start (27,250 samples, 99.98%)</title><rect x="0.0183%" y="469" width="99.9817%" height="15" fill="rgb(251,196,23)" fg:x="5" fg:w="27250"/><text x="0.2683%" y="479.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (27,250 samples, 99.98%)</title><rect x="0.0183%" y="453" width="99.9817%" height="15" fill="rgb(250,152,24)" fg:x="5" fg:w="27250"/><text x="0.2683%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (27,250 samples, 99.98%)</title><rect x="0.0183%" y="437" width="99.9817%" height="15" fill="rgb(209,150,17)" fg:x="5" fg:w="27250"/><text x="0.2683%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (27,250 samples, 99.98%)</title><rect x="0.0183%" y="421" width="99.9817%" height="15" fill="rgb(234,202,34)" fg:x="5" fg:w="27250"/><text x="0.2683%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (27,250 samples, 99.98%)</title><rect x="0.0183%" y="405" width="99.9817%" height="15" fill="rgb(253,148,53)" fg:x="5" fg:w="27250"/><text x="0.2683%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>bitbeat::main (27,250 samples, 99.98%)</title><rect x="0.0183%" y="389" width="99.9817%" height="15" fill="rgb(218,129,16)" fg:x="5" fg:w="27250"/><text x="0.2683%" y="399.50">bitbeat::main</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.01%)</title><rect x="99.9853%" y="373" width="0.0147%" height="15" fill="rgb(216,85,19)" fg:x="27251" fg:w="4"/><text x="100.2353%" y="383.50"></text></g></svg></svg>