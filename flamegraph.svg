<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="6780"><g><title>dyld4::JustInTimeLoader::makeLaunchLoader(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld3::MachOAnalyzer const*, char const*, mach_o::Layout const*) (1 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0147%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld4::SyscallDelegate::fileExists(char const*, dyld4::FileID*, int*) const (1 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0147%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>dyld3::stat(char const*, stat*) (1 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0147%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>stat (1 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0147%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (2 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0295%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (2 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0295%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="399.50"></text></g><g><title>dyld4::RuntimeState::partitionDelayLoads(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt;, lsl::Vector&lt;dyld4::Loader const*&gt;*) (1 samples, 0.01%)</title><rect x="0.0147%" y="373" width="0.0147%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2647%" y="383.50"></text></g><g><title>dyld4::RuntimeState::recursiveMarkNonDelayed(dyld4::Loader const*, dyld4::Loader::LinksWithChain*, dyld4::Loader::LinksWithChain*) (1 samples, 0.01%)</title><rect x="0.0147%" y="357" width="0.0147%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2647%" y="367.50"></text></g><g><title>dyld4::RuntimeState::recursiveMarkNonDelayed(dyld4::Loader const*, dyld4::Loader::LinksWithChain*, dyld4::Loader::LinksWithChain*) (1 samples, 0.01%)</title><rect x="0.0147%" y="341" width="0.0147%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2647%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.01%)</title><rect x="1.5487%" y="277" width="0.0147%" height="15" fill="rgb(220,122,19)" fg:x="105" fg:w="1"/><text x="1.7987%" y="287.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.16%)</title><rect x="1.5634%" y="277" width="0.1622%" height="15" fill="rgb(250,228,42)" fg:x="106" fg:w="11"/><text x="1.8134%" y="287.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.13%)</title><rect x="1.7257%" y="277" width="0.1327%" height="15" fill="rgb(240,193,28)" fg:x="117" fg:w="9"/><text x="1.9757%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="2.2419%" y="245" width="0.0147%" height="15" fill="rgb(216,20,37)" fg:x="152" fg:w="1"/><text x="2.4919%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="2.4336%" y="229" width="0.0147%" height="15" fill="rgb(206,188,39)" fg:x="165" fg:w="1"/><text x="2.6836%" y="239.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (3 samples, 0.04%)</title><rect x="2.4484%" y="229" width="0.0442%" height="15" fill="rgb(217,207,13)" fg:x="166" fg:w="3"/><text x="2.6984%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (2 samples, 0.03%)</title><rect x="2.8024%" y="213" width="0.0295%" height="15" fill="rgb(231,73,38)" fg:x="190" fg:w="2"/><text x="3.0524%" y="223.50"></text></g><g><title>_platform_memmove (3 samples, 0.04%)</title><rect x="3.1711%" y="197" width="0.0442%" height="15" fill="rgb(225,20,46)" fg:x="215" fg:w="3"/><text x="3.4211%" y="207.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_and_affected_ancestors (9 samples, 0.13%)</title><rect x="3.2153%" y="197" width="0.1327%" height="15" fill="rgb(210,31,41)" fg:x="218" fg:w="9"/><text x="3.4653%" y="207.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_through_parent (8 samples, 0.12%)</title><rect x="3.2301%" y="181" width="0.1180%" height="15" fill="rgb(221,200,47)" fg:x="219" fg:w="8"/><text x="3.4801%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (6 samples, 0.09%)</title><rect x="3.2596%" y="165" width="0.0885%" height="15" fill="rgb(226,26,5)" fg:x="221" fg:w="6"/><text x="3.5096%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (5 samples, 0.07%)</title><rect x="3.2743%" y="149" width="0.0737%" height="15" fill="rgb(249,33,26)" fg:x="222" fg:w="5"/><text x="3.5243%" y="159.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="3.4218%" y="181" width="0.0147%" height="15" fill="rgb(235,183,28)" fg:x="232" fg:w="1"/><text x="3.6718%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.04%)</title><rect x="3.6136%" y="165" width="0.0442%" height="15" fill="rgb(221,5,38)" fg:x="245" fg:w="3"/><text x="3.8636%" y="175.50"></text></g><g><title>_nanov2_free (2 samples, 0.03%)</title><rect x="3.6283%" y="149" width="0.0295%" height="15" fill="rgb(247,18,42)" fg:x="246" fg:w="2"/><text x="3.8783%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (3 samples, 0.04%)</title><rect x="3.6578%" y="165" width="0.0442%" height="15" fill="rgb(241,131,45)" fg:x="248" fg:w="3"/><text x="3.9078%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (3 samples, 0.04%)</title><rect x="3.7021%" y="165" width="0.0442%" height="15" fill="rgb(249,31,29)" fg:x="251" fg:w="3"/><text x="3.9521%" y="175.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.03%)</title><rect x="3.7168%" y="149" width="0.0295%" height="15" fill="rgb(225,111,53)" fg:x="252" fg:w="2"/><text x="3.9668%" y="159.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="3.7758%" y="149" width="0.0147%" height="15" fill="rgb(238,160,17)" fg:x="256" fg:w="1"/><text x="4.0258%" y="159.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="3.7906%" y="149" width="0.0147%" height="15" fill="rgb(214,148,48)" fg:x="257" fg:w="1"/><text x="4.0406%" y="159.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (14 samples, 0.21%)</title><rect x="3.7463%" y="165" width="0.2065%" height="15" fill="rgb(232,36,49)" fg:x="254" fg:w="14"/><text x="3.9963%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (10 samples, 0.15%)</title><rect x="3.8053%" y="149" width="0.1475%" height="15" fill="rgb(209,103,24)" fg:x="258" fg:w="10"/><text x="4.0553%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.01%)</title><rect x="3.9381%" y="133" width="0.0147%" height="15" fill="rgb(229,88,8)" fg:x="267" fg:w="1"/><text x="4.1881%" y="143.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (46 samples, 0.68%)</title><rect x="3.3481%" y="197" width="0.6785%" height="15" fill="rgb(213,181,19)" fg:x="227" fg:w="46"/><text x="3.5981%" y="207.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (40 samples, 0.59%)</title><rect x="3.4366%" y="181" width="0.5900%" height="15" fill="rgb(254,191,54)" fg:x="233" fg:w="40"/><text x="3.6866%" y="191.50"></text></g><g><title>alloc::collections::btree::node::slice_remove (5 samples, 0.07%)</title><rect x="3.9528%" y="165" width="0.0737%" height="15" fill="rgb(241,83,37)" fg:x="268" fg:w="5"/><text x="4.2028%" y="175.50"></text></g><g><title>core::intrinsics::copy::precondition_check (1 samples, 0.01%)</title><rect x="4.0118%" y="149" width="0.0147%" height="15" fill="rgb(233,36,39)" fg:x="272" fg:w="1"/><text x="4.2618%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (11 samples, 0.16%)</title><rect x="4.2183%" y="181" width="0.1622%" height="15" fill="rgb(226,3,54)" fg:x="286" fg:w="11"/><text x="4.4683%" y="191.50"></text></g><g><title>DYLD-STUB$$memmove (1 samples, 0.01%)</title><rect x="5.7670%" y="165" width="0.0147%" height="15" fill="rgb(245,192,40)" fg:x="391" fg:w="1"/><text x="6.0170%" y="175.50"></text></g><g><title>_platform_memmove (6 samples, 0.09%)</title><rect x="5.7817%" y="165" width="0.0885%" height="15" fill="rgb(238,167,29)" fg:x="392" fg:w="6"/><text x="6.0317%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (137 samples, 2.02%)</title><rect x="4.0265%" y="197" width="2.0206%" height="15" fill="rgb(232,182,51)" fg:x="273" fg:w="137"/><text x="4.2765%" y="207.50">a..</text></g><g><title>alloc::collections::btree::node::slice_remove (113 samples, 1.67%)</title><rect x="4.3805%" y="181" width="1.6667%" height="15" fill="rgb(231,60,39)" fg:x="297" fg:w="113"/><text x="4.6305%" y="191.50"></text></g><g><title>core::intrinsics::copy::precondition_check (12 samples, 0.18%)</title><rect x="5.8702%" y="165" width="0.1770%" height="15" fill="rgb(208,69,12)" fg:x="398" fg:w="12"/><text x="6.1202%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.01%)</title><rect x="6.0472%" y="197" width="0.0147%" height="15" fill="rgb(235,93,37)" fg:x="410" fg:w="1"/><text x="6.2972%" y="207.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="6.0914%" y="181" width="0.0147%" height="15" fill="rgb(213,116,39)" fg:x="413" fg:w="1"/><text x="6.3414%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.01%)</title><rect x="6.1062%" y="181" width="0.0147%" height="15" fill="rgb(222,207,29)" fg:x="414" fg:w="1"/><text x="6.3562%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="6.1062%" y="165" width="0.0147%" height="15" fill="rgb(206,96,30)" fg:x="414" fg:w="1"/><text x="6.3562%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (266 samples, 3.92%)</title><rect x="2.2566%" y="245" width="3.9233%" height="15" fill="rgb(218,138,4)" fg:x="153" fg:w="266"/><text x="2.5066%" y="255.50">allo..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (250 samples, 3.69%)</title><rect x="2.4926%" y="229" width="3.6873%" height="15" fill="rgb(250,191,14)" fg:x="169" fg:w="250"/><text x="2.7426%" y="239.50">allo..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (227 samples, 3.35%)</title><rect x="2.8319%" y="213" width="3.3481%" height="15" fill="rgb(239,60,40)" fg:x="192" fg:w="227"/><text x="3.0819%" y="223.50">all..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (8 samples, 0.12%)</title><rect x="6.0619%" y="197" width="0.1180%" height="15" fill="rgb(206,27,48)" fg:x="411" fg:w="8"/><text x="6.3119%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (4 samples, 0.06%)</title><rect x="6.1209%" y="181" width="0.0590%" height="15" fill="rgb(225,35,8)" fg:x="415" fg:w="4"/><text x="6.3709%" y="191.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.04%)</title><rect x="6.1799%" y="245" width="0.0442%" height="15" fill="rgb(250,213,24)" fg:x="419" fg:w="3"/><text x="6.4299%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (10 samples, 0.15%)</title><rect x="7.5664%" y="229" width="0.1475%" height="15" fill="rgb(247,123,22)" fg:x="513" fg:w="10"/><text x="7.8164%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="7.6696%" y="213" width="0.0442%" height="15" fill="rgb(231,138,38)" fg:x="520" fg:w="3"/><text x="7.9196%" y="223.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (1 samples, 0.01%)</title><rect x="9.6165%" y="213" width="0.0147%" height="15" fill="rgb(231,145,46)" fg:x="652" fg:w="1"/><text x="9.8665%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (191 samples, 2.82%)</title><rect x="9.6313%" y="213" width="2.8171%" height="15" fill="rgb(251,118,11)" fg:x="653" fg:w="191"/><text x="9.8813%" y="223.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 1.36%)</title><rect x="11.0914%" y="197" width="1.3569%" height="15" fill="rgb(217,147,25)" fg:x="752" fg:w="92"/><text x="11.3414%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (9 samples, 0.13%)</title><rect x="12.4484%" y="213" width="0.1327%" height="15" fill="rgb(247,81,37)" fg:x="844" fg:w="9"/><text x="12.6984%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (36 samples, 0.53%)</title><rect x="12.5811%" y="213" width="0.5310%" height="15" fill="rgb(209,12,38)" fg:x="853" fg:w="36"/><text x="12.8311%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (10 samples, 0.15%)</title><rect x="12.9646%" y="197" width="0.1475%" height="15" fill="rgb(227,1,9)" fg:x="879" fg:w="10"/><text x="13.2146%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (773 samples, 11.40%)</title><rect x="1.9912%" y="261" width="11.4012%" height="15" fill="rgb(248,47,43)" fg:x="135" fg:w="773"/><text x="2.2412%" y="271.50">alloc::collection..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (486 samples, 7.17%)</title><rect x="6.2242%" y="245" width="7.1681%" height="15" fill="rgb(221,10,30)" fg:x="422" fg:w="486"/><text x="6.4742%" y="255.50">alloc::col..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (385 samples, 5.68%)</title><rect x="7.7139%" y="229" width="5.6785%" height="15" fill="rgb(210,229,1)" fg:x="523" fg:w="385"/><text x="7.9639%" y="239.50">alloc::..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (19 samples, 0.28%)</title><rect x="13.1121%" y="213" width="0.2802%" height="15" fill="rgb(222,148,37)" fg:x="889" fg:w="19"/><text x="13.3621%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (784 samples, 11.56%)</title><rect x="1.8584%" y="277" width="11.5634%" height="15" fill="rgb(234,67,33)" fg:x="126" fg:w="784"/><text x="2.1084%" y="287.50">alloc::collection..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.03%)</title><rect x="13.3923%" y="261" width="0.0295%" height="15" fill="rgb(247,98,35)" fg:x="908" fg:w="2"/><text x="13.6423%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (2 samples, 0.03%)</title><rect x="13.4218%" y="277" width="0.0295%" height="15" fill="rgb(247,138,52)" fg:x="910" fg:w="2"/><text x="13.6718%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (79 samples, 1.17%)</title><rect x="13.4513%" y="277" width="1.1652%" height="15" fill="rgb(213,79,30)" fg:x="912" fg:w="79"/><text x="13.7013%" y="287.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="14.6018%" y="261" width="0.0147%" height="15" fill="rgb(246,177,23)" fg:x="990" fg:w="1"/><text x="14.8518%" y="271.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.01%)</title><rect x="17.6991%" y="261" width="0.0147%" height="15" fill="rgb(230,62,27)" fg:x="1200" fg:w="1"/><text x="17.9491%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.24%)</title><rect x="17.7139%" y="261" width="0.2360%" height="15" fill="rgb(216,154,8)" fg:x="1201" fg:w="16"/><text x="17.9639%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (46 samples, 0.68%)</title><rect x="18.8348%" y="245" width="0.6785%" height="15" fill="rgb(244,35,45)" fg:x="1277" fg:w="46"/><text x="19.0848%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (185 samples, 2.73%)</title><rect x="17.9499%" y="261" width="2.7286%" height="15" fill="rgb(251,115,12)" fg:x="1217" fg:w="185"/><text x="18.1999%" y="271.50">&lt;a..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (79 samples, 1.17%)</title><rect x="19.5133%" y="245" width="1.1652%" height="15" fill="rgb(240,54,50)" fg:x="1323" fg:w="79"/><text x="19.7633%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.01%)</title><rect x="20.6785%" y="261" width="0.0147%" height="15" fill="rgb(233,84,52)" fg:x="1402" fg:w="1"/><text x="20.9285%" y="271.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (10 samples, 0.15%)</title><rect x="20.6932%" y="261" width="0.1475%" height="15" fill="rgb(207,117,47)" fg:x="1403" fg:w="10"/><text x="20.9432%" y="271.50"></text></g><g><title>alloc::string::String::from_utf8 (2 samples, 0.03%)</title><rect x="20.8407%" y="261" width="0.0295%" height="15" fill="rgb(249,43,39)" fg:x="1413" fg:w="2"/><text x="21.0907%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.06%)</title><rect x="20.8702%" y="261" width="0.0590%" height="15" fill="rgb(209,38,44)" fg:x="1415" fg:w="4"/><text x="21.1202%" y="271.50"></text></g><g><title>bitbeat::Process::new (3 samples, 0.04%)</title><rect x="20.9292%" y="261" width="0.0442%" height="15" fill="rgb(236,212,23)" fg:x="1419" fg:w="3"/><text x="21.1792%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="21.4159%" y="245" width="0.0147%" height="15" fill="rgb(242,79,21)" fg:x="1452" fg:w="1"/><text x="21.6659%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.10%)</title><rect x="21.5634%" y="229" width="0.1032%" height="15" fill="rgb(211,96,35)" fg:x="1462" fg:w="7"/><text x="21.8134%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (26 samples, 0.38%)</title><rect x="21.4307%" y="245" width="0.3835%" height="15" fill="rgb(253,215,40)" fg:x="1453" fg:w="26"/><text x="21.6807%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.15%)</title><rect x="21.6667%" y="229" width="0.1475%" height="15" fill="rgb(211,81,21)" fg:x="1469" fg:w="10"/><text x="21.9167%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="21.8142%" y="245" width="0.0147%" height="15" fill="rgb(208,190,38)" fg:x="1479" fg:w="1"/><text x="22.0642%" y="255.50"></text></g><g><title>bitbeat::handle_add (60 samples, 0.88%)</title><rect x="20.9735%" y="261" width="0.8850%" height="15" fill="rgb(235,213,38)" fg:x="1422" fg:w="60"/><text x="21.2235%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (2 samples, 0.03%)</title><rect x="21.8289%" y="245" width="0.0295%" height="15" fill="rgb(237,122,38)" fg:x="1480" fg:w="2"/><text x="22.0789%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="22.7139%" y="245" width="0.0442%" height="15" fill="rgb(244,218,35)" fg:x="1540" fg:w="3"/><text x="22.9639%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.13%)</title><rect x="22.9204%" y="229" width="0.1327%" height="15" fill="rgb(240,68,47)" fg:x="1554" fg:w="9"/><text x="23.1704%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 0.58%)</title><rect x="22.7581%" y="245" width="0.5752%" height="15" fill="rgb(210,16,53)" fg:x="1543" fg:w="39"/><text x="23.0081%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (19 samples, 0.28%)</title><rect x="23.0531%" y="229" width="0.2802%" height="15" fill="rgb(235,124,12)" fg:x="1563" fg:w="19"/><text x="23.3031%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.04%)</title><rect x="23.3333%" y="245" width="0.0442%" height="15" fill="rgb(224,169,11)" fg:x="1582" fg:w="3"/><text x="23.5833%" y="255.50"></text></g><g><title>bitbeat::handle_cmp_le (107 samples, 1.58%)</title><rect x="21.8584%" y="261" width="1.5782%" height="15" fill="rgb(250,166,2)" fg:x="1482" fg:w="107"/><text x="22.1084%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (4 samples, 0.06%)</title><rect x="23.3776%" y="245" width="0.0590%" height="15" fill="rgb(242,216,29)" fg:x="1585" fg:w="4"/><text x="23.6276%" y="255.50"></text></g><g><title>bitbeat::handle_halt (5 samples, 0.07%)</title><rect x="23.4366%" y="261" width="0.0737%" height="15" fill="rgb(230,116,27)" fg:x="1589" fg:w="5"/><text x="23.6866%" y="271.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (26 samples, 0.38%)</title><rect x="24.4690%" y="245" width="0.3835%" height="15" fill="rgb(228,99,48)" fg:x="1659" fg:w="26"/><text x="24.7190%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (16 samples, 0.24%)</title><rect x="24.6165%" y="229" width="0.2360%" height="15" fill="rgb(253,11,6)" fg:x="1669" fg:w="16"/><text x="24.8665%" y="239.50"></text></g><g><title> N]&gt;::try_from (16 samples, 0.24%)</title><rect x="24.6165%" y="213" width="0.2360%" height="15" fill="rgb(247,143,39)" fg:x="1669" fg:w="16"/><text x="24.8665%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.06%)</title><rect x="24.8525%" y="245" width="0.0590%" height="15" fill="rgb(236,97,10)" fg:x="1685" fg:w="4"/><text x="25.1025%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.04%)</title><rect x="25.1917%" y="229" width="0.0442%" height="15" fill="rgb(233,208,19)" fg:x="1708" fg:w="3"/><text x="25.4417%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (43 samples, 0.63%)</title><rect x="24.9115%" y="245" width="0.6342%" height="15" fill="rgb(216,164,2)" fg:x="1689" fg:w="43"/><text x="25.1615%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (21 samples, 0.31%)</title><rect x="25.2360%" y="229" width="0.3097%" height="15" fill="rgb(220,129,5)" fg:x="1711" fg:w="21"/><text x="25.4860%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.18%)</title><rect x="25.5457%" y="245" width="0.1770%" height="15" fill="rgb(242,17,10)" fg:x="1732" fg:w="12"/><text x="25.7957%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="25.7227%" y="245" width="0.0147%" height="15" fill="rgb(242,107,0)" fg:x="1744" fg:w="1"/><text x="25.9727%" y="255.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (2 samples, 0.03%)</title><rect x="25.7375%" y="245" width="0.0295%" height="15" fill="rgb(251,28,31)" fg:x="1745" fg:w="2"/><text x="25.9875%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u32,anyhow::Error&gt;&gt; (3 samples, 0.04%)</title><rect x="25.7670%" y="245" width="0.0442%" height="15" fill="rgb(233,223,10)" fg:x="1747" fg:w="3"/><text x="26.0170%" y="255.50"></text></g><g><title>bitbeat::handle_jump_if (159 samples, 2.35%)</title><rect x="23.5103%" y="261" width="2.3451%" height="15" fill="rgb(215,21,27)" fg:x="1594" fg:w="159"/><text x="23.7603%" y="271.50">b..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (3 samples, 0.04%)</title><rect x="25.8112%" y="245" width="0.0442%" height="15" fill="rgb(232,23,21)" fg:x="1750" fg:w="3"/><text x="26.0612%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (40 samples, 0.59%)</title><rect x="27.9056%" y="245" width="0.5900%" height="15" fill="rgb(244,5,23)" fg:x="1892" fg:w="40"/><text x="28.1556%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (36 samples, 0.53%)</title><rect x="27.9646%" y="229" width="0.5310%" height="15" fill="rgb(226,81,46)" fg:x="1896" fg:w="36"/><text x="28.2146%" y="239.50"></text></g><g><title> N]&gt;::try_from (36 samples, 0.53%)</title><rect x="27.9646%" y="213" width="0.5310%" height="15" fill="rgb(247,70,30)" fg:x="1896" fg:w="36"/><text x="28.2146%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.13%)</title><rect x="28.4956%" y="245" width="0.1327%" height="15" fill="rgb(212,68,19)" fg:x="1932" fg:w="9"/><text x="28.7456%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.12%)</title><rect x="29.0855%" y="229" width="0.1180%" height="15" fill="rgb(240,187,13)" fg:x="1972" fg:w="8"/><text x="29.3355%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (66 samples, 0.97%)</title><rect x="28.6283%" y="245" width="0.9735%" height="15" fill="rgb(223,113,26)" fg:x="1941" fg:w="66"/><text x="28.8783%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (27 samples, 0.40%)</title><rect x="29.2035%" y="229" width="0.3982%" height="15" fill="rgb(206,192,2)" fg:x="1980" fg:w="27"/><text x="29.4535%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (35 samples, 0.52%)</title><rect x="29.6018%" y="245" width="0.5162%" height="15" fill="rgb(241,108,4)" fg:x="2007" fg:w="35"/><text x="29.8518%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.03%)</title><rect x="30.1180%" y="245" width="0.0295%" height="15" fill="rgb(247,173,49)" fg:x="2042" fg:w="2"/><text x="30.3680%" y="255.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_le_bytes (1 samples, 0.01%)</title><rect x="30.1475%" y="245" width="0.0147%" height="15" fill="rgb(224,114,35)" fg:x="2044" fg:w="1"/><text x="30.3975%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;i64,anyhow::Error&gt;&gt; (6 samples, 0.09%)</title><rect x="30.1622%" y="245" width="0.0885%" height="15" fill="rgb(245,159,27)" fg:x="2045" fg:w="6"/><text x="30.4122%" y="255.50"></text></g><g><title>bitbeat::handle_load_imm (301 samples, 4.44%)</title><rect x="25.8555%" y="261" width="4.4395%" height="15" fill="rgb(245,172,44)" fg:x="1753" fg:w="301"/><text x="26.1055%" y="271.50">bitbe..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (3 samples, 0.04%)</title><rect x="30.2507%" y="245" width="0.0442%" height="15" fill="rgb(236,23,11)" fg:x="2051" fg:w="3"/><text x="30.5007%" y="255.50"></text></g><g><title>bitbeat::handle_print (1 samples, 0.01%)</title><rect x="30.2950%" y="261" width="0.0147%" height="15" fill="rgb(205,117,38)" fg:x="2054" fg:w="1"/><text x="30.5450%" y="271.50"></text></g><g><title>std::io::stdio::_print (1 samples, 0.01%)</title><rect x="30.2950%" y="245" width="0.0147%" height="15" fill="rgb(237,72,25)" fg:x="2054" fg:w="1"/><text x="30.5450%" y="255.50"></text></g><g><title>std::sync::once_lock::OnceLock&lt;T&gt;::initialize (1 samples, 0.01%)</title><rect x="30.2950%" y="229" width="0.0147%" height="15" fill="rgb(244,70,9)" fg:x="2054" fg:w="1"/><text x="30.5450%" y="239.50"></text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 0.01%)</title><rect x="30.2950%" y="213" width="0.0147%" height="15" fill="rgb(217,125,39)" fg:x="2054" fg:w="1"/><text x="30.5450%" y="223.50"></text></g><g><title>std::sync::poison::once::Once::call_once_force::_{{closure}} (1 samples, 0.01%)</title><rect x="30.2950%" y="197" width="0.0147%" height="15" fill="rgb(235,36,10)" fg:x="2054" fg:w="1"/><text x="30.5450%" y="207.50"></text></g><g><title>szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="30.2950%" y="181" width="0.0147%" height="15" fill="rgb(251,123,47)" fg:x="2054" fg:w="1"/><text x="30.5450%" y="191.50"></text></g><g><title>small_malloc_should_clear (1 samples, 0.01%)</title><rect x="30.2950%" y="165" width="0.0147%" height="15" fill="rgb(221,13,13)" fg:x="2054" fg:w="1"/><text x="30.5450%" y="175.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="30.9587%" y="245" width="0.0442%" height="15" fill="rgb(238,131,9)" fg:x="2099" fg:w="3"/><text x="31.2087%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.07%)</title><rect x="31.1504%" y="229" width="0.0737%" height="15" fill="rgb(211,50,8)" fg:x="2112" fg:w="5"/><text x="31.4004%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (25 samples, 0.37%)</title><rect x="31.0029%" y="245" width="0.3687%" height="15" fill="rgb(245,182,24)" fg:x="2102" fg:w="25"/><text x="31.2529%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.15%)</title><rect x="31.2242%" y="229" width="0.1475%" height="15" fill="rgb(242,14,37)" fg:x="2117" fg:w="10"/><text x="31.4742%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (27 samples, 0.40%)</title><rect x="31.3717%" y="245" width="0.3982%" height="15" fill="rgb(246,228,12)" fg:x="2127" fg:w="27"/><text x="31.6217%" y="255.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="31.7257%" y="229" width="0.0442%" height="15" fill="rgb(213,55,15)" fg:x="2151" fg:w="3"/><text x="31.9757%" y="239.50"></text></g><g><title>bitbeat::handle_recv (102 samples, 1.50%)</title><rect x="30.3097%" y="261" width="1.5044%" height="15" fill="rgb(209,9,3)" fg:x="2055" fg:w="102"/><text x="30.5597%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (3 samples, 0.04%)</title><rect x="31.7699%" y="245" width="0.0442%" height="15" fill="rgb(230,59,30)" fg:x="2154" fg:w="3"/><text x="32.0199%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="32.5664%" y="229" width="0.0147%" height="15" fill="rgb(209,121,21)" fg:x="2208" fg:w="1"/><text x="32.8164%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.19%)</title><rect x="32.5221%" y="245" width="0.1917%" height="15" fill="rgb(220,109,13)" fg:x="2205" fg:w="13"/><text x="32.7721%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (9 samples, 0.13%)</title><rect x="32.5811%" y="229" width="0.1327%" height="15" fill="rgb(232,18,1)" fg:x="2209" fg:w="9"/><text x="32.8311%" y="239.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="32.6991%" y="213" width="0.0147%" height="15" fill="rgb(215,41,42)" fg:x="2217" fg:w="1"/><text x="32.9491%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="32.7139%" y="245" width="0.0442%" height="15" fill="rgb(224,123,36)" fg:x="2218" fg:w="3"/><text x="32.9639%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.10%)</title><rect x="32.8909%" y="229" width="0.1032%" height="15" fill="rgb(240,125,3)" fg:x="2230" fg:w="7"/><text x="33.1409%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (37 samples, 0.55%)</title><rect x="32.7581%" y="245" width="0.5457%" height="15" fill="rgb(205,98,50)" fg:x="2221" fg:w="37"/><text x="33.0081%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (21 samples, 0.31%)</title><rect x="32.9941%" y="229" width="0.3097%" height="15" fill="rgb(205,185,37)" fg:x="2237" fg:w="21"/><text x="33.2441%" y="239.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.01%)</title><rect x="33.3038%" y="245" width="0.0147%" height="15" fill="rgb(238,207,15)" fg:x="2258" fg:w="1"/><text x="33.5538%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (14 samples, 0.21%)</title><rect x="33.5103%" y="229" width="0.2065%" height="15" fill="rgb(213,199,42)" fg:x="2272" fg:w="14"/><text x="33.7603%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (7 samples, 0.10%)</title><rect x="33.6136%" y="213" width="0.1032%" height="15" fill="rgb(235,201,11)" fg:x="2279" fg:w="7"/><text x="33.8636%" y="223.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.04%)</title><rect x="33.7168%" y="229" width="0.0442%" height="15" fill="rgb(207,46,11)" fg:x="2286" fg:w="3"/><text x="33.9668%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (11 samples, 0.16%)</title><rect x="34.6903%" y="213" width="0.1622%" height="15" fill="rgb(241,35,35)" fg:x="2352" fg:w="11"/><text x="34.9403%" y="223.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (7 samples, 0.10%)</title><rect x="36.6519%" y="197" width="0.1032%" height="15" fill="rgb(243,32,47)" fg:x="2485" fg:w="7"/><text x="36.9019%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (177 samples, 2.61%)</title><rect x="36.7552%" y="197" width="2.6106%" height="15" fill="rgb(247,202,23)" fg:x="2492" fg:w="177"/><text x="37.0052%" y="207.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 1.34%)</title><rect x="38.0236%" y="181" width="1.3422%" height="15" fill="rgb(219,102,11)" fg:x="2578" fg:w="91"/><text x="38.2736%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (8 samples, 0.12%)</title><rect x="39.3658%" y="197" width="0.1180%" height="15" fill="rgb(243,110,44)" fg:x="2669" fg:w="8"/><text x="39.6158%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (37 samples, 0.55%)</title><rect x="39.4838%" y="197" width="0.5457%" height="15" fill="rgb(222,74,54)" fg:x="2677" fg:w="37"/><text x="39.7338%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (7 samples, 0.10%)</title><rect x="39.9263%" y="181" width="0.1032%" height="15" fill="rgb(216,99,12)" fg:x="2707" fg:w="7"/><text x="40.1763%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get_mut (479 samples, 7.06%)</title><rect x="33.3186%" y="245" width="7.0649%" height="15" fill="rgb(226,22,26)" fg:x="2259" fg:w="479"/><text x="33.5686%" y="255.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (449 samples, 6.62%)</title><rect x="33.7611%" y="229" width="6.6224%" height="15" fill="rgb(217,163,10)" fg:x="2289" fg:w="449"/><text x="34.0111%" y="239.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (375 samples, 5.53%)</title><rect x="34.8525%" y="213" width="5.5310%" height="15" fill="rgb(213,25,53)" fg:x="2363" fg:w="375"/><text x="35.1025%" y="223.50">alloc::..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (24 samples, 0.35%)</title><rect x="40.0295%" y="197" width="0.3540%" height="15" fill="rgb(252,105,26)" fg:x="2714" fg:w="24"/><text x="40.2795%" y="207.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.03%)</title><rect x="40.3835%" y="245" width="0.0295%" height="15" fill="rgb(220,39,43)" fg:x="2738" fg:w="2"/><text x="40.6335%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (4 samples, 0.06%)</title><rect x="41.5192%" y="213" width="0.0590%" height="15" fill="rgb(229,68,48)" fg:x="2815" fg:w="4"/><text x="41.7692%" y="223.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="41.6224%" y="165" width="0.0590%" height="15" fill="rgb(252,8,32)" fg:x="2822" fg:w="4"/><text x="41.8724%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 0.19%)</title><rect x="41.5782%" y="213" width="0.1917%" height="15" fill="rgb(223,20,43)" fg:x="2819" fg:w="13"/><text x="41.8282%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (13 samples, 0.19%)</title><rect x="41.5782%" y="197" width="0.1917%" height="15" fill="rgb(229,81,49)" fg:x="2819" fg:w="13"/><text x="41.8282%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.16%)</title><rect x="41.6077%" y="181" width="0.1622%" height="15" fill="rgb(236,28,36)" fg:x="2821" fg:w="11"/><text x="41.8577%" y="191.50"></text></g><g><title>nanov2_malloc_type (6 samples, 0.09%)</title><rect x="41.6814%" y="165" width="0.0885%" height="15" fill="rgb(249,185,26)" fg:x="2826" fg:w="6"/><text x="41.9314%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (26 samples, 0.38%)</title><rect x="41.4159%" y="229" width="0.3835%" height="15" fill="rgb(249,174,33)" fg:x="2808" fg:w="26"/><text x="41.6659%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.03%)</title><rect x="41.7699%" y="213" width="0.0295%" height="15" fill="rgb(233,201,37)" fg:x="2832" fg:w="2"/><text x="42.0199%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (96 samples, 1.42%)</title><rect x="40.4130%" y="245" width="1.4159%" height="15" fill="rgb(221,78,26)" fg:x="2740" fg:w="96"/><text x="40.6630%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (2 samples, 0.03%)</title><rect x="41.7994%" y="229" width="0.0295%" height="15" fill="rgb(250,127,30)" fg:x="2834" fg:w="2"/><text x="42.0494%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="41.8289%" y="245" width="0.0147%" height="15" fill="rgb(230,49,44)" fg:x="2836" fg:w="1"/><text x="42.0789%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (14 samples, 0.21%)</title><rect x="41.8437%" y="245" width="0.2065%" height="15" fill="rgb(229,67,23)" fg:x="2837" fg:w="14"/><text x="42.0937%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (13 samples, 0.19%)</title><rect x="41.8584%" y="229" width="0.1917%" height="15" fill="rgb(249,83,47)" fg:x="2838" fg:w="13"/><text x="42.1084%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (2 samples, 0.03%)</title><rect x="42.0206%" y="213" width="0.0295%" height="15" fill="rgb(215,43,3)" fg:x="2849" fg:w="2"/><text x="42.2706%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (4 samples, 0.06%)</title><rect x="42.0501%" y="245" width="0.0590%" height="15" fill="rgb(238,154,13)" fg:x="2851" fg:w="4"/><text x="42.3001%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.04%)</title><rect x="42.0649%" y="229" width="0.0442%" height="15" fill="rgb(219,56,2)" fg:x="2852" fg:w="3"/><text x="42.3149%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="42.0944%" y="213" width="0.0147%" height="15" fill="rgb(233,0,4)" fg:x="2854" fg:w="1"/><text x="42.3444%" y="223.50"></text></g><g><title>bitbeat::handle_send (704 samples, 10.38%)</title><rect x="31.8142%" y="261" width="10.3835%" height="15" fill="rgb(235,30,7)" fg:x="2157" fg:w="704"/><text x="32.0642%" y="271.50">bitbeat::handle..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (6 samples, 0.09%)</title><rect x="42.1091%" y="245" width="0.0885%" height="15" fill="rgb(250,79,13)" fg:x="2855" fg:w="6"/><text x="42.3591%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (68 samples, 1.00%)</title><rect x="47.3304%" y="245" width="1.0029%" height="15" fill="rgb(211,146,34)" fg:x="3209" fg:w="68"/><text x="47.5804%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (56 samples, 0.83%)</title><rect x="47.5074%" y="229" width="0.8260%" height="15" fill="rgb(228,22,38)" fg:x="3221" fg:w="56"/><text x="47.7574%" y="239.50"></text></g><g><title> N]&gt;::try_from (56 samples, 0.83%)</title><rect x="47.5074%" y="213" width="0.8260%" height="15" fill="rgb(235,168,5)" fg:x="3221" fg:w="56"/><text x="47.7574%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="48.3923%" y="229" width="0.0147%" height="15" fill="rgb(221,155,16)" fg:x="3281" fg:w="1"/><text x="48.6423%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (1 samples, 0.01%)</title><rect x="48.5988%" y="213" width="0.0147%" height="15" fill="rgb(215,215,53)" fg:x="3295" fg:w="1"/><text x="48.8488%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.32%)</title><rect x="48.3333%" y="245" width="0.3245%" height="15" fill="rgb(223,4,10)" fg:x="3277" fg:w="22"/><text x="48.5833%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (17 samples, 0.25%)</title><rect x="48.4071%" y="229" width="0.2507%" height="15" fill="rgb(234,103,6)" fg:x="3282" fg:w="17"/><text x="48.6571%" y="239.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="48.6136%" y="213" width="0.0442%" height="15" fill="rgb(227,97,0)" fg:x="3296" fg:w="3"/><text x="48.8636%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (31 samples, 0.46%)</title><rect x="48.6578%" y="245" width="0.4572%" height="15" fill="rgb(234,150,53)" fg:x="3299" fg:w="31"/><text x="48.9078%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.16%)</title><rect x="49.1150%" y="245" width="0.1622%" height="15" fill="rgb(228,201,54)" fg:x="3330" fg:w="11"/><text x="49.3650%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (34 samples, 0.50%)</title><rect x="49.2773%" y="245" width="0.5015%" height="15" fill="rgb(222,22,37)" fg:x="3341" fg:w="34"/><text x="49.5273%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (28 samples, 0.41%)</title><rect x="49.3658%" y="229" width="0.4130%" height="15" fill="rgb(237,53,32)" fg:x="3347" fg:w="28"/><text x="49.6158%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (16 samples, 0.24%)</title><rect x="49.5428%" y="213" width="0.2360%" height="15" fill="rgb(233,25,53)" fg:x="3359" fg:w="16"/><text x="49.7928%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.06%)</title><rect x="52.1386%" y="229" width="0.0590%" height="15" fill="rgb(210,40,34)" fg:x="3535" fg:w="4"/><text x="52.3886%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (241 samples, 3.55%)</title><rect x="49.7788%" y="245" width="3.5546%" height="15" fill="rgb(241,220,44)" fg:x="3375" fg:w="241"/><text x="50.0288%" y="255.50">&lt;all..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (77 samples, 1.14%)</title><rect x="52.1976%" y="229" width="1.1357%" height="15" fill="rgb(235,28,35)" fg:x="3539" fg:w="77"/><text x="52.4476%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (68 samples, 1.00%)</title><rect x="53.3333%" y="245" width="1.0029%" height="15" fill="rgb(210,56,17)" fg:x="3616" fg:w="68"/><text x="53.5833%" y="255.50"></text></g><g><title>_platform_memmove (2 samples, 0.03%)</title><rect x="54.3363%" y="245" width="0.0295%" height="15" fill="rgb(224,130,29)" fg:x="3684" fg:w="2"/><text x="54.5863%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (2 samples, 0.03%)</title><rect x="54.3658%" y="245" width="0.0295%" height="15" fill="rgb(235,212,8)" fg:x="3686" fg:w="2"/><text x="54.6158%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (27 samples, 0.40%)</title><rect x="55.2212%" y="229" width="0.3982%" height="15" fill="rgb(223,33,50)" fg:x="3744" fg:w="27"/><text x="55.4712%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (9 samples, 0.13%)</title><rect x="55.4867%" y="213" width="0.1327%" height="15" fill="rgb(219,149,13)" fg:x="3762" fg:w="9"/><text x="55.7367%" y="223.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.04%)</title><rect x="55.6195%" y="229" width="0.0442%" height="15" fill="rgb(250,156,29)" fg:x="3771" fg:w="3"/><text x="55.8695%" y="239.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.01%)</title><rect x="56.8584%" y="197" width="0.0147%" height="15" fill="rgb(216,193,19)" fg:x="3855" fg:w="1"/><text x="57.1084%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.83%)</title><rect x="56.8732%" y="197" width="0.8260%" height="15" fill="rgb(216,135,14)" fg:x="3856" fg:w="56"/><text x="57.1232%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.46%)</title><rect x="57.2419%" y="181" width="0.4572%" height="15" fill="rgb(241,47,5)" fg:x="3881" fg:w="31"/><text x="57.4919%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (7 samples, 0.10%)</title><rect x="57.6991%" y="197" width="0.1032%" height="15" fill="rgb(233,42,35)" fg:x="3912" fg:w="7"/><text x="57.9491%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (57 samples, 0.84%)</title><rect x="57.8024%" y="197" width="0.8407%" height="15" fill="rgb(231,13,6)" fg:x="3919" fg:w="57"/><text x="58.0524%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (7 samples, 0.10%)</title><rect x="58.5398%" y="181" width="0.1032%" height="15" fill="rgb(207,181,40)" fg:x="3969" fg:w="7"/><text x="58.7898%" y="191.50"></text></g><g><title>alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (40 samples, 0.59%)</title><rect x="58.6431%" y="197" width="0.5900%" height="15" fill="rgb(254,173,49)" fg:x="3976" fg:w="40"/><text x="58.8931%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (37 samples, 0.55%)</title><rect x="58.6873%" y="181" width="0.5457%" height="15" fill="rgb(221,1,38)" fg:x="3979" fg:w="37"/><text x="58.9373%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (28 samples, 0.41%)</title><rect x="58.8201%" y="165" width="0.4130%" height="15" fill="rgb(206,124,46)" fg:x="3988" fg:w="28"/><text x="59.0701%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (373 samples, 5.50%)</title><rect x="54.3953%" y="245" width="5.5015%" height="15" fill="rgb(249,21,11)" fg:x="3688" fg:w="373"/><text x="54.6453%" y="255.50">alloc::..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (287 samples, 4.23%)</title><rect x="55.6637%" y="229" width="4.2330%" height="15" fill="rgb(222,201,40)" fg:x="3774" fg:w="287"/><text x="55.9137%" y="239.50">alloc..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (252 samples, 3.72%)</title><rect x="56.1799%" y="213" width="3.7168%" height="15" fill="rgb(235,61,29)" fg:x="3809" fg:w="252"/><text x="56.4299%" y="223.50">allo..</text></g><g><title>core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (45 samples, 0.66%)</title><rect x="59.2330%" y="197" width="0.6637%" height="15" fill="rgb(219,207,3)" fg:x="4016" fg:w="45"/><text x="59.4830%" y="207.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (41 samples, 0.60%)</title><rect x="59.2920%" y="181" width="0.6047%" height="15" fill="rgb(222,56,46)" fg:x="4020" fg:w="41"/><text x="59.5420%" y="191.50"></text></g><g><title>_platform_memcmp (11 samples, 0.16%)</title><rect x="59.7345%" y="165" width="0.1622%" height="15" fill="rgb(239,76,54)" fg:x="4050" fg:w="11"/><text x="59.9845%" y="175.50"></text></g><g><title>_platform_memmove (6 samples, 0.09%)</title><rect x="60.0590%" y="229" width="0.0885%" height="15" fill="rgb(231,124,27)" fg:x="4072" fg:w="6"/><text x="60.3090%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="60.3687%" y="213" width="0.0147%" height="15" fill="rgb(249,195,6)" fg:x="4093" fg:w="1"/><text x="60.6187%" y="223.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="60.3835%" y="213" width="0.0147%" height="15" fill="rgb(237,174,47)" fg:x="4094" fg:w="1"/><text x="60.6335%" y="223.50"></text></g><g><title>_platform_memmove (9 samples, 0.13%)</title><rect x="60.3982%" y="213" width="0.1327%" height="15" fill="rgb(206,201,31)" fg:x="4095" fg:w="9"/><text x="60.6482%" y="223.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.01%)</title><rect x="60.5310%" y="213" width="0.0147%" height="15" fill="rgb(231,57,52)" fg:x="4104" fg:w="1"/><text x="60.7810%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="61.6962%" y="197" width="0.0147%" height="15" fill="rgb(248,177,22)" fg:x="4183" fg:w="1"/><text x="61.9462%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (5 samples, 0.07%)</title><rect x="61.7109%" y="197" width="0.0737%" height="15" fill="rgb(215,211,37)" fg:x="4184" fg:w="5"/><text x="61.9609%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="61.7699%" y="181" width="0.0147%" height="15" fill="rgb(241,128,51)" fg:x="4188" fg:w="1"/><text x="62.0199%" y="191.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (8 samples, 0.12%)</title><rect x="63.0973%" y="181" width="0.1180%" height="15" fill="rgb(227,165,31)" fg:x="4278" fg:w="8"/><text x="63.3473%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (230 samples, 3.39%)</title><rect x="63.2153%" y="181" width="3.3923%" height="15" fill="rgb(228,167,24)" fg:x="4286" fg:w="230"/><text x="63.4653%" y="191.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 1.83%)</title><rect x="64.7788%" y="165" width="1.8289%" height="15" fill="rgb(228,143,12)" fg:x="4392" fg:w="124"/><text x="65.0288%" y="175.50">&lt;..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (8 samples, 0.12%)</title><rect x="66.6077%" y="181" width="0.1180%" height="15" fill="rgb(249,149,8)" fg:x="4516" fg:w="8"/><text x="66.8577%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (41 samples, 0.60%)</title><rect x="66.7257%" y="181" width="0.6047%" height="15" fill="rgb(243,35,44)" fg:x="4524" fg:w="41"/><text x="66.9757%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (5 samples, 0.07%)</title><rect x="67.2566%" y="165" width="0.0737%" height="15" fill="rgb(246,89,9)" fg:x="4560" fg:w="5"/><text x="67.5066%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (505 samples, 7.45%)</title><rect x="60.1475%" y="229" width="7.4484%" height="15" fill="rgb(233,213,13)" fg:x="4078" fg:w="505"/><text x="60.3975%" y="239.50">alloc::col..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (478 samples, 7.05%)</title><rect x="60.5457%" y="213" width="7.0501%" height="15" fill="rgb(233,141,41)" fg:x="4105" fg:w="478"/><text x="60.7957%" y="223.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (394 samples, 5.81%)</title><rect x="61.7847%" y="197" width="5.8112%" height="15" fill="rgb(239,167,4)" fg:x="4189" fg:w="394"/><text x="62.0347%" y="207.50">alloc::..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (18 samples, 0.27%)</title><rect x="67.3304%" y="181" width="0.2655%" height="15" fill="rgb(209,217,16)" fg:x="4565" fg:w="18"/><text x="67.5804%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::into_mut (12 samples, 0.18%)</title><rect x="67.5959%" y="229" width="0.1770%" height="15" fill="rgb(219,88,35)" fg:x="4583" fg:w="12"/><text x="67.8459%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (8 samples, 0.12%)</title><rect x="67.6549%" y="213" width="0.1180%" height="15" fill="rgb(220,193,23)" fg:x="4587" fg:w="8"/><text x="67.9049%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (1 samples, 0.01%)</title><rect x="67.7581%" y="197" width="0.0147%" height="15" fill="rgb(230,90,52)" fg:x="4594" fg:w="1"/><text x="68.0081%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.01%)</title><rect x="67.9646%" y="213" width="0.0147%" height="15" fill="rgb(252,106,19)" fg:x="4608" fg:w="1"/><text x="68.2146%" y="223.50"></text></g><g><title>_platform_memmove (2 samples, 0.03%)</title><rect x="68.3038%" y="197" width="0.0295%" height="15" fill="rgb(206,74,20)" fg:x="4631" fg:w="2"/><text x="68.5538%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (1 samples, 0.01%)</title><rect x="68.4071%" y="165" width="0.0147%" height="15" fill="rgb(230,138,44)" fg:x="4638" fg:w="1"/><text x="68.6571%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (3 samples, 0.04%)</title><rect x="68.4366%" y="149" width="0.0442%" height="15" fill="rgb(235,182,43)" fg:x="4640" fg:w="3"/><text x="68.6866%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.03%)</title><rect x="68.4513%" y="133" width="0.0295%" height="15" fill="rgb(242,16,51)" fg:x="4641" fg:w="2"/><text x="68.7013%" y="143.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="68.4661%" y="117" width="0.0147%" height="15" fill="rgb(248,9,4)" fg:x="4642" fg:w="1"/><text x="68.7161%" y="127.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (5 samples, 0.07%)</title><rect x="68.4218%" y="165" width="0.0737%" height="15" fill="rgb(210,31,22)" fg:x="4639" fg:w="5"/><text x="68.6718%" y="175.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.01%)</title><rect x="68.4808%" y="149" width="0.0147%" height="15" fill="rgb(239,54,39)" fg:x="4643" fg:w="1"/><text x="68.7308%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.01%)</title><rect x="68.4808%" y="133" width="0.0147%" height="15" fill="rgb(230,99,41)" fg:x="4643" fg:w="1"/><text x="68.7308%" y="143.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.01%)</title><rect x="68.4808%" y="117" width="0.0147%" height="15" fill="rgb(253,106,12)" fg:x="4643" fg:w="1"/><text x="68.7308%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (16 samples, 0.24%)</title><rect x="68.3333%" y="197" width="0.2360%" height="15" fill="rgb(213,46,41)" fg:x="4633" fg:w="16"/><text x="68.5833%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (16 samples, 0.24%)</title><rect x="68.3333%" y="181" width="0.2360%" height="15" fill="rgb(215,133,35)" fg:x="4633" fg:w="16"/><text x="68.5833%" y="191.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (5 samples, 0.07%)</title><rect x="68.4956%" y="165" width="0.0737%" height="15" fill="rgb(213,28,5)" fg:x="4644" fg:w="5"/><text x="68.7456%" y="175.50"></text></g><g><title>_platform_memmove (5 samples, 0.07%)</title><rect x="69.0118%" y="181" width="0.0737%" height="15" fill="rgb(215,77,49)" fg:x="4679" fg:w="5"/><text x="69.2618%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (17 samples, 0.25%)</title><rect x="69.5428%" y="165" width="0.2507%" height="15" fill="rgb(248,100,22)" fg:x="4715" fg:w="17"/><text x="69.7928%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (85 samples, 1.25%)</title><rect x="69.0855%" y="181" width="1.2537%" height="15" fill="rgb(208,67,9)" fg:x="4684" fg:w="85"/><text x="69.3355%" y="191.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (37 samples, 0.55%)</title><rect x="69.7935%" y="165" width="0.5457%" height="15" fill="rgb(219,133,21)" fg:x="4732" fg:w="37"/><text x="70.0435%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.03%)</title><rect x="70.5162%" y="149" width="0.0295%" height="15" fill="rgb(246,46,29)" fg:x="4781" fg:w="2"/><text x="70.7662%" y="159.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (1 samples, 0.01%)</title><rect x="70.5457%" y="149" width="0.0147%" height="15" fill="rgb(246,185,52)" fg:x="4783" fg:w="1"/><text x="70.7957%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (24 samples, 0.35%)</title><rect x="70.3687%" y="165" width="0.3540%" height="15" fill="rgb(252,136,11)" fg:x="4771" fg:w="24"/><text x="70.6187%" y="175.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (11 samples, 0.16%)</title><rect x="70.5605%" y="149" width="0.1622%" height="15" fill="rgb(219,138,53)" fg:x="4784" fg:w="11"/><text x="70.8105%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (9 samples, 0.13%)</title><rect x="70.5900%" y="133" width="0.1327%" height="15" fill="rgb(211,51,23)" fg:x="4786" fg:w="9"/><text x="70.8400%" y="143.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (1 samples, 0.01%)</title><rect x="70.7080%" y="117" width="0.0147%" height="15" fill="rgb(247,221,28)" fg:x="4794" fg:w="1"/><text x="70.9580%" y="127.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (2 samples, 0.03%)</title><rect x="70.8260%" y="69" width="0.0295%" height="15" fill="rgb(251,222,45)" fg:x="4802" fg:w="2"/><text x="71.0760%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.06%)</title><rect x="70.8260%" y="117" width="0.0590%" height="15" fill="rgb(217,162,53)" fg:x="4802" fg:w="4"/><text x="71.0760%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.06%)</title><rect x="70.8260%" y="101" width="0.0590%" height="15" fill="rgb(229,93,14)" fg:x="4802" fg:w="4"/><text x="71.0760%" y="111.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.06%)</title><rect x="70.8260%" y="85" width="0.0590%" height="15" fill="rgb(209,67,49)" fg:x="4802" fg:w="4"/><text x="71.0760%" y="95.50"></text></g><g><title>nanov2_malloc_type (2 samples, 0.03%)</title><rect x="70.8555%" y="69" width="0.0295%" height="15" fill="rgb(213,87,29)" fg:x="4804" fg:w="2"/><text x="71.1055%" y="79.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (158 samples, 2.33%)</title><rect x="68.5693%" y="197" width="2.3304%" height="15" fill="rgb(205,151,52)" fg:x="4649" fg:w="158"/><text x="68.8193%" y="207.50">a..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (38 samples, 0.56%)</title><rect x="70.3392%" y="181" width="0.5605%" height="15" fill="rgb(253,215,39)" fg:x="4769" fg:w="38"/><text x="70.5892%" y="191.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (12 samples, 0.18%)</title><rect x="70.7227%" y="165" width="0.1770%" height="15" fill="rgb(221,220,41)" fg:x="4795" fg:w="12"/><text x="70.9727%" y="175.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (12 samples, 0.18%)</title><rect x="70.7227%" y="149" width="0.1770%" height="15" fill="rgb(218,133,21)" fg:x="4795" fg:w="12"/><text x="70.9727%" y="159.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (11 samples, 0.16%)</title><rect x="70.7375%" y="133" width="0.1622%" height="15" fill="rgb(221,193,43)" fg:x="4796" fg:w="11"/><text x="70.9875%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="70.8850%" y="117" width="0.0147%" height="15" fill="rgb(240,128,52)" fg:x="4806" fg:w="1"/><text x="71.1350%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.03%)</title><rect x="70.8997%" y="197" width="0.0295%" height="15" fill="rgb(253,114,12)" fg:x="4807" fg:w="2"/><text x="71.1497%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (216 samples, 3.19%)</title><rect x="67.7729%" y="229" width="3.1858%" height="15" fill="rgb(215,223,47)" fg:x="4595" fg:w="216"/><text x="68.0229%" y="239.50">all..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (202 samples, 2.98%)</title><rect x="67.9794%" y="213" width="2.9794%" height="15" fill="rgb(248,225,23)" fg:x="4609" fg:w="202"/><text x="68.2294%" y="223.50">all..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (2 samples, 0.03%)</title><rect x="70.9292%" y="197" width="0.0295%" height="15" fill="rgb(250,108,0)" fg:x="4809" fg:w="2"/><text x="71.1792%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.06%)</title><rect x="70.9587%" y="229" width="0.0590%" height="15" fill="rgb(228,208,7)" fg:x="4811" fg:w="4"/><text x="71.2087%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (757 samples, 11.17%)</title><rect x="59.8968%" y="245" width="11.1652%" height="15" fill="rgb(244,45,10)" fg:x="4061" fg:w="757"/><text x="60.1468%" y="255.50">alloc::collectio..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.04%)</title><rect x="71.0177%" y="229" width="0.0442%" height="15" fill="rgb(207,125,25)" fg:x="4815" fg:w="3"/><text x="71.2677%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (3 samples, 0.04%)</title><rect x="71.0619%" y="245" width="0.0442%" height="15" fill="rgb(210,195,18)" fg:x="4818" fg:w="3"/><text x="71.3119%" y="255.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.09%)</title><rect x="71.1062%" y="245" width="0.0885%" height="15" fill="rgb(249,80,12)" fg:x="4821" fg:w="6"/><text x="71.3562%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (20 samples, 0.29%)</title><rect x="71.1947%" y="245" width="0.2950%" height="15" fill="rgb(221,65,9)" fg:x="4827" fg:w="20"/><text x="71.4447%" y="255.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.04%)</title><rect x="71.6667%" y="229" width="0.0442%" height="15" fill="rgb(235,49,36)" fg:x="4859" fg:w="3"/><text x="71.9167%" y="239.50"></text></g><g><title>_platform_memmove (23 samples, 0.34%)</title><rect x="71.7109%" y="229" width="0.3392%" height="15" fill="rgb(225,32,20)" fg:x="4862" fg:w="23"/><text x="71.9609%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="72.0501%" y="229" width="0.0295%" height="15" fill="rgb(215,141,46)" fg:x="4885" fg:w="2"/><text x="72.3001%" y="239.50"></text></g><g><title>DYLD-STUB$$malloc (4 samples, 0.06%)</title><rect x="72.4336%" y="181" width="0.0590%" height="15" fill="rgb(250,160,47)" fg:x="4911" fg:w="4"/><text x="72.6836%" y="191.50"></text></g><g><title>_malloc_zone_malloc (5 samples, 0.07%)</title><rect x="72.4926%" y="181" width="0.0737%" height="15" fill="rgb(216,222,40)" fg:x="4915" fg:w="5"/><text x="72.7426%" y="191.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (41 samples, 0.60%)</title><rect x="72.5664%" y="181" width="0.6047%" height="15" fill="rgb(234,217,39)" fg:x="4920" fg:w="41"/><text x="72.8164%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="73.1858%" y="165" width="0.0147%" height="15" fill="rgb(207,178,40)" fg:x="4962" fg:w="1"/><text x="73.4358%" y="175.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.01%)</title><rect x="73.3333%" y="149" width="0.0147%" height="15" fill="rgb(221,136,13)" fg:x="4972" fg:w="1"/><text x="73.5833%" y="159.50"></text></g><g><title>rack_get_thread_index (4 samples, 0.06%)</title><rect x="73.3481%" y="149" width="0.0590%" height="15" fill="rgb(249,199,10)" fg:x="4973" fg:w="4"/><text x="73.5981%" y="159.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.06%)</title><rect x="73.9086%" y="133" width="0.0590%" height="15" fill="rgb(249,222,13)" fg:x="5011" fg:w="4"/><text x="74.1586%" y="143.50"></text></g><g><title>alloc::alloc::alloc (113 samples, 1.67%)</title><rect x="72.3156%" y="197" width="1.6667%" height="15" fill="rgb(244,185,38)" fg:x="4903" fg:w="113"/><text x="72.5656%" y="207.50"></text></g><g><title>szone_malloc_should_clear (55 samples, 0.81%)</title><rect x="73.1711%" y="181" width="0.8112%" height="15" fill="rgb(236,202,9)" fg:x="4961" fg:w="55"/><text x="73.4211%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (53 samples, 0.78%)</title><rect x="73.2006%" y="165" width="0.7817%" height="15" fill="rgb(250,229,37)" fg:x="4963" fg:w="53"/><text x="73.4506%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (39 samples, 0.58%)</title><rect x="73.4071%" y="149" width="0.5752%" height="15" fill="rgb(206,174,23)" fg:x="4977" fg:w="39"/><text x="73.6571%" y="159.50"></text></g><g><title>tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="73.9676%" y="133" width="0.0147%" height="15" fill="rgb(211,33,43)" fg:x="5015" fg:w="1"/><text x="74.2176%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (4 samples, 0.06%)</title><rect x="73.9823%" y="197" width="0.0590%" height="15" fill="rgb(245,58,50)" fg:x="5016" fg:w="4"/><text x="74.2323%" y="207.50"></text></g><g><title>nanov2_malloc_type (1 samples, 0.01%)</title><rect x="74.0413%" y="197" width="0.0147%" height="15" fill="rgb(244,68,36)" fg:x="5020" fg:w="1"/><text x="74.2913%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (129 samples, 1.90%)</title><rect x="72.1681%" y="213" width="1.9027%" height="15" fill="rgb(232,229,15)" fg:x="4893" fg:w="129"/><text x="72.4181%" y="223.50">a..</text></g><g><title>szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="74.0560%" y="197" width="0.0147%" height="15" fill="rgb(254,30,23)" fg:x="5021" fg:w="1"/><text x="74.3060%" y="207.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (177 samples, 2.61%)</title><rect x="71.4897%" y="245" width="2.6106%" height="15" fill="rgb(235,160,14)" fg:x="4847" fg:w="177"/><text x="71.7397%" y="255.50">al..</text></g><g><title>alloc::alloc::exchange_malloc (137 samples, 2.02%)</title><rect x="72.0796%" y="229" width="2.0206%" height="15" fill="rgb(212,155,44)" fg:x="4887" fg:w="137"/><text x="72.3296%" y="239.50">a..</text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (2 samples, 0.03%)</title><rect x="74.0708%" y="213" width="0.0295%" height="15" fill="rgb(226,2,50)" fg:x="5022" fg:w="2"/><text x="74.3208%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (1 samples, 0.01%)</title><rect x="74.0855%" y="197" width="0.0147%" height="15" fill="rgb(234,177,6)" fg:x="5023" fg:w="1"/><text x="74.3355%" y="207.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.06%)</title><rect x="74.5870%" y="213" width="0.0590%" height="15" fill="rgb(217,24,9)" fg:x="5057" fg:w="4"/><text x="74.8370%" y="223.50"></text></g><g><title>_platform_memmove (11 samples, 0.16%)</title><rect x="74.6460%" y="213" width="0.1622%" height="15" fill="rgb(220,13,46)" fg:x="5061" fg:w="11"/><text x="74.8960%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.03%)</title><rect x="74.8083%" y="213" width="0.0295%" height="15" fill="rgb(239,221,27)" fg:x="5072" fg:w="2"/><text x="75.0583%" y="223.50"></text></g><g><title>DYLD-STUB$$malloc (4 samples, 0.06%)</title><rect x="77.1386%" y="181" width="0.0590%" height="15" fill="rgb(222,198,25)" fg:x="5230" fg:w="4"/><text x="77.3886%" y="191.50"></text></g><g><title>__rustc::__rdl_alloc (3 samples, 0.04%)</title><rect x="77.1976%" y="181" width="0.0442%" height="15" fill="rgb(211,99,13)" fg:x="5234" fg:w="3"/><text x="77.4476%" y="191.50"></text></g><g><title>_malloc_zone_malloc (31 samples, 0.46%)</title><rect x="77.2419%" y="181" width="0.4572%" height="15" fill="rgb(232,111,31)" fg:x="5237" fg:w="31"/><text x="77.4919%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (103 samples, 1.52%)</title><rect x="76.5487%" y="197" width="1.5192%" height="15" fill="rgb(245,82,37)" fg:x="5190" fg:w="103"/><text x="76.7987%" y="207.50"></text></g><g><title>nanov2_malloc_type (25 samples, 0.37%)</title><rect x="77.6991%" y="181" width="0.3687%" height="15" fill="rgb(227,149,46)" fg:x="5268" fg:w="25"/><text x="77.9491%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (222 samples, 3.27%)</title><rect x="74.8378%" y="213" width="3.2743%" height="15" fill="rgb(218,36,50)" fg:x="5074" fg:w="222"/><text x="75.0878%" y="223.50">all..</text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="78.0678%" y="197" width="0.0442%" height="15" fill="rgb(226,80,48)" fg:x="5293" fg:w="3"/><text x="78.3178%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (387 samples, 5.71%)</title><rect x="74.2183%" y="229" width="5.7080%" height="15" fill="rgb(238,224,15)" fg:x="5032" fg:w="387"/><text x="74.4683%" y="239.50">&lt;T as a..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (123 samples, 1.81%)</title><rect x="78.1121%" y="213" width="1.8142%" height="15" fill="rgb(241,136,10)" fg:x="5296" fg:w="123"/><text x="78.3621%" y="223.50">c..</text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (42 samples, 0.62%)</title><rect x="79.3068%" y="197" width="0.6195%" height="15" fill="rgb(208,32,45)" fg:x="5377" fg:w="42"/><text x="79.5568%" y="207.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="79.9263%" y="229" width="0.0147%" height="15" fill="rgb(207,135,9)" fg:x="5419" fg:w="1"/><text x="80.1763%" y="239.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec (400 samples, 5.90%)</title><rect x="74.1003%" y="245" width="5.8997%" height="15" fill="rgb(206,86,44)" fg:x="5024" fg:w="400"/><text x="74.3503%" y="255.50">alloc::..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.06%)</title><rect x="79.9410%" y="229" width="0.0590%" height="15" fill="rgb(245,177,15)" fg:x="5420" fg:w="4"/><text x="80.1910%" y="239.50"></text></g><g><title>alloc::string::String::as_str (34 samples, 0.50%)</title><rect x="80.0000%" y="245" width="0.5015%" height="15" fill="rgb(206,64,50)" fg:x="5424" fg:w="34"/><text x="80.2500%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (19 samples, 0.28%)</title><rect x="80.2212%" y="229" width="0.2802%" height="15" fill="rgb(234,36,40)" fg:x="5439" fg:w="19"/><text x="80.4712%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (19 samples, 0.28%)</title><rect x="80.8702%" y="229" width="0.2802%" height="15" fill="rgb(213,64,8)" fg:x="5483" fg:w="19"/><text x="81.1202%" y="239.50"></text></g><g><title>alloc::string::String::from_utf8 (64 samples, 0.94%)</title><rect x="80.5015%" y="245" width="0.9440%" height="15" fill="rgb(210,75,36)" fg:x="5458" fg:w="64"/><text x="80.7515%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (20 samples, 0.29%)</title><rect x="81.1504%" y="229" width="0.2950%" height="15" fill="rgb(229,88,21)" fg:x="5502" fg:w="20"/><text x="81.4004%" y="239.50"></text></g><g><title>_platform_memmove (8 samples, 0.12%)</title><rect x="81.8879%" y="229" width="0.1180%" height="15" fill="rgb(252,204,47)" fg:x="5552" fg:w="8"/><text x="82.1379%" y="239.50"></text></g><g><title>_realloc (1 samples, 0.01%)</title><rect x="82.2419%" y="197" width="0.0147%" height="15" fill="rgb(208,77,27)" fg:x="5576" fg:w="1"/><text x="82.4919%" y="207.50"></text></g><g><title>DYLD-STUB$$realloc (1 samples, 0.01%)</title><rect x="82.2861%" y="181" width="0.0147%" height="15" fill="rgb(221,76,26)" fg:x="5579" fg:w="1"/><text x="82.5361%" y="191.50"></text></g><g><title>DYLD-STUB$$_platform_memmove (4 samples, 0.06%)</title><rect x="82.7581%" y="133" width="0.0590%" height="15" fill="rgb(225,139,18)" fg:x="5611" fg:w="4"/><text x="83.0081%" y="143.50"></text></g><g><title>_nanov2_free (10 samples, 0.15%)</title><rect x="82.8171%" y="133" width="0.1475%" height="15" fill="rgb(230,137,11)" fg:x="5615" fg:w="10"/><text x="83.0671%" y="143.50"></text></g><g><title>_platform_memmove (7 samples, 0.10%)</title><rect x="82.9646%" y="133" width="0.1032%" height="15" fill="rgb(212,28,1)" fg:x="5625" fg:w="7"/><text x="83.2146%" y="143.50"></text></g><g><title>nanov2_malloc (13 samples, 0.19%)</title><rect x="83.0678%" y="133" width="0.1917%" height="15" fill="rgb(248,164,17)" fg:x="5632" fg:w="13"/><text x="83.3178%" y="143.50"></text></g><g><title>_malloc_zone_realloc (54 samples, 0.80%)</title><rect x="82.5369%" y="165" width="0.7965%" height="15" fill="rgb(222,171,42)" fg:x="5596" fg:w="54"/><text x="82.7869%" y="175.50"></text></g><g><title>nanov2_realloc (43 samples, 0.63%)</title><rect x="82.6991%" y="149" width="0.6342%" height="15" fill="rgb(243,84,45)" fg:x="5607" fg:w="43"/><text x="82.9491%" y="159.50"></text></g><g><title>nanov2_pointer_size (5 samples, 0.07%)</title><rect x="83.2596%" y="133" width="0.0737%" height="15" fill="rgb(252,49,23)" fg:x="5645" fg:w="5"/><text x="83.5096%" y="143.50"></text></g><g><title>nanov2_realloc (2 samples, 0.03%)</title><rect x="83.3333%" y="165" width="0.0295%" height="15" fill="rgb(215,19,7)" fg:x="5650" fg:w="2"/><text x="83.5833%" y="175.50"></text></g><g><title>_realloc (78 samples, 1.15%)</title><rect x="82.3009%" y="181" width="1.1504%" height="15" fill="rgb(238,81,41)" fg:x="5580" fg:w="78"/><text x="82.5509%" y="191.50"></text></g><g><title>nanov2_size (6 samples, 0.09%)</title><rect x="83.3628%" y="165" width="0.0885%" height="15" fill="rgb(210,199,37)" fg:x="5652" fg:w="6"/><text x="83.6128%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (92 samples, 1.36%)</title><rect x="82.1091%" y="213" width="1.3569%" height="15" fill="rgb(244,192,49)" fg:x="5567" fg:w="92"/><text x="82.3591%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (82 samples, 1.21%)</title><rect x="82.2566%" y="197" width="1.2094%" height="15" fill="rgb(226,211,11)" fg:x="5577" fg:w="82"/><text x="82.5066%" y="207.50"></text></g><g><title>realloc (1 samples, 0.01%)</title><rect x="83.4513%" y="181" width="0.0147%" height="15" fill="rgb(236,162,54)" fg:x="5658" fg:w="1"/><text x="83.7013%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (101 samples, 1.49%)</title><rect x="82.0059%" y="229" width="1.4897%" height="15" fill="rgb(220,229,9)" fg:x="5560" fg:w="101"/><text x="82.2559%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="83.4661%" y="213" width="0.0295%" height="15" fill="rgb(250,87,22)" fg:x="5659" fg:w="2"/><text x="83.7161%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 0.03%)</title><rect x="83.4956%" y="229" width="0.0295%" height="15" fill="rgb(239,43,17)" fg:x="5661" fg:w="2"/><text x="83.7456%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (157 samples, 2.32%)</title><rect x="81.4454%" y="245" width="2.3156%" height="15" fill="rgb(231,177,25)" fg:x="5522" fg:w="157"/><text x="81.6954%" y="255.50">a..</text></g><g><title>core::intrinsics::copy::precondition_check (16 samples, 0.24%)</title><rect x="83.5251%" y="229" width="0.2360%" height="15" fill="rgb(219,179,1)" fg:x="5663" fg:w="16"/><text x="83.7751%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.06%)</title><rect x="83.7611%" y="245" width="0.0590%" height="15" fill="rgb(238,219,53)" fg:x="5679" fg:w="4"/><text x="84.0111%" y="255.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.27%)</title><rect x="84.2920%" y="229" width="0.2655%" height="15" fill="rgb(232,167,36)" fg:x="5715" fg:w="18"/><text x="84.5420%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.96%)</title><rect x="84.5575%" y="229" width="0.9587%" height="15" fill="rgb(244,19,51)" fg:x="5733" fg:w="65"/><text x="84.8075%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.53%)</title><rect x="84.9853%" y="213" width="0.5310%" height="15" fill="rgb(224,6,22)" fg:x="5762" fg:w="36"/><text x="85.2353%" y="223.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="85.5162%" y="229" width="0.0147%" height="15" fill="rgb(224,145,5)" fg:x="5798" fg:w="1"/><text x="85.7662%" y="239.50"></text></g><g><title>_platform_memmove (19 samples, 0.28%)</title><rect x="85.5310%" y="229" width="0.2802%" height="15" fill="rgb(234,130,49)" fg:x="5799" fg:w="19"/><text x="85.7810%" y="239.50"></text></g><g><title>_platform_memset (7 samples, 0.10%)</title><rect x="85.8112%" y="229" width="0.1032%" height="15" fill="rgb(254,6,2)" fg:x="5818" fg:w="7"/><text x="86.0612%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (2 samples, 0.03%)</title><rect x="85.9145%" y="229" width="0.0295%" height="15" fill="rgb(208,96,46)" fg:x="5825" fg:w="2"/><text x="86.1645%" y="239.50"></text></g><g><title>bitbeat::Process::new (149 samples, 2.20%)</title><rect x="83.8201%" y="245" width="2.1976%" height="15" fill="rgb(239,3,39)" fg:x="5683" fg:w="149"/><text x="84.0701%" y="255.50">b..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (5 samples, 0.07%)</title><rect x="85.9440%" y="229" width="0.0737%" height="15" fill="rgb(233,210,1)" fg:x="5827" fg:w="5"/><text x="86.1940%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="85.9735%" y="213" width="0.0442%" height="15" fill="rgb(244,137,37)" fg:x="5829" fg:w="3"/><text x="86.2235%" y="223.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="86.0619%" y="229" width="0.0147%" height="15" fill="rgb(240,136,2)" fg:x="5835" fg:w="1"/><text x="86.3119%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::new (37 samples, 0.55%)</title><rect x="86.0177%" y="245" width="0.5457%" height="15" fill="rgb(239,18,37)" fg:x="5832" fg:w="37"/><text x="86.2677%" y="255.50"></text></g><g><title>_platform_memmove (33 samples, 0.49%)</title><rect x="86.0767%" y="229" width="0.4867%" height="15" fill="rgb(218,185,22)" fg:x="5836" fg:w="33"/><text x="86.3267%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (43 samples, 0.63%)</title><rect x="86.9027%" y="149" width="0.6342%" height="15" fill="rgb(225,218,4)" fg:x="5892" fg:w="43"/><text x="87.1527%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (42 samples, 0.62%)</title><rect x="86.9174%" y="133" width="0.6195%" height="15" fill="rgb(230,182,32)" fg:x="5893" fg:w="42"/><text x="87.1674%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (14 samples, 0.21%)</title><rect x="87.3304%" y="117" width="0.2065%" height="15" fill="rgb(242,56,43)" fg:x="5921" fg:w="14"/><text x="87.5804%" y="127.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::offset_from_unsigned::precondition_check (4 samples, 0.06%)</title><rect x="87.4779%" y="101" width="0.0590%" height="15" fill="rgb(233,99,24)" fg:x="5931" fg:w="4"/><text x="87.7279%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (31 samples, 0.46%)</title><rect x="87.5369%" y="149" width="0.4572%" height="15" fill="rgb(234,209,42)" fg:x="5935" fg:w="31"/><text x="87.7869%" y="159.50"></text></g><g><title>bitbeat::handle_spawn::_{{closure}} (3 samples, 0.04%)</title><rect x="88.5841%" y="85" width="0.0442%" height="15" fill="rgb(227,7,12)" fg:x="6006" fg:w="3"/><text x="88.8341%" y="95.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (11 samples, 0.16%)</title><rect x="88.5251%" y="101" width="0.1622%" height="15" fill="rgb(245,203,43)" fg:x="6002" fg:w="11"/><text x="88.7751%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.06%)</title><rect x="88.6283%" y="85" width="0.0590%" height="15" fill="rgb(238,205,33)" fg:x="6009" fg:w="4"/><text x="88.8783%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (2 samples, 0.03%)</title><rect x="88.6578%" y="69" width="0.0295%" height="15" fill="rgb(231,56,7)" fg:x="6011" fg:w="2"/><text x="88.9078%" y="79.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.03%)</title><rect x="88.6873%" y="101" width="0.0295%" height="15" fill="rgb(244,186,29)" fg:x="6013" fg:w="2"/><text x="88.9373%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;&amp;u8,i64,(),bitbeat::handle_spawn::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (12 samples, 0.18%)</title><rect x="88.7168%" y="101" width="0.1770%" height="15" fill="rgb(234,111,31)" fg:x="6015" fg:w="12"/><text x="88.9668%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (7 samples, 0.10%)</title><rect x="88.7906%" y="85" width="0.1032%" height="15" fill="rgb(241,149,10)" fg:x="6020" fg:w="7"/><text x="89.0406%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt; (5 samples, 0.07%)</title><rect x="88.8201%" y="69" width="0.0737%" height="15" fill="rgb(249,206,44)" fg:x="6022" fg:w="5"/><text x="89.0701%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (4 samples, 0.06%)</title><rect x="88.8348%" y="53" width="0.0590%" height="15" fill="rgb(251,153,30)" fg:x="6023" fg:w="4"/><text x="89.0848%" y="63.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="88.8791%" y="37" width="0.0147%" height="15" fill="rgb(239,152,38)" fg:x="6026" fg:w="1"/><text x="89.1291%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (152 samples, 2.24%)</title><rect x="86.7847%" y="181" width="2.2419%" height="15" fill="rgb(249,139,47)" fg:x="5884" fg:w="152"/><text x="87.0347%" y="191.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (150 samples, 2.21%)</title><rect x="86.8142%" y="165" width="2.2124%" height="15" fill="rgb(244,64,35)" fg:x="5886" fg:w="150"/><text x="87.0642%" y="175.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (70 samples, 1.03%)</title><rect x="87.9941%" y="149" width="1.0324%" height="15" fill="rgb(216,46,15)" fg:x="5966" fg:w="70"/><text x="88.2441%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (69 samples, 1.02%)</title><rect x="88.0088%" y="133" width="1.0177%" height="15" fill="rgb(250,74,19)" fg:x="5967" fg:w="69"/><text x="88.2588%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (69 samples, 1.02%)</title><rect x="88.0088%" y="117" width="1.0177%" height="15" fill="rgb(249,42,33)" fg:x="5967" fg:w="69"/><text x="88.2588%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (9 samples, 0.13%)</title><rect x="88.8938%" y="101" width="0.1327%" height="15" fill="rgb(242,149,17)" fg:x="6027" fg:w="9"/><text x="89.1438%" y="111.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::offset_from_unsigned::precondition_check (5 samples, 0.07%)</title><rect x="88.9528%" y="85" width="0.0737%" height="15" fill="rgb(244,29,21)" fg:x="6031" fg:w="5"/><text x="89.2028%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (30 samples, 0.44%)</title><rect x="89.0265%" y="181" width="0.4425%" height="15" fill="rgb(220,130,37)" fg:x="6036" fg:w="30"/><text x="89.2765%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.41%)</title><rect x="89.0560%" y="165" width="0.4130%" height="15" fill="rgb(211,67,2)" fg:x="6038" fg:w="28"/><text x="89.3060%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::offset_from_unsigned (15 samples, 0.22%)</title><rect x="89.2478%" y="149" width="0.2212%" height="15" fill="rgb(235,68,52)" fg:x="6051" fg:w="15"/><text x="89.4978%" y="159.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::offset_from_unsigned::precondition_check (4 samples, 0.06%)</title><rect x="89.4100%" y="133" width="0.0590%" height="15" fill="rgb(246,142,3)" fg:x="6062" fg:w="4"/><text x="89.6600%" y="143.50"></text></g><g><title>DYLD-STUB$$malloc (2 samples, 0.03%)</title><rect x="89.6313%" y="149" width="0.0295%" height="15" fill="rgb(241,25,7)" fg:x="6077" fg:w="2"/><text x="89.8813%" y="159.50"></text></g><g><title>_malloc_zone_malloc (3 samples, 0.04%)</title><rect x="89.6608%" y="149" width="0.0442%" height="15" fill="rgb(242,119,39)" fg:x="6079" fg:w="3"/><text x="89.9108%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (25 samples, 0.37%)</title><rect x="89.4690%" y="181" width="0.3687%" height="15" fill="rgb(241,98,45)" fg:x="6066" fg:w="25"/><text x="89.7190%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (19 samples, 0.28%)</title><rect x="89.5575%" y="165" width="0.2802%" height="15" fill="rgb(254,28,30)" fg:x="6072" fg:w="19"/><text x="89.8075%" y="175.50"></text></g><g><title>nanov2_malloc_type (9 samples, 0.13%)</title><rect x="89.7050%" y="149" width="0.1327%" height="15" fill="rgb(241,142,54)" fg:x="6082" fg:w="9"/><text x="89.9550%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (223 samples, 3.29%)</title><rect x="86.5634%" y="245" width="3.2891%" height="15" fill="rgb(222,85,15)" fg:x="5869" fg:w="223"/><text x="86.8134%" y="255.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (221 samples, 3.26%)</title><rect x="86.5929%" y="229" width="3.2596%" height="15" fill="rgb(210,85,47)" fg:x="5871" fg:w="221"/><text x="86.8429%" y="239.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (215 samples, 3.17%)</title><rect x="86.6814%" y="213" width="3.1711%" height="15" fill="rgb(224,206,25)" fg:x="5877" fg:w="215"/><text x="86.9314%" y="223.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (214 samples, 3.16%)</title><rect x="86.6962%" y="197" width="3.1563%" height="15" fill="rgb(243,201,19)" fg:x="5878" fg:w="214"/><text x="86.9462%" y="207.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.01%)</title><rect x="89.8378%" y="181" width="0.0147%" height="15" fill="rgb(236,59,4)" fg:x="6091" fg:w="1"/><text x="90.0878%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1 samples, 0.01%)</title><rect x="89.8525%" y="245" width="0.0147%" height="15" fill="rgb(254,179,45)" fg:x="6092" fg:w="1"/><text x="90.1025%" y="255.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (2 samples, 0.03%)</title><rect x="89.8673%" y="245" width="0.0295%" height="15" fill="rgb(226,14,10)" fg:x="6093" fg:w="2"/><text x="90.1173%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.06%)</title><rect x="90.0737%" y="213" width="0.0590%" height="15" fill="rgb(244,27,41)" fg:x="6107" fg:w="4"/><text x="90.3237%" y="223.50"></text></g><g><title>_nanov2_free (2 samples, 0.03%)</title><rect x="90.1327%" y="213" width="0.0295%" height="15" fill="rgb(235,35,32)" fg:x="6111" fg:w="2"/><text x="90.3827%" y="223.50"></text></g><g><title>DYLD-STUB$$free (5 samples, 0.07%)</title><rect x="90.2065%" y="197" width="0.0737%" height="15" fill="rgb(218,68,31)" fg:x="6116" fg:w="5"/><text x="90.4565%" y="207.50"></text></g><g><title>_free (10 samples, 0.15%)</title><rect x="90.2802%" y="197" width="0.1475%" height="15" fill="rgb(207,120,37)" fg:x="6121" fg:w="10"/><text x="90.5302%" y="207.50"></text></g><g><title>_nanov2_free (22 samples, 0.32%)</title><rect x="90.4277%" y="197" width="0.3245%" height="15" fill="rgb(227,98,0)" fg:x="6131" fg:w="22"/><text x="90.6777%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (66 samples, 0.97%)</title><rect x="89.8968%" y="245" width="0.9735%" height="15" fill="rgb(207,7,3)" fg:x="6095" fg:w="66"/><text x="90.1468%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (61 samples, 0.90%)</title><rect x="89.9705%" y="229" width="0.8997%" height="15" fill="rgb(206,98,19)" fg:x="6100" fg:w="61"/><text x="90.2205%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (48 samples, 0.71%)</title><rect x="90.1622%" y="213" width="0.7080%" height="15" fill="rgb(217,5,26)" fg:x="6113" fg:w="48"/><text x="90.4122%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8 samples, 0.12%)</title><rect x="90.7522%" y="197" width="0.1180%" height="15" fill="rgb(235,190,38)" fg:x="6153" fg:w="8"/><text x="91.0022%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="90.9440%" y="229" width="0.0295%" height="15" fill="rgb(247,86,24)" fg:x="6166" fg:w="2"/><text x="91.1940%" y="239.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.06%)</title><rect x="91.0619%" y="197" width="0.0590%" height="15" fill="rgb(205,101,16)" fg:x="6174" fg:w="4"/><text x="91.3119%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.01%)</title><rect x="91.1209%" y="197" width="0.0147%" height="15" fill="rgb(246,168,33)" fg:x="6178" fg:w="1"/><text x="91.3709%" y="207.50"></text></g><g><title>_free (5 samples, 0.07%)</title><rect x="91.1357%" y="197" width="0.0737%" height="15" fill="rgb(231,114,1)" fg:x="6179" fg:w="5"/><text x="91.3857%" y="207.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="91.4454%" y="181" width="0.0147%" height="15" fill="rgb(207,184,53)" fg:x="6200" fg:w="1"/><text x="91.6954%" y="191.50"></text></g><g><title>_nanov2_free (21 samples, 0.31%)</title><rect x="91.2094%" y="197" width="0.3097%" height="15" fill="rgb(224,95,51)" fg:x="6184" fg:w="21"/><text x="91.4594%" y="207.50"></text></g><g><title>_platform_memset (4 samples, 0.06%)</title><rect x="91.4602%" y="181" width="0.0590%" height="15" fill="rgb(212,188,45)" fg:x="6201" fg:w="4"/><text x="91.7102%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.53%)</title><rect x="91.0177%" y="213" width="0.5310%" height="15" fill="rgb(223,154,38)" fg:x="6171" fg:w="36"/><text x="91.2677%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2 samples, 0.03%)</title><rect x="91.5192%" y="197" width="0.0295%" height="15" fill="rgb(251,22,52)" fg:x="6205" fg:w="2"/><text x="91.7692%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (47 samples, 0.69%)</title><rect x="90.8702%" y="245" width="0.6932%" height="15" fill="rgb(229,209,22)" fg:x="6161" fg:w="47"/><text x="91.1202%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (40 samples, 0.59%)</title><rect x="90.9735%" y="229" width="0.5900%" height="15" fill="rgb(234,138,34)" fg:x="6168" fg:w="40"/><text x="91.2235%" y="239.50"></text></g><g><title>_nanov2_free (1 samples, 0.01%)</title><rect x="91.5487%" y="213" width="0.0147%" height="15" fill="rgb(212,95,11)" fg:x="6207" fg:w="1"/><text x="91.7987%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="91.6224%" y="229" width="0.0295%" height="15" fill="rgb(240,179,47)" fg:x="6212" fg:w="2"/><text x="91.8724%" y="239.50"></text></g><g><title>_free (1 samples, 0.01%)</title><rect x="91.6519%" y="229" width="0.0147%" height="15" fill="rgb(240,163,11)" fg:x="6214" fg:w="1"/><text x="91.9019%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.01%)</title><rect x="91.6814%" y="213" width="0.0147%" height="15" fill="rgb(236,37,12)" fg:x="6216" fg:w="1"/><text x="91.9314%" y="223.50"></text></g><g><title>_free (8 samples, 0.12%)</title><rect x="91.6962%" y="213" width="0.1180%" height="15" fill="rgb(232,164,16)" fg:x="6217" fg:w="8"/><text x="91.9462%" y="223.50"></text></g><g><title>_nanov2_free (10 samples, 0.15%)</title><rect x="91.8142%" y="213" width="0.1475%" height="15" fill="rgb(244,205,15)" fg:x="6225" fg:w="10"/><text x="92.0642%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (31 samples, 0.46%)</title><rect x="91.5634%" y="245" width="0.4572%" height="15" fill="rgb(223,117,47)" fg:x="6208" fg:w="31"/><text x="91.8134%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (24 samples, 0.35%)</title><rect x="91.6667%" y="229" width="0.3540%" height="15" fill="rgb(244,107,35)" fg:x="6215" fg:w="24"/><text x="91.9167%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (4 samples, 0.06%)</title><rect x="91.9617%" y="213" width="0.0590%" height="15" fill="rgb(205,140,8)" fg:x="6235" fg:w="4"/><text x="92.2117%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (6 samples, 0.09%)</title><rect x="92.0206%" y="245" width="0.0885%" height="15" fill="rgb(228,84,46)" fg:x="6239" fg:w="6"/><text x="92.2706%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (1 samples, 0.01%)</title><rect x="92.1091%" y="245" width="0.0147%" height="15" fill="rgb(254,188,9)" fg:x="6245" fg:w="1"/><text x="92.3591%" y="255.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (8 samples, 0.12%)</title><rect x="92.1239%" y="245" width="0.1180%" height="15" fill="rgb(206,112,54)" fg:x="6246" fg:w="8"/><text x="92.3739%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (4 samples, 0.06%)</title><rect x="92.1829%" y="229" width="0.0590%" height="15" fill="rgb(216,84,49)" fg:x="6250" fg:w="4"/><text x="92.4329%" y="239.50"></text></g><g><title>bitbeat::handle_spawn (3,395 samples, 50.07%)</title><rect x="42.1976%" y="261" width="50.0737%" height="15" fill="rgb(214,194,35)" fg:x="2861" fg:w="3395"/><text x="42.4476%" y="271.50">bitbeat::handle_spawn</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.03%)</title><rect x="92.2419%" y="245" width="0.0295%" height="15" fill="rgb(249,28,3)" fg:x="6254" fg:w="2"/><text x="92.4919%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.06%)</title><rect x="93.2743%" y="245" width="0.0590%" height="15" fill="rgb(222,56,52)" fg:x="6324" fg:w="4"/><text x="93.5243%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.16%)</title><rect x="93.4513%" y="229" width="0.1622%" height="15" fill="rgb(245,217,50)" fg:x="6336" fg:w="11"/><text x="93.7013%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (38 samples, 0.56%)</title><rect x="93.3333%" y="245" width="0.5605%" height="15" fill="rgb(213,201,24)" fg:x="6328" fg:w="38"/><text x="93.5833%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (19 samples, 0.28%)</title><rect x="93.6136%" y="229" width="0.2802%" height="15" fill="rgb(248,116,28)" fg:x="6347" fg:w="19"/><text x="93.8636%" y="239.50"></text></g><g><title>bitbeat::handle_sub (115 samples, 1.70%)</title><rect x="92.2714%" y="261" width="1.6962%" height="15" fill="rgb(219,72,43)" fg:x="6256" fg:w="115"/><text x="92.5214%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (5 samples, 0.07%)</title><rect x="93.8938%" y="245" width="0.0737%" height="15" fill="rgb(209,138,14)" fg:x="6366" fg:w="5"/><text x="94.1438%" y="255.50"></text></g><g><title>bitbeat::Process::step (5,381 samples, 79.37%)</title><rect x="14.6165%" y="277" width="79.3658%" height="15" fill="rgb(222,18,33)" fg:x="991" fg:w="5381"/><text x="14.8665%" y="287.50">bitbeat::Process::step</text></g><g><title>core::cell::RefCell&lt;T&gt;::new (1 samples, 0.01%)</title><rect x="93.9676%" y="261" width="0.0147%" height="15" fill="rgb(213,199,7)" fg:x="6371" fg:w="1"/><text x="94.2176%" y="271.50"></text></g><g><title>bitbeat::handle_add (2 samples, 0.03%)</title><rect x="93.9823%" y="277" width="0.0295%" height="15" fill="rgb(250,110,10)" fg:x="6372" fg:w="2"/><text x="94.2323%" y="287.50"></text></g><g><title>bitbeat::handle_cmp_le (3 samples, 0.04%)</title><rect x="94.0118%" y="277" width="0.0442%" height="15" fill="rgb(248,123,6)" fg:x="6374" fg:w="3"/><text x="94.2618%" y="287.50"></text></g><g><title>bitbeat::handle_jump_if (7 samples, 0.10%)</title><rect x="94.0560%" y="277" width="0.1032%" height="15" fill="rgb(206,91,31)" fg:x="6377" fg:w="7"/><text x="94.3060%" y="287.50"></text></g><g><title>bitbeat::handle_load_imm (2 samples, 0.03%)</title><rect x="94.1593%" y="277" width="0.0295%" height="15" fill="rgb(211,154,13)" fg:x="6384" fg:w="2"/><text x="94.4093%" y="287.50"></text></g><g><title>bitbeat::handle_sub (3 samples, 0.04%)</title><rect x="94.1888%" y="277" width="0.0442%" height="15" fill="rgb(225,148,7)" fg:x="6386" fg:w="3"/><text x="94.4388%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (44 samples, 0.65%)</title><rect x="94.2330%" y="277" width="0.6490%" height="15" fill="rgb(220,160,43)" fg:x="6389" fg:w="44"/><text x="94.4830%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (31 samples, 0.46%)</title><rect x="94.4248%" y="261" width="0.4572%" height="15" fill="rgb(213,52,39)" fg:x="6402" fg:w="31"/><text x="94.6748%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (4 samples, 0.06%)</title><rect x="94.8230%" y="245" width="0.0590%" height="15" fill="rgb(243,137,7)" fg:x="6429" fg:w="4"/><text x="95.0730%" y="255.50"></text></g><g><title>core::cmp::PartialEq::ne (40 samples, 0.59%)</title><rect x="94.8820%" y="277" width="0.5900%" height="15" fill="rgb(230,79,13)" fg:x="6433" fg:w="40"/><text x="95.1320%" y="287.50"></text></g><g><title>&lt;bitbeat::ProcessState as core::cmp::PartialEq&gt;::eq (22 samples, 0.32%)</title><rect x="95.1475%" y="261" width="0.3245%" height="15" fill="rgb(247,105,23)" fg:x="6451" fg:w="22"/><text x="95.3975%" y="271.50"></text></g><g><title>DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="96.8879%" y="165" width="0.0147%" height="15" fill="rgb(223,179,41)" fg:x="6569" fg:w="1"/><text x="97.1379%" y="175.50"></text></g><g><title>_free (2 samples, 0.03%)</title><rect x="96.9027%" y="165" width="0.0295%" height="15" fill="rgb(218,9,34)" fg:x="6570" fg:w="2"/><text x="97.1527%" y="175.50"></text></g><g><title>_nanov2_free (2 samples, 0.03%)</title><rect x="96.9322%" y="165" width="0.0295%" height="15" fill="rgb(222,106,8)" fg:x="6572" fg:w="2"/><text x="97.1822%" y="175.50"></text></g><g><title>_szone_free (3 samples, 0.04%)</title><rect x="96.9617%" y="165" width="0.0442%" height="15" fill="rgb(211,220,0)" fg:x="6574" fg:w="3"/><text x="97.2117%" y="175.50"></text></g><g><title>_platform_memset (4 samples, 0.06%)</title><rect x="97.2124%" y="149" width="0.0590%" height="15" fill="rgb(229,52,16)" fg:x="6591" fg:w="4"/><text x="97.4624%" y="159.50"></text></g><g><title>free_tiny (43 samples, 0.63%)</title><rect x="97.0059%" y="165" width="0.6342%" height="15" fill="rgb(212,155,18)" fg:x="6577" fg:w="43"/><text x="97.2559%" y="175.50"></text></g><g><title>tiny_free_no_lock (25 samples, 0.37%)</title><rect x="97.2714%" y="149" width="0.3687%" height="15" fill="rgb(242,21,14)" fg:x="6595" fg:w="25"/><text x="97.5214%" y="159.50"></text></g><g><title>get_tiny_previous_free_msize (1 samples, 0.01%)</title><rect x="97.6254%" y="133" width="0.0147%" height="15" fill="rgb(222,19,48)" fg:x="6619" fg:w="1"/><text x="97.8754%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (59 samples, 0.87%)</title><rect x="96.7994%" y="181" width="0.8702%" height="15" fill="rgb(232,45,27)" fg:x="6563" fg:w="59"/><text x="97.0494%" y="191.50"></text></g><g><title>tiny_free_no_lock (2 samples, 0.03%)</title><rect x="97.6401%" y="165" width="0.0295%" height="15" fill="rgb(249,103,42)" fg:x="6620" fg:w="2"/><text x="97.8901%" y="175.50"></text></g><g><title>_nanov2_free (1 samples, 0.01%)</title><rect x="97.6696%" y="181" width="0.0147%" height="15" fill="rgb(246,81,33)" fg:x="6622" fg:w="1"/><text x="97.9196%" y="191.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (64 samples, 0.94%)</title><rect x="96.7552%" y="197" width="0.9440%" height="15" fill="rgb(252,33,42)" fg:x="6560" fg:w="64"/><text x="97.0052%" y="207.50"></text></g><g><title>_szone_free (1 samples, 0.01%)</title><rect x="97.6844%" y="181" width="0.0147%" height="15" fill="rgb(209,212,41)" fg:x="6623" fg:w="1"/><text x="97.9344%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;core::cell::RefCell&lt;bitbeat::Process&gt;,&amp;alloc::alloc::Global&gt;&gt; (108 samples, 1.59%)</title><rect x="96.1504%" y="229" width="1.5929%" height="15" fill="rgb(207,154,6)" fg:x="6519" fg:w="108"/><text x="96.4004%" y="239.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (107 samples, 1.58%)</title><rect x="96.1652%" y="213" width="1.5782%" height="15" fill="rgb(223,64,47)" fg:x="6520" fg:w="107"/><text x="96.4152%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="97.6991%" y="197" width="0.0442%" height="15" fill="rgb(211,161,38)" fg:x="6624" fg:w="3"/><text x="97.9491%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (2 samples, 0.03%)</title><rect x="97.7139%" y="181" width="0.0295%" height="15" fill="rgb(219,138,40)" fg:x="6625" fg:w="2"/><text x="97.9639%" y="191.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::end_bound (1 samples, 0.01%)</title><rect x="98.0973%" y="117" width="0.0147%" height="15" fill="rgb(241,228,46)" fg:x="6651" fg:w="1"/><text x="98.3473%" y="127.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (39 samples, 0.58%)</title><rect x="97.9204%" y="149" width="0.5752%" height="15" fill="rgb(223,209,38)" fg:x="6639" fg:w="39"/><text x="98.1704%" y="159.50"></text></g><g><title>core::slice::index::range (37 samples, 0.55%)</title><rect x="97.9499%" y="133" width="0.5457%" height="15" fill="rgb(236,164,45)" fg:x="6641" fg:w="37"/><text x="98.1999%" y="143.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::start_bound (26 samples, 0.38%)</title><rect x="98.1121%" y="117" width="0.3835%" height="15" fill="rgb(231,15,5)" fg:x="6652" fg:w="26"/><text x="98.3621%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;i64&gt;&gt; (2 samples, 0.03%)</title><rect x="98.4956%" y="149" width="0.0295%" height="15" fill="rgb(252,35,15)" fg:x="6678" fg:w="2"/><text x="98.7456%" y="159.50"></text></g><g><title>&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="98.5103%" y="133" width="0.0147%" height="15" fill="rgb(248,181,18)" fg:x="6679" fg:w="1"/><text x="98.7603%" y="143.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.66%)</title><rect x="97.9056%" y="165" width="0.6637%" height="15" fill="rgb(233,39,42)" fg:x="6638" fg:w="45"/><text x="98.1556%" y="175.50"></text></g><g><title>core::slice::index::range (3 samples, 0.04%)</title><rect x="98.5251%" y="149" width="0.0442%" height="15" fill="rgb(238,110,33)" fg:x="6680" fg:w="3"/><text x="98.7751%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (1 samples, 0.01%)</title><rect x="98.5693%" y="165" width="0.0147%" height="15" fill="rgb(233,195,10)" fg:x="6683" fg:w="1"/><text x="98.8193%" y="175.50"></text></g><g><title>_free (5 samples, 0.07%)</title><rect x="98.6283%" y="133" width="0.0737%" height="15" fill="rgb(254,105,3)" fg:x="6687" fg:w="5"/><text x="98.8783%" y="143.50"></text></g><g><title>__bzero (1 samples, 0.01%)</title><rect x="98.8791%" y="117" width="0.0147%" height="15" fill="rgb(221,225,9)" fg:x="6704" fg:w="1"/><text x="99.1291%" y="127.50"></text></g><g><title>_nanov2_free (16 samples, 0.24%)</title><rect x="98.7021%" y="133" width="0.2360%" height="15" fill="rgb(224,227,45)" fg:x="6692" fg:w="16"/><text x="98.9521%" y="143.50"></text></g><g><title>_platform_memset (3 samples, 0.04%)</title><rect x="98.8938%" y="117" width="0.0442%" height="15" fill="rgb(229,198,43)" fg:x="6705" fg:w="3"/><text x="99.1438%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;i64&gt;&gt; (84 samples, 1.24%)</title><rect x="97.8466%" y="181" width="1.2389%" height="15" fill="rgb(206,209,35)" fg:x="6634" fg:w="84"/><text x="98.0966%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (34 samples, 0.50%)</title><rect x="98.5841%" y="165" width="0.5015%" height="15" fill="rgb(245,195,53)" fg:x="6684" fg:w="34"/><text x="98.8341%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.49%)</title><rect x="98.5988%" y="149" width="0.4867%" height="15" fill="rgb(240,92,26)" fg:x="6685" fg:w="33"/><text x="98.8488%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (10 samples, 0.15%)</title><rect x="98.9381%" y="133" width="0.1475%" height="15" fill="rgb(207,40,23)" fg:x="6708" fg:w="10"/><text x="99.1881%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (279 samples, 4.12%)</title><rect x="95.4720%" y="277" width="4.1150%" height="15" fill="rgb(223,111,35)" fg:x="6473" fg:w="279"/><text x="95.7220%" y="287.50">core..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (275 samples, 4.06%)</title><rect x="95.5310%" y="261" width="4.0560%" height="15" fill="rgb(229,147,28)" fg:x="6477" fg:w="275"/><text x="95.7810%" y="271.50">&lt;all..</text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (236 samples, 3.48%)</title><rect x="96.1062%" y="245" width="3.4808%" height="15" fill="rgb(211,29,28)" fg:x="6516" fg:w="236"/><text x="96.3562%" y="255.50">all..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt; (125 samples, 1.84%)</title><rect x="97.7434%" y="229" width="1.8437%" height="15" fill="rgb(228,72,33)" fg:x="6627" fg:w="125"/><text x="97.9934%" y="239.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;bitbeat::Process&gt;&gt; (123 samples, 1.81%)</title><rect x="97.7729%" y="213" width="1.8142%" height="15" fill="rgb(205,214,31)" fg:x="6629" fg:w="123"/><text x="98.0229%" y="223.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;bitbeat::Process&gt; (119 samples, 1.76%)</title><rect x="97.8319%" y="197" width="1.7552%" height="15" fill="rgb(224,111,15)" fg:x="6633" fg:w="119"/><text x="98.0819%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitbeat::Function&gt;&gt; (34 samples, 0.50%)</title><rect x="99.0855%" y="181" width="0.5015%" height="15" fill="rgb(253,21,26)" fg:x="6718" fg:w="34"/><text x="99.3355%" y="191.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.47%)</title><rect x="99.1150%" y="165" width="0.4720%" height="15" fill="rgb(245,139,43)" fg:x="6720" fg:w="32"/><text x="99.3650%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (14 samples, 0.21%)</title><rect x="99.5870%" y="277" width="0.2065%" height="15" fill="rgb(252,170,7)" fg:x="6752" fg:w="14"/><text x="99.8370%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (9 samples, 0.13%)</title><rect x="99.6608%" y="261" width="0.1327%" height="15" fill="rgb(231,118,14)" fg:x="6757" fg:w="9"/><text x="99.9108%" y="271.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (4 samples, 0.06%)</title><rect x="99.7345%" y="245" width="0.0590%" height="15" fill="rgb(238,83,0)" fg:x="6762" fg:w="4"/><text x="99.9845%" y="255.50"></text></g><g><title>bitbeat::Machine::run (6,777 samples, 99.96%)</title><rect x="0.0295%" y="293" width="99.9558%" height="15" fill="rgb(221,39,39)" fg:x="2" fg:w="6777"/><text x="0.2795%" y="303.50">bitbeat::Machine::run</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (13 samples, 0.19%)</title><rect x="99.7935%" y="277" width="0.1917%" height="15" fill="rgb(222,119,46)" fg:x="6766" fg:w="13"/><text x="100.0435%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (10 samples, 0.15%)</title><rect x="99.8378%" y="261" width="0.1475%" height="15" fill="rgb(222,165,49)" fg:x="6769" fg:w="10"/><text x="100.0878%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.15%)</title><rect x="99.8378%" y="245" width="0.1475%" height="15" fill="rgb(219,113,52)" fg:x="6769" fg:w="10"/><text x="100.0878%" y="255.50"></text></g><g><title>all (6,780 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(214,7,15)" fg:x="0" fg:w="6780"/><text x="0.2500%" y="447.50"></text></g><g><title>start (6,780 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(235,32,4)" fg:x="0" fg:w="6780"/><text x="0.2500%" y="431.50">start</text></g><g><title>main (6,778 samples, 99.97%)</title><rect x="0.0295%" y="405" width="99.9705%" height="15" fill="rgb(238,90,54)" fg:x="2" fg:w="6778"/><text x="0.2795%" y="415.50">main</text></g><g><title>std::rt::lang_start (6,778 samples, 99.97%)</title><rect x="0.0295%" y="389" width="99.9705%" height="15" fill="rgb(213,208,19)" fg:x="2" fg:w="6778"/><text x="0.2795%" y="399.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (6,778 samples, 99.97%)</title><rect x="0.0295%" y="373" width="99.9705%" height="15" fill="rgb(233,156,4)" fg:x="2" fg:w="6778"/><text x="0.2795%" y="383.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (6,778 samples, 99.97%)</title><rect x="0.0295%" y="357" width="99.9705%" height="15" fill="rgb(207,194,5)" fg:x="2" fg:w="6778"/><text x="0.2795%" y="367.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (6,778 samples, 99.97%)</title><rect x="0.0295%" y="341" width="99.9705%" height="15" fill="rgb(206,111,30)" fg:x="2" fg:w="6778"/><text x="0.2795%" y="351.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (6,778 samples, 99.97%)</title><rect x="0.0295%" y="325" width="99.9705%" height="15" fill="rgb(243,70,54)" fg:x="2" fg:w="6778"/><text x="0.2795%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>bitbeat::_fib (6,778 samples, 99.97%)</title><rect x="0.0295%" y="309" width="99.9705%" height="15" fill="rgb(242,28,8)" fg:x="2" fg:w="6778"/><text x="0.2795%" y="319.50">bitbeat::_fib</text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.01%)</title><rect x="99.9853%" y="293" width="0.0147%" height="15" fill="rgb(219,106,18)" fg:x="6779" fg:w="1"/><text x="100.2353%" y="303.50"></text></g></svg></svg>