<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="10407"><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (3 samples, 0.03%)</title><rect x="0.0096%" y="485" width="0.0288%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2596%" y="495.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (3 samples, 0.03%)</title><rect x="0.0096%" y="469" width="0.0288%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="0.2596%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="0.6054%" y="341" width="0.0192%" height="15" fill="rgb(221,193,54)" fg:x="63" fg:w="2"/><text x="0.8554%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.22%)</title><rect x="0.5765%" y="357" width="0.2210%" height="15" fill="rgb(248,212,6)" fg:x="60" fg:w="23"/><text x="0.8265%" y="367.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (18 samples, 0.17%)</title><rect x="0.6246%" y="341" width="0.1730%" height="15" fill="rgb(208,68,35)" fg:x="65" fg:w="18"/><text x="0.8746%" y="351.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.03%)</title><rect x="0.7687%" y="325" width="0.0288%" height="15" fill="rgb(232,128,0)" fg:x="80" fg:w="3"/><text x="1.0187%" y="335.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="0.7975%" y="357" width="0.0288%" height="15" fill="rgb(207,160,47)" fg:x="83" fg:w="3"/><text x="1.0475%" y="367.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="0.8264%" y="357" width="0.0192%" height="15" fill="rgb(228,23,34)" fg:x="86" fg:w="2"/><text x="1.0764%" y="367.50"></text></g><g><title>_platform_memmove (19 samples, 0.18%)</title><rect x="0.8456%" y="357" width="0.1826%" height="15" fill="rgb(218,30,26)" fg:x="88" fg:w="19"/><text x="1.0956%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (72 samples, 0.69%)</title><rect x="1.0282%" y="357" width="0.6918%" height="15" fill="rgb(220,122,19)" fg:x="107" fg:w="72"/><text x="1.2782%" y="367.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.03%)</title><rect x="1.6912%" y="341" width="0.0288%" height="15" fill="rgb(250,228,42)" fg:x="176" fg:w="3"/><text x="1.9412%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (22 samples, 0.21%)</title><rect x="1.7200%" y="357" width="0.2114%" height="15" fill="rgb(240,193,28)" fg:x="179" fg:w="22"/><text x="1.9700%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (11 samples, 0.11%)</title><rect x="1.8257%" y="341" width="0.1057%" height="15" fill="rgb(216,20,37)" fg:x="190" fg:w="11"/><text x="2.0757%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (2 samples, 0.02%)</title><rect x="1.9122%" y="325" width="0.0192%" height="15" fill="rgb(206,188,39)" fg:x="199" fg:w="2"/><text x="2.1622%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (39 samples, 0.37%)</title><rect x="1.9314%" y="357" width="0.3747%" height="15" fill="rgb(217,207,13)" fg:x="201" fg:w="39"/><text x="2.1814%" y="367.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.27%)</title><rect x="2.0371%" y="341" width="0.2690%" height="15" fill="rgb(231,73,38)" fg:x="212" fg:w="28"/><text x="2.2871%" y="351.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (3 samples, 0.03%)</title><rect x="2.2773%" y="325" width="0.0288%" height="15" fill="rgb(225,20,46)" fg:x="237" fg:w="3"/><text x="2.5273%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (9 samples, 0.09%)</title><rect x="2.3061%" y="357" width="0.0865%" height="15" fill="rgb(210,31,41)" fg:x="240" fg:w="9"/><text x="2.5561%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.03%)</title><rect x="2.3638%" y="341" width="0.0288%" height="15" fill="rgb(221,200,47)" fg:x="246" fg:w="3"/><text x="2.6138%" y="351.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="2.3734%" y="325" width="0.0192%" height="15" fill="rgb(226,26,5)" fg:x="247" fg:w="2"/><text x="2.6234%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send&gt;&gt;&gt; (7 samples, 0.07%)</title><rect x="2.3926%" y="357" width="0.0673%" height="15" fill="rgb(249,33,26)" fg:x="249" fg:w="7"/><text x="2.6426%" y="367.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (5 samples, 0.05%)</title><rect x="2.9211%" y="325" width="0.0480%" height="15" fill="rgb(235,183,28)" fg:x="304" fg:w="5"/><text x="3.1711%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (65 samples, 0.62%)</title><rect x="3.2286%" y="277" width="0.6246%" height="15" fill="rgb(221,5,38)" fg:x="336" fg:w="65"/><text x="3.4786%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (282 samples, 2.71%)</title><rect x="3.0364%" y="309" width="2.7097%" height="15" fill="rgb(247,18,42)" fg:x="316" fg:w="282"/><text x="3.2864%" y="319.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (279 samples, 2.68%)</title><rect x="3.0652%" y="293" width="2.6809%" height="15" fill="rgb(241,131,45)" fg:x="319" fg:w="279"/><text x="3.3152%" y="303.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (197 samples, 1.89%)</title><rect x="3.8532%" y="277" width="1.8930%" height="15" fill="rgb(249,31,29)" fg:x="401" fg:w="197"/><text x="4.1032%" y="287.50">&lt;..</text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="5.9095%" y="293" width="0.0288%" height="15" fill="rgb(225,111,53)" fg:x="615" fg:w="3"/><text x="6.1595%" y="303.50"></text></g><g><title>_platform_memmove (19 samples, 0.18%)</title><rect x="5.9383%" y="293" width="0.1826%" height="15" fill="rgb(238,160,17)" fg:x="618" fg:w="19"/><text x="6.1883%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (58 samples, 0.56%)</title><rect x="5.7461%" y="309" width="0.5573%" height="15" fill="rgb(214,148,48)" fg:x="598" fg:w="58"/><text x="5.9961%" y="319.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (19 samples, 0.18%)</title><rect x="6.1209%" y="293" width="0.1826%" height="15" fill="rgb(232,36,49)" fg:x="637" fg:w="19"/><text x="6.3709%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (57 samples, 0.55%)</title><rect x="6.8704%" y="229" width="0.5477%" height="15" fill="rgb(209,103,24)" fg:x="715" fg:w="57"/><text x="7.1204%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (18 samples, 0.17%)</title><rect x="7.4181%" y="229" width="0.1730%" height="15" fill="rgb(229,88,8)" fg:x="772" fg:w="18"/><text x="7.6681%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (215 samples, 2.07%)</title><rect x="6.4860%" y="245" width="2.0659%" height="15" fill="rgb(213,181,19)" fg:x="675" fg:w="215"/><text x="6.7360%" y="255.50">&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (100 samples, 0.96%)</title><rect x="7.5910%" y="229" width="0.9609%" height="15" fill="rgb(254,191,54)" fg:x="790" fg:w="100"/><text x="7.8410%" y="239.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (25 samples, 0.24%)</title><rect x="8.3117%" y="213" width="0.2402%" height="15" fill="rgb(241,83,37)" fg:x="865" fg:w="25"/><text x="8.5617%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (583 samples, 5.60%)</title><rect x="2.9692%" y="325" width="5.6020%" height="15" fill="rgb(233,36,39)" fg:x="309" fg:w="583"/><text x="3.2192%" y="335.50">core::h..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (235 samples, 2.26%)</title><rect x="6.3131%" y="309" width="2.2581%" height="15" fill="rgb(226,3,54)" fg:x="657" fg:w="235"/><text x="6.5631%" y="319.50">c..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (229 samples, 2.20%)</title><rect x="6.3707%" y="293" width="2.2004%" height="15" fill="rgb(245,192,40)" fg:x="663" fg:w="229"/><text x="6.6207%" y="303.50">c..</text></g><g><title>core::hash::Hasher::write_usize (227 samples, 2.18%)</title><rect x="6.3899%" y="277" width="2.1812%" height="15" fill="rgb(238,167,29)" fg:x="665" fg:w="227"/><text x="6.6399%" y="287.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (222 samples, 2.13%)</title><rect x="6.4380%" y="261" width="2.1332%" height="15" fill="rgb(232,182,51)" fg:x="670" fg:w="222"/><text x="6.6880%" y="271.50">&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.02%)</title><rect x="8.5519%" y="245" width="0.0192%" height="15" fill="rgb(231,60,39)" fg:x="890" fg:w="2"/><text x="8.8019%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.03%)</title><rect x="10.4641%" y="293" width="0.0288%" height="15" fill="rgb(208,69,12)" fg:x="1089" fg:w="3"/><text x="10.7141%" y="303.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (143 samples, 1.37%)</title><rect x="10.4161%" y="309" width="1.3741%" height="15" fill="rgb(235,93,37)" fg:x="1084" fg:w="143"/><text x="10.6661%" y="319.50"></text></g><g><title>core::ptr::read_unaligned (135 samples, 1.30%)</title><rect x="10.4929%" y="293" width="1.2972%" height="15" fill="rgb(213,116,39)" fg:x="1092" fg:w="135"/><text x="10.7429%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (112 samples, 1.08%)</title><rect x="10.7139%" y="277" width="1.0762%" height="15" fill="rgb(222,207,29)" fg:x="1115" fg:w="112"/><text x="10.9639%" y="287.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (52 samples, 0.50%)</title><rect x="11.2905%" y="261" width="0.4997%" height="15" fill="rgb(206,96,30)" fg:x="1175" fg:w="52"/><text x="11.5405%" y="271.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.03%)</title><rect x="12.0111%" y="293" width="0.0288%" height="15" fill="rgb(218,138,4)" fg:x="1250" fg:w="3"/><text x="12.2611%" y="303.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (9 samples, 0.09%)</title><rect x="12.0400%" y="293" width="0.0865%" height="15" fill="rgb(250,191,14)" fg:x="1253" fg:w="9"/><text x="12.2900%" y="303.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (42 samples, 0.40%)</title><rect x="11.7901%" y="309" width="0.4036%" height="15" fill="rgb(239,60,40)" fg:x="1227" fg:w="42"/><text x="12.0401%" y="319.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (7 samples, 0.07%)</title><rect x="12.1265%" y="293" width="0.0673%" height="15" fill="rgb(206,27,48)" fg:x="1262" fg:w="7"/><text x="12.3765%" y="303.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (4 samples, 0.04%)</title><rect x="12.6646%" y="261" width="0.0384%" height="15" fill="rgb(225,35,8)" fg:x="1318" fg:w="4"/><text x="12.9146%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,061 samples, 10.20%)</title><rect x="2.5656%" y="341" width="10.1951%" height="15" fill="rgb(250,213,24)" fg:x="267" fg:w="1061"/><text x="2.8156%" y="351.50">hashbrown::map:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (436 samples, 4.19%)</title><rect x="8.5712%" y="325" width="4.1895%" height="15" fill="rgb(247,123,22)" fg:x="892" fg:w="436"/><text x="8.8212%" y="335.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (59 samples, 0.57%)</title><rect x="12.1937%" y="309" width="0.5669%" height="15" fill="rgb(231,138,38)" fg:x="1269" fg:w="59"/><text x="12.4437%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (21 samples, 0.20%)</title><rect x="12.5589%" y="293" width="0.2018%" height="15" fill="rgb(231,145,46)" fg:x="1307" fg:w="21"/><text x="12.8089%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (15 samples, 0.14%)</title><rect x="12.6165%" y="277" width="0.1441%" height="15" fill="rgb(251,118,11)" fg:x="1313" fg:w="15"/><text x="12.8665%" y="287.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (6 samples, 0.06%)</title><rect x="12.7030%" y="261" width="0.0577%" height="15" fill="rgb(217,147,25)" fg:x="1322" fg:w="6"/><text x="12.9530%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,076 samples, 10.34%)</title><rect x="2.4599%" y="357" width="10.3392%" height="15" fill="rgb(247,81,37)" fg:x="256" fg:w="1076"/><text x="2.7099%" y="367.50">std::collection..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.04%)</title><rect x="12.7606%" y="341" width="0.0384%" height="15" fill="rgb(209,12,38)" fg:x="1328" fg:w="4"/><text x="13.0106%" y="351.50"></text></g><g><title>DYLD-STUB$$memcpy (8 samples, 0.08%)</title><rect x="12.9528%" y="341" width="0.0769%" height="15" fill="rgb(227,1,9)" fg:x="1348" fg:w="8"/><text x="13.2028%" y="351.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.04%)</title><rect x="13.2027%" y="293" width="0.0384%" height="15" fill="rgb(248,47,43)" fg:x="1374" fg:w="4"/><text x="13.4527%" y="303.50"></text></g><g><title>_platform_memmove (6 samples, 0.06%)</title><rect x="13.2411%" y="293" width="0.0577%" height="15" fill="rgb(221,10,30)" fg:x="1378" fg:w="6"/><text x="13.4911%" y="303.50"></text></g><g><title>bitbeat::Machine::run::_{{closure}} (4 samples, 0.04%)</title><rect x="13.2987%" y="293" width="0.0384%" height="15" fill="rgb(210,229,1)" fg:x="1384" fg:w="4"/><text x="13.5487%" y="303.50"></text></g><g><title>_platform_memmove (2 samples, 0.02%)</title><rect x="13.3852%" y="277" width="0.0192%" height="15" fill="rgb(222,148,37)" fg:x="1393" fg:w="2"/><text x="13.6352%" y="287.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (6 samples, 0.06%)</title><rect x="13.4044%" y="277" width="0.0577%" height="15" fill="rgb(234,67,33)" fg:x="1395" fg:w="6"/><text x="13.6544%" y="287.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.10%)</title><rect x="14.8650%" y="261" width="0.0961%" height="15" fill="rgb(247,98,35)" fg:x="1547" fg:w="10"/><text x="15.1150%" y="271.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (15 samples, 0.14%)</title><rect x="14.9611%" y="261" width="0.1441%" height="15" fill="rgb(247,138,52)" fg:x="1557" fg:w="15"/><text x="15.2111%" y="271.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="15.1052%" y="261" width="0.0288%" height="15" fill="rgb(213,79,30)" fg:x="1572" fg:w="3"/><text x="15.3552%" y="271.50"></text></g><g><title>_platform_memmove (21 samples, 0.20%)</title><rect x="15.1340%" y="261" width="0.2018%" height="15" fill="rgb(246,177,23)" fg:x="1575" fg:w="21"/><text x="15.3840%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (12 samples, 0.12%)</title><rect x="15.3358%" y="261" width="0.1153%" height="15" fill="rgb(230,62,27)" fg:x="1596" fg:w="12"/><text x="15.5858%" y="271.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="15.5088%" y="245" width="0.0192%" height="15" fill="rgb(216,154,8)" fg:x="1614" fg:w="2"/><text x="15.7588%" y="255.50"></text></g><g><title>_platform_memmove (101 samples, 0.97%)</title><rect x="15.5280%" y="245" width="0.9705%" height="15" fill="rgb(244,35,45)" fg:x="1616" fg:w="101"/><text x="15.7780%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="16.4985%" y="245" width="0.0192%" height="15" fill="rgb(251,115,12)" fg:x="1717" fg:w="2"/><text x="16.7485%" y="255.50"></text></g><g><title>DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="16.7868%" y="197" width="0.0192%" height="15" fill="rgb(240,54,50)" fg:x="1747" fg:w="2"/><text x="17.0368%" y="207.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.07%)</title><rect x="16.8060%" y="197" width="0.0673%" height="15" fill="rgb(233,84,52)" fg:x="1749" fg:w="7"/><text x="17.0560%" y="207.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (28 samples, 0.27%)</title><rect x="16.8733%" y="197" width="0.2690%" height="15" fill="rgb(207,117,47)" fg:x="1756" fg:w="28"/><text x="17.1233%" y="207.50"></text></g><g><title>mvm_allocate_pages_plat (2 samples, 0.02%)</title><rect x="17.3921%" y="165" width="0.0192%" height="15" fill="rgb(249,43,39)" fg:x="1810" fg:w="2"/><text x="17.6421%" y="175.50"></text></g><g><title>mach_vm_map (2 samples, 0.02%)</title><rect x="17.3921%" y="149" width="0.0192%" height="15" fill="rgb(209,38,44)" fg:x="1810" fg:w="2"/><text x="17.6421%" y="159.50"></text></g><g><title>_kernelrpc_mach_vm_map_trap (2 samples, 0.02%)</title><rect x="17.3921%" y="133" width="0.0192%" height="15" fill="rgb(236,212,23)" fg:x="1810" fg:w="2"/><text x="17.6421%" y="143.50"></text></g><g><title>rack_get_thread_index (7 samples, 0.07%)</title><rect x="17.4114%" y="165" width="0.0673%" height="15" fill="rgb(242,79,21)" fg:x="1812" fg:w="7"/><text x="17.6614%" y="175.50"></text></g><g><title>alloc::alloc::alloc (100 samples, 0.96%)</title><rect x="16.7387%" y="213" width="0.9609%" height="15" fill="rgb(211,96,35)" fg:x="1742" fg:w="100"/><text x="16.9887%" y="223.50"></text></g><g><title>szone_malloc_should_clear (57 samples, 0.55%)</title><rect x="17.1519%" y="197" width="0.5477%" height="15" fill="rgb(253,215,40)" fg:x="1785" fg:w="57"/><text x="17.4019%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (48 samples, 0.46%)</title><rect x="17.2384%" y="181" width="0.4612%" height="15" fill="rgb(211,81,21)" fg:x="1794" fg:w="48"/><text x="17.4884%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (23 samples, 0.22%)</title><rect x="17.4786%" y="165" width="0.2210%" height="15" fill="rgb(208,190,38)" fg:x="1819" fg:w="23"/><text x="17.7286%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (116 samples, 1.11%)</title><rect x="16.6138%" y="229" width="1.1146%" height="15" fill="rgb(235,213,38)" fg:x="1729" fg:w="116"/><text x="16.8638%" y="239.50"></text></g><g><title>nanov2_malloc_type (2 samples, 0.02%)</title><rect x="17.7092%" y="213" width="0.0192%" height="15" fill="rgb(237,122,38)" fg:x="1843" fg:w="2"/><text x="17.9592%" y="223.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (246 samples, 2.36%)</title><rect x="15.4511%" y="261" width="2.3638%" height="15" fill="rgb(244,218,35)" fg:x="1608" fg:w="246"/><text x="15.7011%" y="271.50">al..</text></g><g><title>alloc::alloc::exchange_malloc (135 samples, 1.30%)</title><rect x="16.5177%" y="245" width="1.2972%" height="15" fill="rgb(240,68,47)" fg:x="1719" fg:w="135"/><text x="16.7677%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (9 samples, 0.09%)</title><rect x="17.7285%" y="229" width="0.0865%" height="15" fill="rgb(210,16,53)" fg:x="1845" fg:w="9"/><text x="17.9785%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.23%)</title><rect x="19.6118%" y="245" width="0.2306%" height="15" fill="rgb(235,124,12)" fg:x="2041" fg:w="24"/><text x="19.8618%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (30 samples, 0.29%)</title><rect x="20.4189%" y="229" width="0.2883%" height="15" fill="rgb(224,169,11)" fg:x="2125" fg:w="30"/><text x="20.6689%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (174 samples, 1.67%)</title><rect x="19.8424%" y="245" width="1.6720%" height="15" fill="rgb(250,166,2)" fg:x="2065" fg:w="174"/><text x="20.0924%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (84 samples, 0.81%)</title><rect x="20.7072%" y="229" width="0.8071%" height="15" fill="rgb(242,216,29)" fg:x="2155" fg:w="84"/><text x="20.9572%" y="239.50"></text></g><g><title>alloc::string::String::from_utf8 (3 samples, 0.03%)</title><rect x="21.5240%" y="245" width="0.0288%" height="15" fill="rgb(230,116,27)" fg:x="2240" fg:w="3"/><text x="21.7740%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (2 samples, 0.02%)</title><rect x="21.5528%" y="245" width="0.0192%" height="15" fill="rgb(228,99,48)" fg:x="2243" fg:w="2"/><text x="21.8028%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.06%)</title><rect x="21.5720%" y="245" width="0.0577%" height="15" fill="rgb(253,11,6)" fg:x="2245" fg:w="6"/><text x="21.8220%" y="255.50"></text></g><g><title>bitbeat::Process::new (2 samples, 0.02%)</title><rect x="21.6297%" y="245" width="0.0192%" height="15" fill="rgb(247,143,39)" fg:x="2251" fg:w="2"/><text x="21.8797%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="21.9179%" y="229" width="0.0192%" height="15" fill="rgb(236,97,10)" fg:x="2281" fg:w="2"/><text x="22.1679%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.05%)</title><rect x="22.0044%" y="213" width="0.0480%" height="15" fill="rgb(233,208,19)" fg:x="2290" fg:w="5"/><text x="22.2544%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (24 samples, 0.23%)</title><rect x="21.9372%" y="229" width="0.2306%" height="15" fill="rgb(216,164,2)" fg:x="2283" fg:w="24"/><text x="22.1872%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (12 samples, 0.12%)</title><rect x="22.0525%" y="213" width="0.1153%" height="15" fill="rgb(220,129,5)" fg:x="2295" fg:w="12"/><text x="22.3025%" y="223.50"></text></g><g><title>bitbeat::handle_add (57 samples, 0.55%)</title><rect x="21.6489%" y="245" width="0.5477%" height="15" fill="rgb(242,17,10)" fg:x="2253" fg:w="57"/><text x="21.8989%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (3 samples, 0.03%)</title><rect x="22.1678%" y="229" width="0.0288%" height="15" fill="rgb(242,107,0)" fg:x="2307" fg:w="3"/><text x="22.4178%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.07%)</title><rect x="22.8212%" y="229" width="0.0673%" height="15" fill="rgb(251,28,31)" fg:x="2375" fg:w="7"/><text x="23.0712%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.12%)</title><rect x="23.0518%" y="213" width="0.1153%" height="15" fill="rgb(233,223,10)" fg:x="2399" fg:w="12"/><text x="23.3018%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (57 samples, 0.55%)</title><rect x="22.8884%" y="229" width="0.5477%" height="15" fill="rgb(215,21,27)" fg:x="2382" fg:w="57"/><text x="23.1384%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (28 samples, 0.27%)</title><rect x="23.1671%" y="213" width="0.2690%" height="15" fill="rgb(232,23,21)" fg:x="2411" fg:w="28"/><text x="23.4171%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.03%)</title><rect x="23.4361%" y="229" width="0.0288%" height="15" fill="rgb(244,5,23)" fg:x="2439" fg:w="3"/><text x="23.6861%" y="239.50"></text></g><g><title>bitbeat::handle_cmp_le (137 samples, 1.32%)</title><rect x="22.1966%" y="245" width="1.3164%" height="15" fill="rgb(226,81,46)" fg:x="2310" fg:w="137"/><text x="22.4466%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (5 samples, 0.05%)</title><rect x="23.4650%" y="229" width="0.0480%" height="15" fill="rgb(247,70,30)" fg:x="2442" fg:w="5"/><text x="23.7150%" y="239.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (19 samples, 0.18%)</title><rect x="24.1088%" y="229" width="0.1826%" height="15" fill="rgb(212,68,19)" fg:x="2509" fg:w="19"/><text x="24.3588%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (14 samples, 0.13%)</title><rect x="24.1568%" y="213" width="0.1345%" height="15" fill="rgb(240,187,13)" fg:x="2514" fg:w="14"/><text x="24.4068%" y="223.50"></text></g><g><title> N]&gt;::try_from (14 samples, 0.13%)</title><rect x="24.1568%" y="197" width="0.1345%" height="15" fill="rgb(223,113,26)" fg:x="2514" fg:w="14"/><text x="24.4068%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.03%)</title><rect x="24.4643%" y="213" width="0.0288%" height="15" fill="rgb(206,192,2)" fg:x="2546" fg:w="3"/><text x="24.7143%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (42 samples, 0.40%)</title><rect x="24.3010%" y="229" width="0.4036%" height="15" fill="rgb(241,108,4)" fg:x="2529" fg:w="42"/><text x="24.5510%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (22 samples, 0.21%)</title><rect x="24.4931%" y="213" width="0.2114%" height="15" fill="rgb(247,173,49)" fg:x="2549" fg:w="22"/><text x="24.7431%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.14%)</title><rect x="24.7045%" y="229" width="0.1441%" height="15" fill="rgb(224,114,35)" fg:x="2571" fg:w="15"/><text x="24.9545%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.03%)</title><rect x="24.8487%" y="229" width="0.0288%" height="15" fill="rgb(245,159,27)" fg:x="2586" fg:w="3"/><text x="25.0987%" y="239.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (3 samples, 0.03%)</title><rect x="24.8775%" y="229" width="0.0288%" height="15" fill="rgb(245,172,44)" fg:x="2589" fg:w="3"/><text x="25.1275%" y="239.50"></text></g><g><title>bitbeat::handle_jump_if (149 samples, 1.43%)</title><rect x="23.5226%" y="245" width="1.4317%" height="15" fill="rgb(236,23,11)" fg:x="2448" fg:w="149"/><text x="23.7726%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (4 samples, 0.04%)</title><rect x="24.9159%" y="229" width="0.0384%" height="15" fill="rgb(205,117,38)" fg:x="2593" fg:w="4"/><text x="25.1659%" y="239.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (31 samples, 0.30%)</title><rect x="26.1266%" y="229" width="0.2979%" height="15" fill="rgb(237,72,25)" fg:x="2719" fg:w="31"/><text x="26.3766%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (26 samples, 0.25%)</title><rect x="26.1747%" y="213" width="0.2498%" height="15" fill="rgb(244,70,9)" fg:x="2724" fg:w="26"/><text x="26.4247%" y="223.50"></text></g><g><title> N]&gt;::try_from (26 samples, 0.25%)</title><rect x="26.1747%" y="197" width="0.2498%" height="15" fill="rgb(217,125,39)" fg:x="2724" fg:w="26"/><text x="26.4247%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.06%)</title><rect x="26.4245%" y="229" width="0.0577%" height="15" fill="rgb(235,36,10)" fg:x="2750" fg:w="6"/><text x="26.6745%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.07%)</title><rect x="26.8665%" y="213" width="0.0673%" height="15" fill="rgb(251,123,47)" fg:x="2796" fg:w="7"/><text x="27.1165%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (81 samples, 0.78%)</title><rect x="26.4822%" y="229" width="0.7783%" height="15" fill="rgb(221,13,13)" fg:x="2756" fg:w="81"/><text x="26.7322%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (34 samples, 0.33%)</title><rect x="26.9338%" y="213" width="0.3267%" height="15" fill="rgb(238,131,9)" fg:x="2803" fg:w="34"/><text x="27.1838%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.18%)</title><rect x="27.2605%" y="229" width="0.1826%" height="15" fill="rgb(211,50,8)" fg:x="2837" fg:w="19"/><text x="27.5105%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.05%)</title><rect x="27.4431%" y="229" width="0.0480%" height="15" fill="rgb(245,182,24)" fg:x="2856" fg:w="5"/><text x="27.6931%" y="239.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_le_bytes (2 samples, 0.02%)</title><rect x="27.4911%" y="229" width="0.0192%" height="15" fill="rgb(242,14,37)" fg:x="2861" fg:w="2"/><text x="27.7411%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;i64,anyhow::Error&gt;&gt; (8 samples, 0.08%)</title><rect x="27.5103%" y="229" width="0.0769%" height="15" fill="rgb(246,228,12)" fg:x="2863" fg:w="8"/><text x="27.7603%" y="239.50"></text></g><g><title>bitbeat::handle_load_imm (277 samples, 2.66%)</title><rect x="24.9544%" y="245" width="2.6617%" height="15" fill="rgb(213,55,15)" fg:x="2597" fg:w="277"/><text x="25.2044%" y="255.50">bi..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (3 samples, 0.03%)</title><rect x="27.5872%" y="229" width="0.0288%" height="15" fill="rgb(209,9,3)" fg:x="2871" fg:w="3"/><text x="27.8372%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.04%)</title><rect x="28.1061%" y="229" width="0.0384%" height="15" fill="rgb(230,59,30)" fg:x="2925" fg:w="4"/><text x="28.3561%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.08%)</title><rect x="28.2598%" y="213" width="0.0769%" height="15" fill="rgb(209,121,21)" fg:x="2941" fg:w="8"/><text x="28.5098%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (41 samples, 0.39%)</title><rect x="28.1445%" y="229" width="0.3940%" height="15" fill="rgb(220,109,13)" fg:x="2929" fg:w="41"/><text x="28.3945%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (21 samples, 0.20%)</title><rect x="28.3367%" y="213" width="0.2018%" height="15" fill="rgb(232,18,1)" fg:x="2949" fg:w="21"/><text x="28.5867%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (32 samples, 0.31%)</title><rect x="28.5385%" y="229" width="0.3075%" height="15" fill="rgb(215,41,42)" fg:x="2970" fg:w="32"/><text x="28.7885%" y="239.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.03%)</title><rect x="28.8171%" y="213" width="0.0288%" height="15" fill="rgb(224,123,36)" fg:x="2999" fg:w="3"/><text x="29.0671%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.04%)</title><rect x="28.8460%" y="229" width="0.0384%" height="15" fill="rgb(240,125,3)" fg:x="3002" fg:w="4"/><text x="29.0960%" y="239.50"></text></g><g><title>bitbeat::handle_recv (135 samples, 1.30%)</title><rect x="27.6160%" y="245" width="1.2972%" height="15" fill="rgb(205,98,50)" fg:x="2874" fg:w="135"/><text x="27.8660%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (3 samples, 0.03%)</title><rect x="28.8844%" y="229" width="0.0288%" height="15" fill="rgb(205,185,37)" fg:x="3006" fg:w="3"/><text x="29.1344%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.08%)</title><rect x="29.4994%" y="213" width="0.0769%" height="15" fill="rgb(238,207,15)" fg:x="3070" fg:w="8"/><text x="29.7494%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (32 samples, 0.31%)</title><rect x="29.3937%" y="229" width="0.3075%" height="15" fill="rgb(213,199,42)" fg:x="3059" fg:w="32"/><text x="29.6437%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (13 samples, 0.12%)</title><rect x="29.5762%" y="213" width="0.1249%" height="15" fill="rgb(235,201,11)" fg:x="3078" fg:w="13"/><text x="29.8262%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (3 samples, 0.03%)</title><rect x="30.3738%" y="197" width="0.0288%" height="15" fill="rgb(207,46,11)" fg:x="3161" fg:w="3"/><text x="30.6238%" y="207.50"></text></g><g><title>_malloc_zone_malloc (5 samples, 0.05%)</title><rect x="30.4987%" y="149" width="0.0480%" height="15" fill="rgb(241,35,35)" fg:x="3174" fg:w="5"/><text x="30.7487%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (17 samples, 0.16%)</title><rect x="30.4026%" y="197" width="0.1634%" height="15" fill="rgb(243,32,47)" fg:x="3164" fg:w="17"/><text x="30.6526%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (16 samples, 0.15%)</title><rect x="30.4122%" y="181" width="0.1537%" height="15" fill="rgb(247,202,23)" fg:x="3165" fg:w="16"/><text x="30.6622%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.10%)</title><rect x="30.4699%" y="165" width="0.0961%" height="15" fill="rgb(219,102,11)" fg:x="3171" fg:w="10"/><text x="30.7199%" y="175.50"></text></g><g><title>nanov2_malloc_type (2 samples, 0.02%)</title><rect x="30.5467%" y="149" width="0.0192%" height="15" fill="rgb(243,110,44)" fg:x="3179" fg:w="2"/><text x="30.7967%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (90 samples, 0.86%)</title><rect x="29.7108%" y="229" width="0.8648%" height="15" fill="rgb(222,74,54)" fg:x="3092" fg:w="90"/><text x="29.9608%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (27 samples, 0.26%)</title><rect x="30.3161%" y="213" width="0.2594%" height="15" fill="rgb(216,99,12)" fg:x="3155" fg:w="27"/><text x="30.5661%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (15 samples, 0.14%)</title><rect x="30.5756%" y="229" width="0.1441%" height="15" fill="rgb(226,22,26)" fg:x="3182" fg:w="15"/><text x="30.8256%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (10 samples, 0.10%)</title><rect x="30.6236%" y="213" width="0.0961%" height="15" fill="rgb(217,163,10)" fg:x="3187" fg:w="10"/><text x="30.8736%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (62 samples, 0.60%)</title><rect x="30.7197%" y="229" width="0.5958%" height="15" fill="rgb(213,25,53)" fg:x="3197" fg:w="62"/><text x="30.9697%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (4 samples, 0.04%)</title><rect x="31.2770%" y="213" width="0.0384%" height="15" fill="rgb(252,105,26)" fg:x="3255" fg:w="4"/><text x="31.5270%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="31.2866%" y="197" width="0.0288%" height="15" fill="rgb(220,39,43)" fg:x="3256" fg:w="3"/><text x="31.5366%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (4 samples, 0.04%)</title><rect x="31.3155%" y="229" width="0.0384%" height="15" fill="rgb(229,68,48)" fg:x="3259" fg:w="4"/><text x="31.5655%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.02%)</title><rect x="31.3827%" y="213" width="0.0192%" height="15" fill="rgb(252,8,32)" fg:x="3266" fg:w="2"/><text x="31.6327%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.02%)</title><rect x="31.5461%" y="197" width="0.0192%" height="15" fill="rgb(223,20,43)" fg:x="3283" fg:w="2"/><text x="31.7961%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (39 samples, 0.37%)</title><rect x="31.6518%" y="149" width="0.3747%" height="15" fill="rgb(229,81,49)" fg:x="3294" fg:w="39"/><text x="31.9018%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (148 samples, 1.42%)</title><rect x="31.5653%" y="181" width="1.4221%" height="15" fill="rgb(236,28,36)" fg:x="3285" fg:w="148"/><text x="31.8153%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (146 samples, 1.40%)</title><rect x="31.5845%" y="165" width="1.4029%" height="15" fill="rgb(249,185,26)" fg:x="3287" fg:w="146"/><text x="31.8345%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (100 samples, 0.96%)</title><rect x="32.0265%" y="149" width="0.9609%" height="15" fill="rgb(249,174,33)" fg:x="3333" fg:w="100"/><text x="32.2765%" y="159.50"></text></g><g><title>_platform_memmove (9 samples, 0.09%)</title><rect x="33.1508%" y="165" width="0.0865%" height="15" fill="rgb(233,201,37)" fg:x="3450" fg:w="9"/><text x="33.4008%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (34 samples, 0.33%)</title><rect x="32.9874%" y="181" width="0.3267%" height="15" fill="rgb(221,78,26)" fg:x="3433" fg:w="34"/><text x="33.2374%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (8 samples, 0.08%)</title><rect x="33.2372%" y="165" width="0.0769%" height="15" fill="rgb(250,127,30)" fg:x="3459" fg:w="8"/><text x="33.4872%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (19 samples, 0.18%)</title><rect x="33.6312%" y="101" width="0.1826%" height="15" fill="rgb(230,49,44)" fg:x="3500" fg:w="19"/><text x="33.8812%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.07%)</title><rect x="33.8138%" y="101" width="0.0673%" height="15" fill="rgb(229,67,23)" fg:x="3519" fg:w="7"/><text x="34.0638%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (92 samples, 0.88%)</title><rect x="33.4006%" y="117" width="0.8840%" height="15" fill="rgb(249,83,47)" fg:x="3476" fg:w="92"/><text x="33.6506%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (42 samples, 0.40%)</title><rect x="33.8810%" y="101" width="0.4036%" height="15" fill="rgb(215,43,3)" fg:x="3526" fg:w="42"/><text x="34.1310%" y="111.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (7 samples, 0.07%)</title><rect x="34.2174%" y="85" width="0.0673%" height="15" fill="rgb(238,154,13)" fg:x="3561" fg:w="7"/><text x="34.4674%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (285 samples, 2.74%)</title><rect x="31.5653%" y="197" width="2.7385%" height="15" fill="rgb(219,56,2)" fg:x="3285" fg:w="285"/><text x="31.8153%" y="207.50">co..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (103 samples, 0.99%)</title><rect x="33.3141%" y="181" width="0.9897%" height="15" fill="rgb(233,0,4)" fg:x="3467" fg:w="103"/><text x="33.5641%" y="191.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (102 samples, 0.98%)</title><rect x="33.3237%" y="165" width="0.9801%" height="15" fill="rgb(235,30,7)" fg:x="3468" fg:w="102"/><text x="33.5737%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (99 samples, 0.95%)</title><rect x="33.3526%" y="149" width="0.9513%" height="15" fill="rgb(250,79,13)" fg:x="3471" fg:w="99"/><text x="33.6026%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (98 samples, 0.94%)</title><rect x="33.3622%" y="133" width="0.9417%" height="15" fill="rgb(211,146,34)" fg:x="3472" fg:w="98"/><text x="33.6122%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.02%)</title><rect x="34.2846%" y="117" width="0.0192%" height="15" fill="rgb(228,22,38)" fg:x="3568" fg:w="2"/><text x="34.5346%" y="127.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (75 samples, 0.72%)</title><rect x="35.0918%" y="181" width="0.7207%" height="15" fill="rgb(235,168,5)" fg:x="3652" fg:w="75"/><text x="35.3418%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (73 samples, 0.70%)</title><rect x="35.1110%" y="165" width="0.7015%" height="15" fill="rgb(221,155,16)" fg:x="3654" fg:w="73"/><text x="35.3610%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (63 samples, 0.61%)</title><rect x="35.2071%" y="149" width="0.6054%" height="15" fill="rgb(215,215,53)" fg:x="3664" fg:w="63"/><text x="35.4571%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (31 samples, 0.30%)</title><rect x="35.5146%" y="133" width="0.2979%" height="15" fill="rgb(223,4,10)" fg:x="3696" fg:w="31"/><text x="35.7646%" y="143.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (2 samples, 0.02%)</title><rect x="35.9085%" y="165" width="0.0192%" height="15" fill="rgb(234,103,6)" fg:x="3737" fg:w="2"/><text x="36.1585%" y="175.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (16 samples, 0.15%)</title><rect x="35.8124%" y="181" width="0.1537%" height="15" fill="rgb(227,97,0)" fg:x="3727" fg:w="16"/><text x="36.0624%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (4 samples, 0.04%)</title><rect x="35.9277%" y="165" width="0.0384%" height="15" fill="rgb(234,150,53)" fg:x="3739" fg:w="4"/><text x="36.1777%" y="175.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (4 samples, 0.04%)</title><rect x="36.2160%" y="133" width="0.0384%" height="15" fill="rgb(228,201,54)" fg:x="3769" fg:w="4"/><text x="36.4660%" y="143.50"></text></g><g><title>bitbeat::handle_send (767 samples, 7.37%)</title><rect x="28.9132%" y="245" width="7.3700%" height="15" fill="rgb(222,22,37)" fg:x="3009" fg:w="767"/><text x="29.1632%" y="255.50">bitbeat::h..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (513 samples, 4.93%)</title><rect x="31.3539%" y="229" width="4.9294%" height="15" fill="rgb(237,53,32)" fg:x="3263" fg:w="513"/><text x="31.6039%" y="239.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (508 samples, 4.88%)</title><rect x="31.4019%" y="213" width="4.8813%" height="15" fill="rgb(233,25,53)" fg:x="3268" fg:w="508"/><text x="31.6519%" y="223.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (206 samples, 1.98%)</title><rect x="34.3038%" y="197" width="1.9794%" height="15" fill="rgb(210,40,34)" fg:x="3570" fg:w="206"/><text x="34.5538%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (33 samples, 0.32%)</title><rect x="35.9662%" y="181" width="0.3171%" height="15" fill="rgb(241,220,44)" fg:x="3743" fg:w="33"/><text x="36.2162%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (13 samples, 0.12%)</title><rect x="36.1584%" y="165" width="0.1249%" height="15" fill="rgb(235,28,35)" fg:x="3763" fg:w="13"/><text x="36.4084%" y="175.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (12 samples, 0.12%)</title><rect x="36.1680%" y="149" width="0.1153%" height="15" fill="rgb(210,56,17)" fg:x="3764" fg:w="12"/><text x="36.4180%" y="159.50"></text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::PartialEq for usize&gt;::eq (3 samples, 0.03%)</title><rect x="36.2544%" y="133" width="0.0288%" height="15" fill="rgb(224,130,29)" fg:x="3773" fg:w="3"/><text x="36.5044%" y="143.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (67 samples, 0.64%)</title><rect x="39.3870%" y="229" width="0.6438%" height="15" fill="rgb(235,212,8)" fg:x="4099" fg:w="67"/><text x="39.6370%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (53 samples, 0.51%)</title><rect x="39.5215%" y="213" width="0.5093%" height="15" fill="rgb(223,33,50)" fg:x="4113" fg:w="53"/><text x="39.7715%" y="223.50"></text></g><g><title> N]&gt;::try_from (53 samples, 0.51%)</title><rect x="39.5215%" y="197" width="0.5093%" height="15" fill="rgb(219,149,13)" fg:x="4113" fg:w="53"/><text x="39.7715%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.26%)</title><rect x="40.0307%" y="229" width="0.2594%" height="15" fill="rgb(250,156,29)" fg:x="4166" fg:w="27"/><text x="40.2807%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.12%)</title><rect x="40.2902%" y="229" width="0.1153%" height="15" fill="rgb(216,193,19)" fg:x="4193" fg:w="12"/><text x="40.5402%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.29%)</title><rect x="40.4055%" y="229" width="0.2883%" height="15" fill="rgb(216,135,14)" fg:x="4205" fg:w="30"/><text x="40.6555%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (28 samples, 0.27%)</title><rect x="40.4247%" y="213" width="0.2690%" height="15" fill="rgb(241,47,5)" fg:x="4207" fg:w="28"/><text x="40.6747%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (21 samples, 0.20%)</title><rect x="40.4920%" y="197" width="0.2018%" height="15" fill="rgb(233,42,35)" fg:x="4214" fg:w="21"/><text x="40.7420%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.09%)</title><rect x="42.2504%" y="213" width="0.0865%" height="15" fill="rgb(231,13,6)" fg:x="4397" fg:w="9"/><text x="42.5004%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (254 samples, 2.44%)</title><rect x="40.6938%" y="229" width="2.4407%" height="15" fill="rgb(207,181,40)" fg:x="4235" fg:w="254"/><text x="40.9438%" y="239.50">&lt;a..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (83 samples, 0.80%)</title><rect x="42.3369%" y="213" width="0.7975%" height="15" fill="rgb(254,173,49)" fg:x="4406" fg:w="83"/><text x="42.5869%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (52 samples, 0.50%)</title><rect x="43.1344%" y="229" width="0.4997%" height="15" fill="rgb(221,1,38)" fg:x="4489" fg:w="52"/><text x="43.3844%" y="239.50"></text></g><g><title>_platform_memmove (35 samples, 0.34%)</title><rect x="43.6341%" y="229" width="0.3363%" height="15" fill="rgb(206,124,46)" fg:x="4541" fg:w="35"/><text x="43.8841%" y="239.50"></text></g><g><title>_platform_memmove (12 samples, 0.12%)</title><rect x="44.3836%" y="197" width="0.1153%" height="15" fill="rgb(249,21,11)" fg:x="4619" fg:w="12"/><text x="44.6336%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.02%)</title><rect x="44.4989%" y="197" width="0.0192%" height="15" fill="rgb(222,201,40)" fg:x="4631" fg:w="2"/><text x="44.7489%" y="207.50"></text></g><g><title>DYLD-STUB$$malloc (3 samples, 0.03%)</title><rect x="46.1228%" y="165" width="0.0288%" height="15" fill="rgb(235,61,29)" fg:x="4800" fg:w="3"/><text x="46.3728%" y="175.50"></text></g><g><title>_malloc_zone_malloc (23 samples, 0.22%)</title><rect x="46.1612%" y="165" width="0.2210%" height="15" fill="rgb(219,207,3)" fg:x="4804" fg:w="23"/><text x="46.4112%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (93 samples, 0.89%)</title><rect x="45.7961%" y="181" width="0.8936%" height="15" fill="rgb(222,56,46)" fg:x="4766" fg:w="93"/><text x="46.0461%" y="191.50"></text></g><g><title>nanov2_malloc_type (32 samples, 0.31%)</title><rect x="46.3822%" y="165" width="0.3075%" height="15" fill="rgb(239,76,54)" fg:x="4827" fg:w="32"/><text x="46.6322%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (231 samples, 2.22%)</title><rect x="44.5181%" y="197" width="2.2197%" height="15" fill="rgb(231,124,27)" fg:x="4633" fg:w="231"/><text x="44.7681%" y="207.50">a..</text></g><g><title>core::hint::assert_unchecked::precondition_check (5 samples, 0.05%)</title><rect x="46.6897%" y="181" width="0.0480%" height="15" fill="rgb(249,195,6)" fg:x="4859" fg:w="5"/><text x="46.9397%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (464 samples, 4.46%)</title><rect x="44.0665%" y="213" width="4.4585%" height="15" fill="rgb(237,174,47)" fg:x="4586" fg:w="464"/><text x="44.3165%" y="223.50">&lt;T as..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (186 samples, 1.79%)</title><rect x="46.7378%" y="197" width="1.7873%" height="15" fill="rgb(206,201,31)" fg:x="4864" fg:w="186"/><text x="46.9878%" y="207.50">c..</text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (104 samples, 1.00%)</title><rect x="47.5257%" y="181" width="0.9993%" height="15" fill="rgb(231,57,52)" fg:x="4946" fg:w="104"/><text x="47.7757%" y="191.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec (477 samples, 4.58%)</title><rect x="43.9704%" y="229" width="4.5835%" height="15" fill="rgb(248,177,22)" fg:x="4576" fg:w="477"/><text x="44.2204%" y="239.50">alloc..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.03%)</title><rect x="48.5250%" y="213" width="0.0288%" height="15" fill="rgb(215,211,37)" fg:x="5050" fg:w="3"/><text x="48.7750%" y="223.50"></text></g><g><title>alloc::string::String::as_str (33 samples, 0.32%)</title><rect x="48.5539%" y="229" width="0.3171%" height="15" fill="rgb(241,128,51)" fg:x="5053" fg:w="33"/><text x="48.8039%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (11 samples, 0.11%)</title><rect x="48.7653%" y="213" width="0.1057%" height="15" fill="rgb(227,165,31)" fg:x="5075" fg:w="11"/><text x="49.0153%" y="223.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (17 samples, 0.16%)</title><rect x="49.2073%" y="213" width="0.1634%" height="15" fill="rgb(228,167,24)" fg:x="5121" fg:w="17"/><text x="49.4573%" y="223.50"></text></g><g><title>alloc::string::String::from_utf8 (63 samples, 0.61%)</title><rect x="48.8710%" y="229" width="0.6054%" height="15" fill="rgb(228,143,12)" fg:x="5086" fg:w="63"/><text x="49.1210%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (11 samples, 0.11%)</title><rect x="49.3706%" y="213" width="0.1057%" height="15" fill="rgb(249,149,8)" fg:x="5138" fg:w="11"/><text x="49.6206%" y="223.50"></text></g><g><title>DYLD-STUB$$memmove (2 samples, 0.02%)</title><rect x="49.7454%" y="213" width="0.0192%" height="15" fill="rgb(243,35,44)" fg:x="5177" fg:w="2"/><text x="49.9954%" y="223.50"></text></g><g><title>_platform_memmove (12 samples, 0.12%)</title><rect x="49.7646%" y="213" width="0.1153%" height="15" fill="rgb(246,89,9)" fg:x="5179" fg:w="12"/><text x="50.0146%" y="223.50"></text></g><g><title>__rdl_realloc (2 samples, 0.02%)</title><rect x="50.0144%" y="165" width="0.0192%" height="15" fill="rgb(233,213,13)" fg:x="5205" fg:w="2"/><text x="50.2644%" y="175.50"></text></g><g><title>_nanov2_free (3 samples, 0.03%)</title><rect x="50.2931%" y="133" width="0.0288%" height="15" fill="rgb(233,141,41)" fg:x="5234" fg:w="3"/><text x="50.5431%" y="143.50"></text></g><g><title>DYLD-STUB$$_platform_memmove (2 samples, 0.02%)</title><rect x="50.4468%" y="117" width="0.0192%" height="15" fill="rgb(239,167,4)" fg:x="5250" fg:w="2"/><text x="50.6968%" y="127.50"></text></g><g><title>_nanov2_free (12 samples, 0.12%)</title><rect x="50.4660%" y="117" width="0.1153%" height="15" fill="rgb(209,217,16)" fg:x="5252" fg:w="12"/><text x="50.7160%" y="127.50"></text></g><g><title>_platform_memmove (4 samples, 0.04%)</title><rect x="50.5813%" y="117" width="0.0384%" height="15" fill="rgb(219,88,35)" fg:x="5264" fg:w="4"/><text x="50.8313%" y="127.50"></text></g><g><title>nanov2_malloc (42 samples, 0.40%)</title><rect x="50.6198%" y="117" width="0.4036%" height="15" fill="rgb(220,193,23)" fg:x="5268" fg:w="42"/><text x="50.8698%" y="127.50"></text></g><g><title>nanov2_allocate_outlined (8 samples, 0.08%)</title><rect x="50.9465%" y="101" width="0.0769%" height="15" fill="rgb(230,90,52)" fg:x="5302" fg:w="8"/><text x="51.1965%" y="111.50"></text></g><g><title>nanov2_find_block_and_allocate (4 samples, 0.04%)</title><rect x="50.9849%" y="85" width="0.0384%" height="15" fill="rgb(252,106,19)" fg:x="5306" fg:w="4"/><text x="51.2349%" y="95.50"></text></g><g><title>_malloc_zone_realloc (95 samples, 0.91%)</title><rect x="50.1585%" y="149" width="0.9128%" height="15" fill="rgb(206,74,20)" fg:x="5220" fg:w="95"/><text x="50.4085%" y="159.50"></text></g><g><title>nanov2_realloc (78 samples, 0.75%)</title><rect x="50.3219%" y="133" width="0.7495%" height="15" fill="rgb(230,138,44)" fg:x="5237" fg:w="78"/><text x="50.5719%" y="143.50"></text></g><g><title>nanov2_pointer_size (5 samples, 0.05%)</title><rect x="51.0233%" y="117" width="0.0480%" height="15" fill="rgb(235,182,43)" fg:x="5310" fg:w="5"/><text x="51.2733%" y="127.50"></text></g><g><title>_realloc (112 samples, 1.08%)</title><rect x="50.0336%" y="165" width="1.0762%" height="15" fill="rgb(242,16,51)" fg:x="5207" fg:w="112"/><text x="50.2836%" y="175.50"></text></g><g><title>nanov2_size (4 samples, 0.04%)</title><rect x="51.0714%" y="149" width="0.0384%" height="15" fill="rgb(248,9,4)" fg:x="5315" fg:w="4"/><text x="51.3214%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (121 samples, 1.16%)</title><rect x="49.9568%" y="197" width="1.1627%" height="15" fill="rgb(210,31,22)" fg:x="5199" fg:w="121"/><text x="50.2068%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (118 samples, 1.13%)</title><rect x="49.9856%" y="181" width="1.1339%" height="15" fill="rgb(239,54,39)" fg:x="5202" fg:w="118"/><text x="50.2356%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (132 samples, 1.27%)</title><rect x="49.8799%" y="213" width="1.2684%" height="15" fill="rgb(230,99,41)" fg:x="5191" fg:w="132"/><text x="50.1299%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="51.1194%" y="197" width="0.0288%" height="15" fill="rgb(253,106,12)" fg:x="5320" fg:w="3"/><text x="51.3694%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (187 samples, 1.80%)</title><rect x="49.4859%" y="229" width="1.7969%" height="15" fill="rgb(213,46,41)" fg:x="5150" fg:w="187"/><text x="49.7359%" y="239.50">a..</text></g><g><title>core::intrinsics::copy::precondition_check (13 samples, 0.12%)</title><rect x="51.1579%" y="213" width="0.1249%" height="15" fill="rgb(215,133,35)" fg:x="5324" fg:w="13"/><text x="51.4079%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.05%)</title><rect x="51.2828%" y="229" width="0.0480%" height="15" fill="rgb(213,28,5)" fg:x="5337" fg:w="5"/><text x="51.5328%" y="239.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (24 samples, 0.23%)</title><rect x="51.6671%" y="213" width="0.2306%" height="15" fill="rgb(215,77,49)" fg:x="5377" fg:w="24"/><text x="51.9171%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.61%)</title><rect x="51.8978%" y="213" width="0.6150%" height="15" fill="rgb(248,100,22)" fg:x="5401" fg:w="64"/><text x="52.1478%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.35%)</title><rect x="52.1668%" y="197" width="0.3459%" height="15" fill="rgb(208,67,9)" fg:x="5429" fg:w="36"/><text x="52.4168%" y="207.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.04%)</title><rect x="52.5127%" y="213" width="0.0384%" height="15" fill="rgb(219,133,21)" fg:x="5465" fg:w="4"/><text x="52.7627%" y="223.50"></text></g><g><title>_platform_memmove (24 samples, 0.23%)</title><rect x="52.5512%" y="213" width="0.2306%" height="15" fill="rgb(246,46,29)" fg:x="5469" fg:w="24"/><text x="52.8012%" y="223.50"></text></g><g><title>_platform_memset (4 samples, 0.04%)</title><rect x="52.7818%" y="213" width="0.0384%" height="15" fill="rgb(246,185,52)" fg:x="5493" fg:w="4"/><text x="53.0318%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="52.8202%" y="213" width="0.0192%" height="15" fill="rgb(252,136,11)" fg:x="5497" fg:w="2"/><text x="53.0702%" y="223.50"></text></g><g><title>bitbeat::Process::new (164 samples, 1.58%)</title><rect x="51.3308%" y="229" width="1.5759%" height="15" fill="rgb(219,138,53)" fg:x="5342" fg:w="164"/><text x="51.5808%" y="239.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (7 samples, 0.07%)</title><rect x="52.8394%" y="213" width="0.0673%" height="15" fill="rgb(211,51,23)" fg:x="5499" fg:w="7"/><text x="53.0894%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (5 samples, 0.05%)</title><rect x="52.8587%" y="197" width="0.0480%" height="15" fill="rgb(247,221,28)" fg:x="5501" fg:w="5"/><text x="53.1087%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (39 samples, 0.37%)</title><rect x="53.3103%" y="133" width="0.3747%" height="15" fill="rgb(251,222,45)" fg:x="5548" fg:w="39"/><text x="53.5603%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (37 samples, 0.36%)</title><rect x="53.3295%" y="117" width="0.3555%" height="15" fill="rgb(217,162,53)" fg:x="5550" fg:w="37"/><text x="53.5795%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (9 samples, 0.09%)</title><rect x="53.5985%" y="101" width="0.0865%" height="15" fill="rgb(229,93,14)" fg:x="5578" fg:w="9"/><text x="53.8485%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (21 samples, 0.20%)</title><rect x="53.6850%" y="133" width="0.2018%" height="15" fill="rgb(209,67,49)" fg:x="5587" fg:w="21"/><text x="53.9350%" y="143.50"></text></g><g><title>bitbeat::handle_spawn::_{{closure}} (3 samples, 0.03%)</title><rect x="54.2519%" y="69" width="0.0288%" height="15" fill="rgb(213,87,29)" fg:x="5646" fg:w="3"/><text x="54.5019%" y="79.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (10 samples, 0.10%)</title><rect x="54.1943%" y="85" width="0.0961%" height="15" fill="rgb(205,151,52)" fg:x="5640" fg:w="10"/><text x="54.4443%" y="95.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.02%)</title><rect x="54.2904%" y="85" width="0.0192%" height="15" fill="rgb(253,215,39)" fg:x="5650" fg:w="2"/><text x="54.5404%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;&amp;u8,i64,(),bitbeat::handle_spawn::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (13 samples, 0.12%)</title><rect x="54.3096%" y="85" width="0.1249%" height="15" fill="rgb(221,220,41)" fg:x="5652" fg:w="13"/><text x="54.5596%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (12 samples, 0.12%)</title><rect x="54.3192%" y="69" width="0.1153%" height="15" fill="rgb(218,133,21)" fg:x="5653" fg:w="12"/><text x="54.5692%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt; (7 samples, 0.07%)</title><rect x="54.3673%" y="53" width="0.0673%" height="15" fill="rgb(221,193,43)" fg:x="5658" fg:w="7"/><text x="54.6173%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (6 samples, 0.06%)</title><rect x="54.3769%" y="37" width="0.0577%" height="15" fill="rgb(240,128,52)" fg:x="5659" fg:w="6"/><text x="54.6269%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (144 samples, 1.38%)</title><rect x="53.1469%" y="165" width="1.3837%" height="15" fill="rgb(253,114,12)" fg:x="5531" fg:w="144"/><text x="53.3969%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (140 samples, 1.35%)</title><rect x="53.1854%" y="149" width="1.3452%" height="15" fill="rgb(215,223,47)" fg:x="5535" fg:w="140"/><text x="53.4354%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (67 samples, 0.64%)</title><rect x="53.8868%" y="133" width="0.6438%" height="15" fill="rgb(248,225,23)" fg:x="5608" fg:w="67"/><text x="54.1368%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (62 samples, 0.60%)</title><rect x="53.9349%" y="117" width="0.5958%" height="15" fill="rgb(250,108,0)" fg:x="5613" fg:w="62"/><text x="54.1849%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (58 samples, 0.56%)</title><rect x="53.9733%" y="101" width="0.5573%" height="15" fill="rgb(228,208,7)" fg:x="5617" fg:w="58"/><text x="54.2233%" y="111.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (10 samples, 0.10%)</title><rect x="54.4345%" y="85" width="0.0961%" height="15" fill="rgb(244,45,10)" fg:x="5665" fg:w="10"/><text x="54.6845%" y="95.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (5 samples, 0.05%)</title><rect x="54.4826%" y="69" width="0.0480%" height="15" fill="rgb(207,125,25)" fg:x="5670" fg:w="5"/><text x="54.7326%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.34%)</title><rect x="54.5306%" y="165" width="0.3363%" height="15" fill="rgb(210,195,18)" fg:x="5675" fg:w="35"/><text x="54.7806%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.34%)</title><rect x="54.5306%" y="149" width="0.3363%" height="15" fill="rgb(249,80,12)" fg:x="5675" fg:w="35"/><text x="54.7806%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (25 samples, 0.24%)</title><rect x="54.6267%" y="133" width="0.2402%" height="15" fill="rgb(221,65,9)" fg:x="5685" fg:w="25"/><text x="54.8767%" y="143.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (4 samples, 0.04%)</title><rect x="54.8285%" y="117" width="0.0384%" height="15" fill="rgb(235,49,36)" fg:x="5706" fg:w="4"/><text x="55.0785%" y="127.50"></text></g><g><title>_malloc_zone_malloc (6 samples, 0.06%)</title><rect x="54.9822%" y="133" width="0.0577%" height="15" fill="rgb(225,32,20)" fg:x="5722" fg:w="6"/><text x="55.2322%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (24 samples, 0.23%)</title><rect x="54.9054%" y="149" width="0.2306%" height="15" fill="rgb(215,141,46)" fg:x="5714" fg:w="24"/><text x="55.1554%" y="159.50"></text></g><g><title>nanov2_malloc_type (10 samples, 0.10%)</title><rect x="55.0399%" y="133" width="0.0961%" height="15" fill="rgb(250,160,47)" fg:x="5728" fg:w="10"/><text x="55.2899%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (234 samples, 2.25%)</title><rect x="52.9067%" y="229" width="2.2485%" height="15" fill="rgb(216,222,40)" fg:x="5506" fg:w="234"/><text x="53.1567%" y="239.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (232 samples, 2.23%)</title><rect x="52.9259%" y="213" width="2.2293%" height="15" fill="rgb(234,217,39)" fg:x="5508" fg:w="232"/><text x="53.1759%" y="223.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (228 samples, 2.19%)</title><rect x="52.9644%" y="197" width="2.1908%" height="15" fill="rgb(207,178,40)" fg:x="5512" fg:w="228"/><text x="53.2144%" y="207.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (226 samples, 2.17%)</title><rect x="52.9836%" y="181" width="2.1716%" height="15" fill="rgb(221,136,13)" fg:x="5514" fg:w="226"/><text x="53.2336%" y="191.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (30 samples, 0.29%)</title><rect x="54.8669%" y="165" width="0.2883%" height="15" fill="rgb(249,199,10)" fg:x="5710" fg:w="30"/><text x="55.1169%" y="175.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (2 samples, 0.02%)</title><rect x="55.1360%" y="149" width="0.0192%" height="15" fill="rgb(249,222,13)" fg:x="5738" fg:w="2"/><text x="55.3860%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (2 samples, 0.02%)</title><rect x="55.1552%" y="229" width="0.0192%" height="15" fill="rgb(244,185,38)" fg:x="5740" fg:w="2"/><text x="55.4052%" y="239.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (3 samples, 0.03%)</title><rect x="55.1744%" y="229" width="0.0288%" height="15" fill="rgb(236,202,9)" fg:x="5742" fg:w="3"/><text x="55.4244%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="55.2993%" y="197" width="0.0192%" height="15" fill="rgb(250,229,37)" fg:x="5755" fg:w="2"/><text x="55.5493%" y="207.50"></text></g><g><title>DYLD-STUB$$free (4 samples, 0.04%)</title><rect x="55.3954%" y="181" width="0.0384%" height="15" fill="rgb(206,174,23)" fg:x="5765" fg:w="4"/><text x="55.6454%" y="191.50"></text></g><g><title>_free (10 samples, 0.10%)</title><rect x="55.4338%" y="181" width="0.0961%" height="15" fill="rgb(211,33,43)" fg:x="5769" fg:w="10"/><text x="55.6838%" y="191.50"></text></g><g><title>_nanov2_free (25 samples, 0.24%)</title><rect x="55.5299%" y="181" width="0.2402%" height="15" fill="rgb(245,58,50)" fg:x="5779" fg:w="25"/><text x="55.7799%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (68 samples, 0.65%)</title><rect x="55.2032%" y="229" width="0.6534%" height="15" fill="rgb(244,68,36)" fg:x="5745" fg:w="68"/><text x="55.4532%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (63 samples, 0.61%)</title><rect x="55.2513%" y="213" width="0.6054%" height="15" fill="rgb(232,229,15)" fg:x="5750" fg:w="63"/><text x="55.5013%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (55 samples, 0.53%)</title><rect x="55.3281%" y="197" width="0.5285%" height="15" fill="rgb(254,30,23)" fg:x="5758" fg:w="55"/><text x="55.5781%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (9 samples, 0.09%)</title><rect x="55.7702%" y="181" width="0.0865%" height="15" fill="rgb(235,160,14)" fg:x="5804" fg:w="9"/><text x="56.0202%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="55.9143%" y="213" width="0.0192%" height="15" fill="rgb(212,155,44)" fg:x="5819" fg:w="2"/><text x="56.1643%" y="223.50"></text></g><g><title>_free (4 samples, 0.04%)</title><rect x="56.0488%" y="181" width="0.0384%" height="15" fill="rgb(226,2,50)" fg:x="5833" fg:w="4"/><text x="56.2988%" y="191.50"></text></g><g><title>_nanov2_free (19 samples, 0.18%)</title><rect x="56.0872%" y="181" width="0.1826%" height="15" fill="rgb(234,177,6)" fg:x="5837" fg:w="19"/><text x="56.3372%" y="191.50"></text></g><g><title>_platform_memset (5 samples, 0.05%)</title><rect x="56.2218%" y="165" width="0.0480%" height="15" fill="rgb(217,24,9)" fg:x="5851" fg:w="5"/><text x="56.4718%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.33%)</title><rect x="55.9719%" y="197" width="0.3267%" height="15" fill="rgb(220,13,46)" fg:x="5825" fg:w="34"/><text x="56.2219%" y="207.50"></text></g><g><title>free (2 samples, 0.02%)</title><rect x="56.2794%" y="181" width="0.0192%" height="15" fill="rgb(239,221,27)" fg:x="5857" fg:w="2"/><text x="56.5294%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (48 samples, 0.46%)</title><rect x="55.8566%" y="229" width="0.4612%" height="15" fill="rgb(222,198,25)" fg:x="5813" fg:w="48"/><text x="56.1066%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (40 samples, 0.38%)</title><rect x="55.9335%" y="213" width="0.3844%" height="15" fill="rgb(211,99,13)" fg:x="5821" fg:w="40"/><text x="56.1835%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="56.3755%" y="197" width="0.0192%" height="15" fill="rgb(232,111,31)" fg:x="5867" fg:w="2"/><text x="56.6255%" y="207.50"></text></g><g><title>DYLD-STUB$$free (5 samples, 0.05%)</title><rect x="56.3947%" y="197" width="0.0480%" height="15" fill="rgb(245,82,37)" fg:x="5869" fg:w="5"/><text x="56.6447%" y="207.50"></text></g><g><title>_free (9 samples, 0.09%)</title><rect x="56.4428%" y="197" width="0.0865%" height="15" fill="rgb(227,149,46)" fg:x="5874" fg:w="9"/><text x="56.6928%" y="207.50"></text></g><g><title>_nanov2_free (10 samples, 0.10%)</title><rect x="56.5293%" y="197" width="0.0961%" height="15" fill="rgb(218,36,50)" fg:x="5883" fg:w="10"/><text x="56.7793%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (35 samples, 0.34%)</title><rect x="56.3179%" y="229" width="0.3363%" height="15" fill="rgb(226,80,48)" fg:x="5861" fg:w="35"/><text x="56.5679%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (32 samples, 0.31%)</title><rect x="56.3467%" y="213" width="0.3075%" height="15" fill="rgb(238,224,15)" fg:x="5864" fg:w="32"/><text x="56.5967%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3 samples, 0.03%)</title><rect x="56.6253%" y="197" width="0.0288%" height="15" fill="rgb(241,136,10)" fg:x="5893" fg:w="3"/><text x="56.8753%" y="207.50"></text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (8 samples, 0.08%)</title><rect x="56.6542%" y="229" width="0.0769%" height="15" fill="rgb(208,32,45)" fg:x="5896" fg:w="8"/><text x="56.9042%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (6 samples, 0.06%)</title><rect x="56.6734%" y="213" width="0.0577%" height="15" fill="rgb(207,135,9)" fg:x="5898" fg:w="6"/><text x="56.9234%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.04%)</title><rect x="57.0097%" y="197" width="0.0384%" height="15" fill="rgb(206,86,44)" fg:x="5933" fg:w="4"/><text x="57.2597%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (75 samples, 0.72%)</title><rect x="57.2788%" y="149" width="0.7207%" height="15" fill="rgb(245,177,15)" fg:x="5961" fg:w="75"/><text x="57.5288%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (282 samples, 2.71%)</title><rect x="57.1442%" y="181" width="2.7097%" height="15" fill="rgb(206,64,50)" fg:x="5947" fg:w="282"/><text x="57.3942%" y="191.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (277 samples, 2.66%)</title><rect x="57.1923%" y="165" width="2.6617%" height="15" fill="rgb(234,36,40)" fg:x="5952" fg:w="277"/><text x="57.4423%" y="175.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (193 samples, 1.85%)</title><rect x="57.9994%" y="149" width="1.8545%" height="15" fill="rgb(213,64,8)" fg:x="6036" fg:w="193"/><text x="58.2494%" y="159.50">&lt;..</text></g><g><title>DYLD-STUB$$memcpy (7 samples, 0.07%)</title><rect x="60.1134%" y="165" width="0.0673%" height="15" fill="rgb(210,75,36)" fg:x="6256" fg:w="7"/><text x="60.3634%" y="175.50"></text></g><g><title>_platform_memmove (22 samples, 0.21%)</title><rect x="60.1806%" y="165" width="0.2114%" height="15" fill="rgb(229,88,21)" fg:x="6263" fg:w="22"/><text x="60.4306%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (89 samples, 0.86%)</title><rect x="59.8539%" y="181" width="0.8552%" height="15" fill="rgb(252,204,47)" fg:x="6229" fg:w="89"/><text x="60.1039%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (33 samples, 0.32%)</title><rect x="60.3920%" y="165" width="0.3171%" height="15" fill="rgb(208,77,27)" fg:x="6285" fg:w="33"/><text x="60.6420%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.04%)</title><rect x="60.9686%" y="133" width="0.0384%" height="15" fill="rgb(221,76,26)" fg:x="6345" fg:w="4"/><text x="61.2186%" y="143.50"></text></g><g><title>core::cmp::Ord::min (32 samples, 0.31%)</title><rect x="61.6892%" y="101" width="0.3075%" height="15" fill="rgb(225,139,18)" fg:x="6420" fg:w="32"/><text x="61.9392%" y="111.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (12 samples, 0.12%)</title><rect x="62.6501%" y="85" width="0.1153%" height="15" fill="rgb(230,137,11)" fg:x="6520" fg:w="12"/><text x="62.9001%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (142 samples, 1.36%)</title><rect x="61.9967%" y="101" width="1.3645%" height="15" fill="rgb(212,28,1)" fg:x="6452" fg:w="142"/><text x="62.2467%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (62 samples, 0.60%)</title><rect x="62.7654%" y="85" width="0.5958%" height="15" fill="rgb(248,164,17)" fg:x="6532" fg:w="62"/><text x="63.0154%" y="95.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (14 samples, 0.13%)</title><rect x="63.2267%" y="69" width="0.1345%" height="15" fill="rgb(222,171,42)" fg:x="6580" fg:w="14"/><text x="63.4767%" y="79.50"></text></g><g><title>core::hash::BuildHasher::hash_one (658 samples, 6.32%)</title><rect x="57.0481%" y="197" width="6.3227%" height="15" fill="rgb(243,84,45)" fg:x="5937" fg:w="658"/><text x="57.2981%" y="207.50">core::ha..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (277 samples, 2.66%)</title><rect x="60.7091%" y="181" width="2.6617%" height="15" fill="rgb(252,49,23)" fg:x="6318" fg:w="277"/><text x="60.9591%" y="191.50">co..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for str&gt;::hash (275 samples, 2.64%)</title><rect x="60.7284%" y="165" width="2.6425%" height="15" fill="rgb(215,19,7)" fg:x="6320" fg:w="275"/><text x="60.9784%" y="175.50">co..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (258 samples, 2.48%)</title><rect x="60.8917%" y="149" width="2.4791%" height="15" fill="rgb(238,81,41)" fg:x="6337" fg:w="258"/><text x="61.1417%" y="159.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (246 samples, 2.36%)</title><rect x="61.0070%" y="133" width="2.3638%" height="15" fill="rgb(210,199,37)" fg:x="6349" fg:w="246"/><text x="61.2570%" y="143.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (239 samples, 2.30%)</title><rect x="61.0743%" y="117" width="2.2965%" height="15" fill="rgb(244,192,49)" fg:x="6356" fg:w="239"/><text x="61.3243%" y="127.50">&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.02%)</title><rect x="63.8897%" y="165" width="0.0192%" height="15" fill="rgb(226,211,11)" fg:x="6649" fg:w="2"/><text x="64.1397%" y="175.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (125 samples, 1.20%)</title><rect x="63.8513%" y="181" width="1.2011%" height="15" fill="rgb(236,162,54)" fg:x="6645" fg:w="125"/><text x="64.1013%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (119 samples, 1.14%)</title><rect x="63.9089%" y="165" width="1.1435%" height="15" fill="rgb(220,229,9)" fg:x="6651" fg:w="119"/><text x="64.1589%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (105 samples, 1.01%)</title><rect x="64.0434%" y="149" width="1.0089%" height="15" fill="rgb(250,87,22)" fg:x="6665" fg:w="105"/><text x="64.2934%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (34 samples, 0.33%)</title><rect x="64.7257%" y="133" width="0.3267%" height="15" fill="rgb(239,43,17)" fg:x="6736" fg:w="34"/><text x="64.9757%" y="143.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.02%)</title><rect x="65.1773%" y="165" width="0.0192%" height="15" fill="rgb(231,177,25)" fg:x="6783" fg:w="2"/><text x="65.4273%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (3 samples, 0.03%)</title><rect x="65.1965%" y="165" width="0.0288%" height="15" fill="rgb(219,179,1)" fg:x="6785" fg:w="3"/><text x="65.4465%" y="175.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (26 samples, 0.25%)</title><rect x="65.0524%" y="181" width="0.2498%" height="15" fill="rgb(238,219,53)" fg:x="6770" fg:w="26"/><text x="65.3024%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (8 samples, 0.08%)</title><rect x="65.2253%" y="165" width="0.0769%" height="15" fill="rgb(232,167,36)" fg:x="6788" fg:w="8"/><text x="65.4753%" y="175.50"></text></g><g><title>alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (98 samples, 0.94%)</title><rect x="66.1574%" y="133" width="0.9417%" height="15" fill="rgb(244,19,51)" fg:x="6885" fg:w="98"/><text x="66.4074%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (90 samples, 0.86%)</title><rect x="66.2343%" y="117" width="0.8648%" height="15" fill="rgb(224,6,22)" fg:x="6893" fg:w="90"/><text x="66.4843%" y="127.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (65 samples, 0.62%)</title><rect x="66.4745%" y="101" width="0.6246%" height="15" fill="rgb(224,145,5)" fg:x="6918" fg:w="65"/><text x="66.7245%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,111 samples, 10.68%)</title><rect x="56.8175%" y="213" width="10.6755%" height="15" fill="rgb(234,130,49)" fg:x="5913" fg:w="1111"/><text x="57.0675%" y="223.50">hashbrown::map::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (429 samples, 4.12%)</title><rect x="63.3708%" y="197" width="4.1222%" height="15" fill="rgb(254,6,2)" fg:x="6595" fg:w="429"/><text x="63.6208%" y="207.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (228 samples, 2.19%)</title><rect x="65.3022%" y="181" width="2.1908%" height="15" fill="rgb(208,96,46)" fg:x="6796" fg:w="228"/><text x="65.5522%" y="191.50">h..</text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (202 samples, 1.94%)</title><rect x="65.5520%" y="165" width="1.9410%" height="15" fill="rgb(239,3,39)" fg:x="6822" fg:w="202"/><text x="65.8020%" y="175.50">h..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (198 samples, 1.90%)</title><rect x="65.5905%" y="149" width="1.9026%" height="15" fill="rgb(233,210,1)" fg:x="6826" fg:w="198"/><text x="65.8405%" y="159.50">&lt;..</text></g><g><title>core::str::traits::_&lt;impl core::cmp::PartialEq for str&gt;::eq (41 samples, 0.39%)</title><rect x="67.0991%" y="133" width="0.3940%" height="15" fill="rgb(244,137,37)" fg:x="6983" fg:w="41"/><text x="67.3491%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (14 samples, 0.13%)</title><rect x="67.3585%" y="117" width="0.1345%" height="15" fill="rgb(240,136,2)" fg:x="7010" fg:w="14"/><text x="67.6085%" y="127.50"></text></g><g><title>_platform_memcmp (9 samples, 0.09%)</title><rect x="67.4066%" y="101" width="0.0865%" height="15" fill="rgb(239,18,37)" fg:x="7015" fg:w="9"/><text x="67.6566%" y="111.50"></text></g><g><title>bitbeat::handle_spawn (3,249 samples, 31.22%)</title><rect x="36.2833%" y="245" width="31.2194%" height="15" fill="rgb(218,185,22)" fg:x="3776" fg:w="3249"/><text x="36.5333%" y="255.50">bitbeat::handle_spawn</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,120 samples, 10.76%)</title><rect x="56.7407%" y="229" width="10.7620%" height="15" fill="rgb(225,218,4)" fg:x="5905" fg:w="1120"/><text x="56.9907%" y="239.50">std::collections..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.04%)</title><rect x="68.2714%" y="229" width="0.0384%" height="15" fill="rgb(230,182,32)" fg:x="7105" fg:w="4"/><text x="68.5214%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.08%)</title><rect x="68.4828%" y="213" width="0.0769%" height="15" fill="rgb(242,56,43)" fg:x="7127" fg:w="8"/><text x="68.7328%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (54 samples, 0.52%)</title><rect x="68.3098%" y="229" width="0.5189%" height="15" fill="rgb(233,99,24)" fg:x="7109" fg:w="54"/><text x="68.5598%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (28 samples, 0.27%)</title><rect x="68.5596%" y="213" width="0.2690%" height="15" fill="rgb(234,209,42)" fg:x="7135" fg:w="28"/><text x="68.8096%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.04%)</title><rect x="68.8287%" y="229" width="0.0384%" height="15" fill="rgb(227,7,12)" fg:x="7163" fg:w="4"/><text x="69.0787%" y="239.50"></text></g><g><title>bitbeat::Process::step (5,323 samples, 51.15%)</title><rect x="17.8149%" y="261" width="51.1483%" height="15" fill="rgb(245,203,43)" fg:x="1854" fg:w="5323"/><text x="18.0649%" y="271.50">bitbeat::Process::step</text></g><g><title>bitbeat::handle_sub (152 samples, 1.46%)</title><rect x="67.5026%" y="245" width="1.4606%" height="15" fill="rgb(238,205,33)" fg:x="7025" fg:w="152"/><text x="67.7526%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u8,anyhow::Error&gt;&gt; (10 samples, 0.10%)</title><rect x="68.8671%" y="229" width="0.0961%" height="15" fill="rgb(231,56,7)" fg:x="7167" fg:w="10"/><text x="69.1171%" y="239.50"></text></g><g><title>bitbeat::handle_cmp_le (2 samples, 0.02%)</title><rect x="68.9632%" y="261" width="0.0192%" height="15" fill="rgb(244,186,29)" fg:x="7177" fg:w="2"/><text x="69.2132%" y="271.50"></text></g><g><title>bitbeat::handle_jump_if (2 samples, 0.02%)</title><rect x="68.9824%" y="261" width="0.0192%" height="15" fill="rgb(234,111,31)" fg:x="7179" fg:w="2"/><text x="69.2324%" y="271.50"></text></g><g><title>bitbeat::handle_load_imm (4 samples, 0.04%)</title><rect x="69.0016%" y="261" width="0.0384%" height="15" fill="rgb(241,149,10)" fg:x="7181" fg:w="4"/><text x="69.2516%" y="271.50"></text></g><g><title>bitbeat::handle_recv (2 samples, 0.02%)</title><rect x="69.0401%" y="261" width="0.0192%" height="15" fill="rgb(249,206,44)" fg:x="7185" fg:w="2"/><text x="69.2901%" y="271.50"></text></g><g><title>bitbeat::handle_send (3 samples, 0.03%)</title><rect x="69.0593%" y="261" width="0.0288%" height="15" fill="rgb(251,153,30)" fg:x="7187" fg:w="3"/><text x="69.3093%" y="271.50"></text></g><g><title>bitbeat::handle_sub (2 samples, 0.02%)</title><rect x="69.0977%" y="261" width="0.0192%" height="15" fill="rgb(239,152,38)" fg:x="7191" fg:w="2"/><text x="69.3477%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (56 samples, 0.54%)</title><rect x="69.1169%" y="261" width="0.5381%" height="15" fill="rgb(249,139,47)" fg:x="7193" fg:w="56"/><text x="69.3669%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (51 samples, 0.49%)</title><rect x="69.1650%" y="245" width="0.4901%" height="15" fill="rgb(244,64,35)" fg:x="7198" fg:w="51"/><text x="69.4150%" y="255.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (13 samples, 0.12%)</title><rect x="69.5301%" y="229" width="0.1249%" height="15" fill="rgb(216,46,15)" fg:x="7236" fg:w="13"/><text x="69.7801%" y="239.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.03%)</title><rect x="69.7031%" y="245" width="0.0288%" height="15" fill="rgb(250,74,19)" fg:x="7254" fg:w="3"/><text x="69.9531%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::new (36 samples, 0.35%)</title><rect x="69.6550%" y="261" width="0.3459%" height="15" fill="rgb(249,42,33)" fg:x="7249" fg:w="36"/><text x="69.9050%" y="271.50"></text></g><g><title>_platform_memmove (28 samples, 0.27%)</title><rect x="69.7319%" y="245" width="0.2690%" height="15" fill="rgb(242,149,17)" fg:x="7257" fg:w="28"/><text x="69.9819%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (9 samples, 0.09%)</title><rect x="70.0010%" y="261" width="0.0865%" height="15" fill="rgb(244,29,21)" fg:x="7285" fg:w="9"/><text x="70.2510%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (6 samples, 0.06%)</title><rect x="70.0298%" y="245" width="0.0577%" height="15" fill="rgb(220,130,37)" fg:x="7288" fg:w="6"/><text x="70.2798%" y="255.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="70.0490%" y="229" width="0.0384%" height="15" fill="rgb(211,67,2)" fg:x="7290" fg:w="4"/><text x="70.2990%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="70.0874%" y="261" width="0.0288%" height="15" fill="rgb(235,68,52)" fg:x="7294" fg:w="3"/><text x="70.3374%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (35 samples, 0.34%)</title><rect x="70.4430%" y="181" width="0.3363%" height="15" fill="rgb(246,142,3)" fg:x="7331" fg:w="35"/><text x="70.6930%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (138 samples, 1.33%)</title><rect x="70.3181%" y="213" width="1.3260%" height="15" fill="rgb(241,25,7)" fg:x="7318" fg:w="138"/><text x="70.5681%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (138 samples, 1.33%)</title><rect x="70.3181%" y="197" width="1.3260%" height="15" fill="rgb(242,119,39)" fg:x="7318" fg:w="138"/><text x="70.5681%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (90 samples, 0.86%)</title><rect x="70.7793%" y="181" width="0.8648%" height="15" fill="rgb(241,98,45)" fg:x="7366" fg:w="90"/><text x="71.0293%" y="191.50"></text></g><g><title>DYLD-STUB$$memcpy (4 samples, 0.04%)</title><rect x="71.9708%" y="197" width="0.0384%" height="15" fill="rgb(254,28,30)" fg:x="7490" fg:w="4"/><text x="72.2208%" y="207.50"></text></g><g><title>_platform_memmove (6 samples, 0.06%)</title><rect x="72.0092%" y="197" width="0.0577%" height="15" fill="rgb(241,142,54)" fg:x="7494" fg:w="6"/><text x="72.2592%" y="207.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (50 samples, 0.48%)</title><rect x="71.6441%" y="213" width="0.4804%" height="15" fill="rgb(222,85,15)" fg:x="7456" fg:w="50"/><text x="71.8941%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (6 samples, 0.06%)</title><rect x="72.0669%" y="197" width="0.0577%" height="15" fill="rgb(210,85,47)" fg:x="7500" fg:w="6"/><text x="72.3169%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (21 samples, 0.20%)</title><rect x="72.5377%" y="133" width="0.2018%" height="15" fill="rgb(224,206,25)" fg:x="7549" fg:w="21"/><text x="72.7877%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (9 samples, 0.09%)</title><rect x="72.7395%" y="133" width="0.0865%" height="15" fill="rgb(243,201,19)" fg:x="7570" fg:w="9"/><text x="72.9895%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (106 samples, 1.02%)</title><rect x="72.1918%" y="149" width="1.0185%" height="15" fill="rgb(236,59,4)" fg:x="7513" fg:w="106"/><text x="72.4418%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (40 samples, 0.38%)</title><rect x="72.8260%" y="133" width="0.3844%" height="15" fill="rgb(254,179,45)" fg:x="7579" fg:w="40"/><text x="73.0760%" y="143.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (10 samples, 0.10%)</title><rect x="73.1143%" y="117" width="0.0961%" height="15" fill="rgb(226,14,10)" fg:x="7609" fg:w="10"/><text x="73.3643%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (304 samples, 2.92%)</title><rect x="70.2988%" y="229" width="2.9211%" height="15" fill="rgb(244,27,41)" fg:x="7316" fg:w="304"/><text x="70.5488%" y="239.50">co..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (114 samples, 1.10%)</title><rect x="72.1245%" y="213" width="1.0954%" height="15" fill="rgb(235,35,32)" fg:x="7506" fg:w="114"/><text x="72.3745%" y="223.50"></text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (111 samples, 1.07%)</title><rect x="72.1534%" y="197" width="1.0666%" height="15" fill="rgb(218,68,31)" fg:x="7509" fg:w="111"/><text x="72.4034%" y="207.50"></text></g><g><title>core::hash::Hasher::write_usize (110 samples, 1.06%)</title><rect x="72.1630%" y="181" width="1.0570%" height="15" fill="rgb(207,120,37)" fg:x="7510" fg:w="110"/><text x="72.4130%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (110 samples, 1.06%)</title><rect x="72.1630%" y="165" width="1.0570%" height="15" fill="rgb(227,98,0)" fg:x="7510" fg:w="110"/><text x="72.4130%" y="175.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (9 samples, 0.09%)</title><rect x="74.2865%" y="181" width="0.0865%" height="15" fill="rgb(207,7,3)" fg:x="7731" fg:w="9"/><text x="74.5365%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (9 samples, 0.09%)</title><rect x="74.2865%" y="165" width="0.0865%" height="15" fill="rgb(206,98,19)" fg:x="7731" fg:w="9"/><text x="74.5365%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (9 samples, 0.09%)</title><rect x="74.2865%" y="149" width="0.0865%" height="15" fill="rgb(217,5,26)" fg:x="7731" fg:w="9"/><text x="74.5365%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (2 samples, 0.02%)</title><rect x="74.3538%" y="133" width="0.0192%" height="15" fill="rgb(235,190,38)" fg:x="7738" fg:w="2"/><text x="74.6038%" y="143.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcgez_s8 (6 samples, 0.06%)</title><rect x="74.3922%" y="165" width="0.0577%" height="15" fill="rgb(247,86,24)" fg:x="7742" fg:w="6"/><text x="74.6422%" y="175.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_full (10 samples, 0.10%)</title><rect x="74.3730%" y="181" width="0.0961%" height="15" fill="rgb(205,101,16)" fg:x="7740" fg:w="10"/><text x="74.6230%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (46 samples, 0.44%)</title><rect x="74.9111%" y="101" width="0.4420%" height="15" fill="rgb(246,168,33)" fg:x="7796" fg:w="46"/><text x="75.1611%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (183 samples, 1.76%)</title><rect x="74.8246%" y="133" width="1.7584%" height="15" fill="rgb(231,114,1)" fg:x="7787" fg:w="183"/><text x="75.0746%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (182 samples, 1.75%)</title><rect x="74.8342%" y="117" width="1.7488%" height="15" fill="rgb(207,184,53)" fg:x="7788" fg:w="182"/><text x="75.0842%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (128 samples, 1.23%)</title><rect x="75.3531%" y="101" width="1.2299%" height="15" fill="rgb(224,95,51)" fg:x="7842" fg:w="128"/><text x="75.6031%" y="111.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="76.6984%" y="117" width="0.0192%" height="15" fill="rgb(212,188,45)" fg:x="7982" fg:w="2"/><text x="76.9484%" y="127.50"></text></g><g><title>_platform_memmove (12 samples, 0.12%)</title><rect x="76.7176%" y="117" width="0.1153%" height="15" fill="rgb(223,154,38)" fg:x="7984" fg:w="12"/><text x="76.9676%" y="127.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (35 samples, 0.34%)</title><rect x="76.5831%" y="133" width="0.3363%" height="15" fill="rgb(251,22,52)" fg:x="7970" fg:w="35"/><text x="76.8331%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (9 samples, 0.09%)</title><rect x="76.8329%" y="117" width="0.0865%" height="15" fill="rgb(229,209,22)" fg:x="7996" fg:w="9"/><text x="77.0829%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (19 samples, 0.18%)</title><rect x="77.4479%" y="53" width="0.1826%" height="15" fill="rgb(234,138,34)" fg:x="8060" fg:w="19"/><text x="77.6979%" y="63.50"></text></g><g><title>core::hash::sip::u8to64_le (10 samples, 0.10%)</title><rect x="77.6304%" y="53" width="0.0961%" height="15" fill="rgb(212,95,11)" fg:x="8079" fg:w="10"/><text x="77.8804%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (193 samples, 1.85%)</title><rect x="77.0251%" y="69" width="1.8545%" height="15" fill="rgb(240,179,47)" fg:x="8016" fg:w="193"/><text x="77.2751%" y="79.50">&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (120 samples, 1.15%)</title><rect x="77.7265%" y="53" width="1.1531%" height="15" fill="rgb(240,163,11)" fg:x="8089" fg:w="120"/><text x="77.9765%" y="63.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (18 samples, 0.17%)</title><rect x="78.7066%" y="37" width="0.1730%" height="15" fill="rgb(236,37,12)" fg:x="8191" fg:w="18"/><text x="78.9566%" y="47.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (462 samples, 4.44%)</title><rect x="74.4691%" y="181" width="4.4393%" height="15" fill="rgb(232,164,16)" fg:x="7750" fg:w="462"/><text x="74.7191%" y="191.50">hashb..</text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (438 samples, 4.21%)</title><rect x="74.6997%" y="165" width="4.2087%" height="15" fill="rgb(244,205,15)" fg:x="7774" fg:w="438"/><text x="74.9497%" y="175.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (432 samples, 4.15%)</title><rect x="74.7574%" y="149" width="4.1511%" height="15" fill="rgb(223,117,47)" fg:x="7780" fg:w="432"/><text x="75.0074%" y="159.50">core:..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (207 samples, 1.99%)</title><rect x="76.9194%" y="133" width="1.9890%" height="15" fill="rgb(244,107,35)" fg:x="8005" fg:w="207"/><text x="77.1694%" y="143.50">c..</text></g><g><title>core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (206 samples, 1.98%)</title><rect x="76.9290%" y="117" width="1.9794%" height="15" fill="rgb(205,140,8)" fg:x="8006" fg:w="206"/><text x="77.1790%" y="127.50">c..</text></g><g><title>core::hash::Hasher::write_usize (201 samples, 1.93%)</title><rect x="76.9770%" y="101" width="1.9314%" height="15" fill="rgb(228,84,46)" fg:x="8011" fg:w="201"/><text x="77.2270%" y="111.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (197 samples, 1.89%)</title><rect x="77.0155%" y="85" width="1.8930%" height="15" fill="rgb(254,188,9)" fg:x="8015" fg:w="197"/><text x="77.2655%" y="95.50">&lt;..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.03%)</title><rect x="78.8796%" y="69" width="0.0288%" height="15" fill="rgb(206,112,54)" fg:x="8209" fg:w="3"/><text x="79.1296%" y="79.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (78 samples, 0.75%)</title><rect x="79.0718%" y="149" width="0.7495%" height="15" fill="rgb(216,84,49)" fg:x="8229" fg:w="78"/><text x="79.3218%" y="159.50"></text></g><g><title>core::ptr::read_unaligned (75 samples, 0.72%)</title><rect x="79.1006%" y="133" width="0.7207%" height="15" fill="rgb(214,194,35)" fg:x="8232" fg:w="75"/><text x="79.3506%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (64 samples, 0.61%)</title><rect x="79.2063%" y="117" width="0.6150%" height="15" fill="rgb(249,28,3)" fg:x="8243" fg:w="64"/><text x="79.4563%" y="127.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (30 samples, 0.29%)</title><rect x="79.5330%" y="101" width="0.2883%" height="15" fill="rgb(222,56,52)" fg:x="8277" fg:w="30"/><text x="79.7830%" y="111.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcltz_s8 (17 samples, 0.16%)</title><rect x="80.2152%" y="117" width="0.1634%" height="15" fill="rgb(245,217,50)" fg:x="8348" fg:w="17"/><text x="80.4652%" y="127.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (6 samples, 0.06%)</title><rect x="80.3882%" y="117" width="0.0577%" height="15" fill="rgb(213,201,24)" fg:x="8366" fg:w="6"/><text x="80.6382%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (76 samples, 0.73%)</title><rect x="79.8213%" y="149" width="0.7303%" height="15" fill="rgb(248,116,28)" fg:x="8307" fg:w="76"/><text x="80.0713%" y="159.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_empty_or_deleted (54 samples, 0.52%)</title><rect x="80.0327%" y="133" width="0.5189%" height="15" fill="rgb(219,72,43)" fg:x="8329" fg:w="54"/><text x="80.2827%" y="143.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (11 samples, 0.11%)</title><rect x="80.4459%" y="117" width="0.1057%" height="15" fill="rgb(209,138,14)" fg:x="8372" fg:w="11"/><text x="80.6959%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (769 samples, 7.39%)</title><rect x="73.2680%" y="213" width="7.3893%" height="15" fill="rgb(222,18,33)" fg:x="7625" fg:w="769"/><text x="73.5180%" y="223.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (765 samples, 7.35%)</title><rect x="73.3064%" y="197" width="7.3508%" height="15" fill="rgb(213,199,7)" fg:x="7629" fg:w="765"/><text x="73.5564%" y="207.50">hashbrown:..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (182 samples, 1.75%)</title><rect x="78.9084%" y="181" width="1.7488%" height="15" fill="rgb(250,110,10)" fg:x="8212" fg:w="182"/><text x="79.1584%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (172 samples, 1.65%)</title><rect x="79.0045%" y="165" width="1.6527%" height="15" fill="rgb(248,123,6)" fg:x="8222" fg:w="172"/><text x="79.2545%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (11 samples, 0.11%)</title><rect x="80.5516%" y="149" width="0.1057%" height="15" fill="rgb(206,91,31)" fg:x="8383" fg:w="11"/><text x="80.8016%" y="159.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (64 samples, 0.61%)</title><rect x="80.9743%" y="197" width="0.6150%" height="15" fill="rgb(211,154,13)" fg:x="8427" fg:w="64"/><text x="81.2243%" y="207.50"></text></g><g><title>core::ptr::read_unaligned (59 samples, 0.57%)</title><rect x="81.0224%" y="181" width="0.5669%" height="15" fill="rgb(225,148,7)" fg:x="8432" fg:w="59"/><text x="81.2724%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (50 samples, 0.48%)</title><rect x="81.1089%" y="165" width="0.4804%" height="15" fill="rgb(220,160,43)" fg:x="8441" fg:w="50"/><text x="81.3589%" y="175.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (17 samples, 0.16%)</title><rect x="81.4260%" y="149" width="0.1634%" height="15" fill="rgb(213,52,39)" fg:x="8474" fg:w="17"/><text x="81.6760%" y="159.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.02%)</title><rect x="81.8584%" y="181" width="0.0192%" height="15" fill="rgb(243,137,7)" fg:x="8519" fg:w="2"/><text x="82.1084%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::vdup_n_u8 (5 samples, 0.05%)</title><rect x="81.8776%" y="181" width="0.0480%" height="15" fill="rgb(230,79,13)" fg:x="8521" fg:w="5"/><text x="82.1276%" y="191.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_tag (38 samples, 0.37%)</title><rect x="81.5893%" y="197" width="0.3651%" height="15" fill="rgb(247,105,23)" fg:x="8491" fg:w="38"/><text x="81.8393%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (3 samples, 0.03%)</title><rect x="81.9256%" y="181" width="0.0288%" height="15" fill="rgb(223,179,41)" fg:x="8526" fg:w="3"/><text x="82.1756%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2 samples, 0.02%)</title><rect x="81.9545%" y="197" width="0.0192%" height="15" fill="rgb(218,9,34)" fg:x="8529" fg:w="2"/><text x="82.2045%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::generated::vcltz_s8 (24 samples, 0.23%)</title><rect x="84.4816%" y="165" width="0.2306%" height="15" fill="rgb(222,106,8)" fg:x="8792" fg:w="24"/><text x="84.7316%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (31 samples, 0.30%)</title><rect x="84.7122%" y="165" width="0.2979%" height="15" fill="rgb(211,220,0)" fg:x="8816" fg:w="31"/><text x="84.9622%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (321 samples, 3.08%)</title><rect x="81.9737%" y="197" width="3.0845%" height="15" fill="rgb(229,52,16)" fg:x="8531" fg:w="321"/><text x="82.2237%" y="207.50">has..</text></g><g><title>hashbrown::control::group::neon::Group::match_empty_or_deleted (277 samples, 2.66%)</title><rect x="82.3965%" y="181" width="2.6617%" height="15" fill="rgb(212,155,18)" fg:x="8575" fg:w="277"/><text x="82.6465%" y="191.50">ha..</text></g><g><title>core::core_arch::arm_shared::neon::vget_lane_u64 (5 samples, 0.05%)</title><rect x="85.0101%" y="165" width="0.0480%" height="15" fill="rgb(242,21,14)" fg:x="8847" fg:w="5"/><text x="85.2601%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1,237 samples, 11.89%)</title><rect x="73.2199%" y="229" width="11.8862%" height="15" fill="rgb(222,19,48)" fg:x="7620" fg:w="1237"/><text x="73.4699%" y="239.50">hashbrown::raw::Ra..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (463 samples, 4.45%)</title><rect x="80.6572%" y="213" width="4.4489%" height="15" fill="rgb(232,45,27)" fg:x="8394" fg:w="463"/><text x="80.9072%" y="223.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (5 samples, 0.05%)</title><rect x="85.0581%" y="197" width="0.0480%" height="15" fill="rgb(249,103,42)" fg:x="8852" fg:w="5"/><text x="85.3081%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (63 samples, 0.61%)</title><rect x="85.1062%" y="229" width="0.6054%" height="15" fill="rgb(246,81,33)" fg:x="8857" fg:w="63"/><text x="85.3562%" y="239.50"></text></g><g><title>bitbeat::Machine::run::_{{closure}} (7,520 samples, 72.26%)</title><rect x="13.4621%" y="277" width="72.2591%" height="15" fill="rgb(252,33,42)" fg:x="1401" fg:w="7520"/><text x="13.7121%" y="287.50">bitbeat::Machine::run::_{{closure}}</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1,624 samples, 15.60%)</title><rect x="70.1163%" y="261" width="15.6049%" height="15" fill="rgb(209,212,41)" fg:x="7297" fg:w="1624"/><text x="70.3663%" y="271.50">std::collections::hash::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,621 samples, 15.58%)</title><rect x="70.1451%" y="245" width="15.5761%" height="15" fill="rgb(207,154,6)" fg:x="7300" fg:w="1621"/><text x="70.3951%" y="255.50">hashbrown::map::HashMap&lt;..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,552 samples, 72.57%)</title><rect x="13.1738%" y="309" width="72.5665%" height="15" fill="rgb(223,64,47)" fg:x="1371" fg:w="7552"/><text x="13.4238%" y="319.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (7,535 samples, 72.40%)</title><rect x="13.3372%" y="293" width="72.4032%" height="15" fill="rgb(211,161,38)" fg:x="1388" fg:w="7535"/><text x="13.5872%" y="303.50">core::ops::function::FnOnce::call_once</text></g><g><title>bitbeat::Process::step (2 samples, 0.02%)</title><rect x="85.7211%" y="277" width="0.0192%" height="15" fill="rgb(219,138,40)" fg:x="8921" fg:w="2"/><text x="85.9711%" y="287.50"></text></g><g><title>__rust_try (7,585 samples, 72.88%)</title><rect x="13.0297%" y="341" width="72.8836%" height="15" fill="rgb(241,228,46)" fg:x="1356" fg:w="7585"/><text x="13.2797%" y="351.50">__rust_try</text></g><g><title>std::panicking::try::do_call (7,575 samples, 72.79%)</title><rect x="13.1258%" y="325" width="72.7875%" height="15" fill="rgb(223,209,38)" fg:x="1366" fg:w="7575"/><text x="13.3758%" y="335.50">std::panicking::try::do_call</text></g><g><title>_platform_memmove (17 samples, 0.16%)</title><rect x="85.7500%" y="309" width="0.1634%" height="15" fill="rgb(236,164,45)" fg:x="8924" fg:w="17"/><text x="86.0000%" y="319.50"></text></g><g><title>bitbeat::Machine::run (8,968 samples, 86.17%)</title><rect x="0.0384%" y="373" width="86.1728%" height="15" fill="rgb(231,15,5)" fg:x="4" fg:w="8968"/><text x="0.2884%" y="383.50">bitbeat::Machine::run</text></g><g><title>std::panic::catch_unwind (7,640 samples, 73.41%)</title><rect x="12.7991%" y="357" width="73.4121%" height="15" fill="rgb(252,35,15)" fg:x="1332" fg:w="7640"/><text x="13.0491%" y="367.50">std::panic::catch_unwind</text></g><g><title>_platform_memmove (31 samples, 0.30%)</title><rect x="85.9133%" y="341" width="0.2979%" height="15" fill="rgb(248,181,18)" fg:x="8941" fg:w="31"/><text x="86.1633%" y="351.50"></text></g><g><title>&lt;hashbrown::control::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="86.2304%" y="261" width="0.0192%" height="15" fill="rgb(233,39,42)" fg:x="8974" fg:w="2"/><text x="86.4804%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="86.2592%" y="261" width="0.0192%" height="15" fill="rgb(238,110,33)" fg:x="8977" fg:w="2"/><text x="86.5092%" y="271.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u64&gt;::trailing_zeros (6 samples, 0.06%)</title><rect x="86.2785%" y="261" width="0.0577%" height="15" fill="rgb(233,195,10)" fg:x="8979" fg:w="6"/><text x="86.5285%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (22 samples, 0.21%)</title><rect x="86.3361%" y="261" width="0.2114%" height="15" fill="rgb(254,105,3)" fg:x="8985" fg:w="22"/><text x="86.5861%" y="271.50"></text></g><g><title>hashbrown::control::bitmask::BitMask::lowest_set_bit (8 samples, 0.08%)</title><rect x="86.5475%" y="261" width="0.0769%" height="15" fill="rgb(221,225,9)" fg:x="9007" fg:w="8"/><text x="86.7975%" y="271.50"></text></g><g><title>hashbrown::control::group::neon::Group::load_aligned (108 samples, 1.04%)</title><rect x="86.6244%" y="261" width="1.0378%" height="15" fill="rgb(224,227,45)" fg:x="9015" fg:w="108"/><text x="86.8744%" y="271.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (108 samples, 1.04%)</title><rect x="86.6244%" y="245" width="1.0378%" height="15" fill="rgb(229,198,43)" fg:x="9015" fg:w="108"/><text x="86.8744%" y="255.50"></text></g><g><title>core::ptr::read_unaligned (107 samples, 1.03%)</title><rect x="86.6340%" y="229" width="1.0282%" height="15" fill="rgb(206,209,35)" fg:x="9016" fg:w="107"/><text x="86.8840%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (104 samples, 1.00%)</title><rect x="86.6628%" y="213" width="0.9993%" height="15" fill="rgb(245,195,53)" fg:x="9019" fg:w="104"/><text x="86.9128%" y="223.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (20 samples, 0.19%)</title><rect x="87.4700%" y="197" width="0.1922%" height="15" fill="rgb(240,92,26)" fg:x="9103" fg:w="20"/><text x="87.7200%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (5 samples, 0.05%)</title><rect x="87.6622%" y="261" width="0.0480%" height="15" fill="rgb(207,40,23)" fg:x="9123" fg:w="5"/><text x="87.9122%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (197 samples, 1.89%)</title><rect x="86.2112%" y="277" width="1.8930%" height="15" fill="rgb(223,111,35)" fg:x="8972" fg:w="197"/><text x="86.4612%" y="287.50">&lt;..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (41 samples, 0.39%)</title><rect x="87.7102%" y="261" width="0.3940%" height="15" fill="rgb(229,147,28)" fg:x="9128" fg:w="41"/><text x="87.9602%" y="271.50"></text></g><g><title>hashbrown::control::group::neon::Group::match_full (4 samples, 0.04%)</title><rect x="88.0657%" y="245" width="0.0384%" height="15" fill="rgb(211,29,28)" fg:x="9165" fg:w="4"/><text x="88.3157%" y="255.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="89.3053%" y="197" width="0.0192%" height="15" fill="rgb(228,72,33)" fg:x="9294" fg:w="2"/><text x="89.5553%" y="207.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="89.6224%" y="133" width="0.0192%" height="15" fill="rgb(205,214,31)" fg:x="9327" fg:w="2"/><text x="89.8724%" y="143.50"></text></g><g><title>__rdl_dealloc (10 samples, 0.10%)</title><rect x="89.6416%" y="133" width="0.0961%" height="15" fill="rgb(224,111,15)" fg:x="9329" fg:w="10"/><text x="89.8916%" y="143.50"></text></g><g><title>_free (5 samples, 0.05%)</title><rect x="89.7377%" y="133" width="0.0480%" height="15" fill="rgb(253,21,26)" fg:x="9339" fg:w="5"/><text x="89.9877%" y="143.50"></text></g><g><title>_nanov2_free (3 samples, 0.03%)</title><rect x="89.7857%" y="133" width="0.0288%" height="15" fill="rgb(245,139,43)" fg:x="9344" fg:w="3"/><text x="90.0357%" y="143.50"></text></g><g><title>_szone_free (5 samples, 0.05%)</title><rect x="89.8145%" y="133" width="0.0480%" height="15" fill="rgb(252,170,7)" fg:x="9347" fg:w="5"/><text x="90.0645%" y="143.50"></text></g><g><title>DYLD-STUB$$_platform_memset (2 samples, 0.02%)</title><rect x="91.0829%" y="117" width="0.0192%" height="15" fill="rgb(231,118,14)" fg:x="9479" fg:w="2"/><text x="91.3329%" y="127.50"></text></g><g><title>_platform_memset (9 samples, 0.09%)</title><rect x="91.1021%" y="117" width="0.0865%" height="15" fill="rgb(238,83,0)" fg:x="9481" fg:w="9"/><text x="91.3521%" y="127.50"></text></g><g><title>get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="92.6492%" y="101" width="0.0192%" height="15" fill="rgb(221,39,39)" fg:x="9642" fg:w="2"/><text x="92.8992%" y="111.50"></text></g><g><title>mvm_deallocate_plat (14 samples, 0.13%)</title><rect x="92.6684%" y="101" width="0.1345%" height="15" fill="rgb(222,119,46)" fg:x="9644" fg:w="14"/><text x="92.9184%" y="111.50"></text></g><g><title>mach_vm_deallocate (14 samples, 0.13%)</title><rect x="92.6684%" y="85" width="0.1345%" height="15" fill="rgb(222,165,49)" fg:x="9644" fg:w="14"/><text x="92.9184%" y="95.50"></text></g><g><title>_kernelrpc_mach_vm_deallocate_trap (14 samples, 0.13%)</title><rect x="92.6684%" y="69" width="0.1345%" height="15" fill="rgb(219,113,52)" fg:x="9644" fg:w="14"/><text x="92.9184%" y="79.50"></text></g><g><title>tiny_free_detach_region (44 samples, 0.42%)</title><rect x="92.8029%" y="101" width="0.4228%" height="15" fill="rgb(214,7,15)" fg:x="9658" fg:w="44"/><text x="93.0529%" y="111.50"></text></g><g><title>tiny_free_list_remove_ptr (2 samples, 0.02%)</title><rect x="93.2065%" y="85" width="0.0192%" height="15" fill="rgb(235,32,4)" fg:x="9700" fg:w="2"/><text x="93.4565%" y="95.50"></text></g><g><title>tiny_free_list_add_ptr (22 samples, 0.21%)</title><rect x="93.2257%" y="101" width="0.2114%" height="15" fill="rgb(238,90,54)" fg:x="9702" fg:w="22"/><text x="93.4757%" y="111.50"></text></g><g><title>tiny_free_list_remove_ptr (11 samples, 0.11%)</title><rect x="93.4371%" y="101" width="0.1057%" height="15" fill="rgb(213,208,19)" fg:x="9724" fg:w="11"/><text x="93.6871%" y="111.50"></text></g><g><title>tiny_free_reattach_region (14 samples, 0.13%)</title><rect x="93.5428%" y="101" width="0.1345%" height="15" fill="rgb(233,156,4)" fg:x="9735" fg:w="14"/><text x="93.7928%" y="111.50"></text></g><g><title>tiny_free_scan_madvise_free (20 samples, 0.19%)</title><rect x="93.6773%" y="101" width="0.1922%" height="15" fill="rgb(207,194,5)" fg:x="9749" fg:w="20"/><text x="93.9273%" y="111.50"></text></g><g><title>mvm_madvise_free_plat (91 samples, 0.87%)</title><rect x="93.9560%" y="85" width="0.8744%" height="15" fill="rgb(206,111,30)" fg:x="9778" fg:w="91"/><text x="94.2060%" y="95.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (91 samples, 0.87%)</title><rect x="93.9560%" y="69" width="0.8744%" height="15" fill="rgb(243,70,54)" fg:x="9778" fg:w="91"/><text x="94.2060%" y="79.50"></text></g><g><title>madvise (91 samples, 0.87%)</title><rect x="93.9560%" y="53" width="0.8744%" height="15" fill="rgb(242,28,8)" fg:x="9778" fg:w="91"/><text x="94.2060%" y="63.50"></text></g><g><title>tiny_free_no_lock (380 samples, 3.65%)</title><rect x="91.1886%" y="117" width="3.6514%" height="15" fill="rgb(219,106,18)" fg:x="9490" fg:w="380"/><text x="91.4386%" y="127.50">tiny..</text></g><g><title>tiny_madvise_free_range_no_lock (101 samples, 0.97%)</title><rect x="93.8695%" y="101" width="0.9705%" height="15" fill="rgb(244,222,10)" fg:x="9769" fg:w="101"/><text x="94.1195%" y="111.50"></text></g><g><title>free_tiny (520 samples, 5.00%)</title><rect x="89.8626%" y="133" width="4.9966%" height="15" fill="rgb(236,179,52)" fg:x="9352" fg:w="520"/><text x="90.1126%" y="143.50">free_t..</text></g><g><title>tiny_madvise_free_range_no_lock (2 samples, 0.02%)</title><rect x="94.8400%" y="117" width="0.0192%" height="15" fill="rgb(213,23,39)" fg:x="9870" fg:w="2"/><text x="95.0900%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (563 samples, 5.41%)</title><rect x="89.4878%" y="149" width="5.4098%" height="15" fill="rgb(238,48,10)" fg:x="9313" fg:w="563"/><text x="89.7378%" y="159.50">&lt;alloc:..</text></g><g><title>tiny_free_no_lock (4 samples, 0.04%)</title><rect x="94.8592%" y="133" width="0.0384%" height="15" fill="rgb(251,196,23)" fg:x="9872" fg:w="4"/><text x="95.1092%" y="143.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (567 samples, 5.45%)</title><rect x="89.4878%" y="165" width="5.4483%" height="15" fill="rgb(250,152,24)" fg:x="9313" fg:w="567"/><text x="89.7378%" y="175.50">&lt;&amp;A as ..</text></g><g><title>_szone_free (3 samples, 0.03%)</title><rect x="94.9073%" y="149" width="0.0288%" height="15" fill="rgb(209,150,17)" fg:x="9877" fg:w="3"/><text x="95.1573%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;core::cell::RefCell&lt;bitbeat::Process&gt;,&amp;alloc::alloc::Global&gt;&gt; (594 samples, 5.71%)</title><rect x="89.3245%" y="197" width="5.7077%" height="15" fill="rgb(234,202,34)" fg:x="9296" fg:w="594"/><text x="89.5745%" y="207.50">core::p..</text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (593 samples, 5.70%)</title><rect x="89.3341%" y="181" width="5.6981%" height="15" fill="rgb(253,148,53)" fg:x="9297" fg:w="593"/><text x="89.5841%" y="191.50">&lt;alloc:..</text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (9 samples, 0.09%)</title><rect x="94.9457%" y="165" width="0.0865%" height="15" fill="rgb(218,129,16)" fg:x="9881" fg:w="9"/><text x="95.1957%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (4 samples, 0.04%)</title><rect x="94.9938%" y="149" width="0.0384%" height="15" fill="rgb(216,85,19)" fg:x="9886" fg:w="4"/><text x="95.2438%" y="159.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::end_bound (4 samples, 0.04%)</title><rect x="96.3006%" y="85" width="0.0384%" height="15" fill="rgb(235,228,7)" fg:x="10022" fg:w="4"/><text x="96.5506%" y="95.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (97 samples, 0.93%)</title><rect x="95.8586%" y="117" width="0.9321%" height="15" fill="rgb(245,175,0)" fg:x="9976" fg:w="97"/><text x="96.1086%" y="127.50"></text></g><g><title>core::slice::index::range (95 samples, 0.91%)</title><rect x="95.8778%" y="101" width="0.9128%" height="15" fill="rgb(208,168,36)" fg:x="9978" fg:w="95"/><text x="96.1278%" y="111.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::start_bound (47 samples, 0.45%)</title><rect x="96.3390%" y="85" width="0.4516%" height="15" fill="rgb(246,171,24)" fg:x="10026" fg:w="47"/><text x="96.5890%" y="95.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (135 samples, 1.30%)</title><rect x="95.5222%" y="133" width="1.2972%" height="15" fill="rgb(215,142,24)" fg:x="9941" fg:w="135"/><text x="95.7722%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;i64&gt;&gt; (3 samples, 0.03%)</title><rect x="96.7906%" y="117" width="0.0288%" height="15" fill="rgb(250,187,7)" fg:x="10073" fg:w="3"/><text x="97.0406%" y="127.50"></text></g><g><title>_nanov2_free (11 samples, 0.11%)</title><rect x="96.8675%" y="101" width="0.1057%" height="15" fill="rgb(228,66,33)" fg:x="10081" fg:w="11"/><text x="97.1175%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (23 samples, 0.22%)</title><rect x="96.9732%" y="101" width="0.2210%" height="15" fill="rgb(234,215,21)" fg:x="10092" fg:w="23"/><text x="97.2232%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;i64&gt;&gt; (180 samples, 1.73%)</title><rect x="95.4838%" y="149" width="1.7296%" height="15" fill="rgb(222,191,20)" fg:x="9937" fg:w="180"/><text x="95.7338%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (40 samples, 0.38%)</title><rect x="96.8291%" y="133" width="0.3844%" height="15" fill="rgb(245,79,54)" fg:x="10077" fg:w="40"/><text x="97.0791%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.37%)</title><rect x="96.8483%" y="117" width="0.3651%" height="15" fill="rgb(240,10,37)" fg:x="10079" fg:w="38"/><text x="97.0983%" y="127.50"></text></g><g><title>nanov2_madvise_block (2 samples, 0.02%)</title><rect x="97.1942%" y="101" width="0.0192%" height="15" fill="rgb(214,192,32)" fg:x="10115" fg:w="2"/><text x="97.4442%" y="111.50"></text></g><g><title>nanov2_madvise_block_locked (2 samples, 0.02%)</title><rect x="97.1942%" y="85" width="0.0192%" height="15" fill="rgb(209,36,54)" fg:x="10115" fg:w="2"/><text x="97.4442%" y="95.50"></text></g><g><title>mvm_madvise_free_plat (2 samples, 0.02%)</title><rect x="97.1942%" y="69" width="0.0192%" height="15" fill="rgb(220,10,11)" fg:x="10115" fg:w="2"/><text x="97.4442%" y="79.50"></text></g><g><title>&lt;deduplicated_symbol&gt; (2 samples, 0.02%)</title><rect x="97.1942%" y="53" width="0.0192%" height="15" fill="rgb(221,106,17)" fg:x="10115" fg:w="2"/><text x="97.4442%" y="63.50"></text></g><g><title>madvise (2 samples, 0.02%)</title><rect x="97.1942%" y="37" width="0.0192%" height="15" fill="rgb(251,142,44)" fg:x="10115" fg:w="2"/><text x="97.4442%" y="47.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1,041 samples, 10.00%)</title><rect x="89.0651%" y="213" width="10.0029%" height="15" fill="rgb(238,13,15)" fg:x="9269" fg:w="1041"/><text x="89.3151%" y="223.50">alloc::rc::Rc&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt; (420 samples, 4.04%)</title><rect x="95.0322%" y="197" width="4.0357%" height="15" fill="rgb(208,107,27)" fg:x="9890" fg:w="420"/><text x="95.2822%" y="207.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;bitbeat::Process&gt;&gt; (416 samples, 4.00%)</title><rect x="95.0706%" y="181" width="3.9973%" height="15" fill="rgb(205,136,37)" fg:x="9894" fg:w="416"/><text x="95.3206%" y="191.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;bitbeat::Process&gt; (413 samples, 3.97%)</title><rect x="95.0995%" y="165" width="3.9685%" height="15" fill="rgb(250,205,27)" fg:x="9897" fg:w="413"/><text x="95.3495%" y="175.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitbeat::Function&gt;&gt; (193 samples, 1.85%)</title><rect x="97.2134%" y="149" width="1.8545%" height="15" fill="rgb(210,80,43)" fg:x="10117" fg:w="193"/><text x="97.4634%" y="159.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (148 samples, 1.42%)</title><rect x="97.6458%" y="133" width="1.4221%" height="15" fill="rgb(247,160,36)" fg:x="10162" fg:w="148"/><text x="97.8958%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::drop_in_place (1,192 samples, 11.45%)</title><rect x="88.1042%" y="277" width="11.4538%" height="15" fill="rgb(234,13,49)" fg:x="9169" fg:w="1192"/><text x="88.3542%" y="287.50">core::ptr::mut_pt..</text></g><g><title>core::ptr::drop_in_place&lt;(usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;)&gt; (1,178 samples, 11.32%)</title><rect x="88.2387%" y="261" width="11.3193%" height="15" fill="rgb(234,122,0)" fg:x="9183" fg:w="1178"/><text x="88.4887%" y="271.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (1,173 samples, 11.27%)</title><rect x="88.2867%" y="245" width="11.2713%" height="15" fill="rgb(207,146,38)" fg:x="9188" fg:w="1173"/><text x="88.5367%" y="255.50">core::ptr::drop_i..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,166 samples, 11.20%)</title><rect x="88.3540%" y="229" width="11.2040%" height="15" fill="rgb(207,177,25)" fg:x="9195" fg:w="1166"/><text x="88.6040%" y="239.50">&lt;alloc::rc::Rc&lt;T..</text></g><g><title>alloc::rc::RcInnerPtr::strong (51 samples, 0.49%)</title><rect x="99.0679%" y="213" width="0.4901%" height="15" fill="rgb(211,178,42)" fg:x="10310" fg:w="51"/><text x="99.3179%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (14 samples, 0.13%)</title><rect x="99.5580%" y="277" width="0.1345%" height="15" fill="rgb(230,69,54)" fg:x="10361" fg:w="14"/><text x="99.8080%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (9 samples, 0.09%)</title><rect x="99.6925%" y="277" width="0.0865%" height="15" fill="rgb(214,135,41)" fg:x="10375" fg:w="9"/><text x="99.9425%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1,433 samples, 13.77%)</title><rect x="86.2112%" y="293" width="13.7696%" height="15" fill="rgb(237,67,25)" fg:x="8972" fg:w="1433"/><text x="86.4612%" y="303.50">hashbrown::raw::RawTa..</text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (20 samples, 0.19%)</title><rect x="99.7886%" y="277" width="0.1922%" height="15" fill="rgb(222,189,50)" fg:x="10385" fg:w="20"/><text x="100.0386%" y="287.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (10,402 samples, 99.95%)</title><rect x="0.0384%" y="437" width="99.9520%" height="15" fill="rgb(245,148,34)" fg:x="4" fg:w="10402"/><text x="0.2884%" y="447.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (10,402 samples, 99.95%)</title><rect x="0.0384%" y="421" width="99.9520%" height="15" fill="rgb(222,29,6)" fg:x="4" fg:w="10402"/><text x="0.2884%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (10,402 samples, 99.95%)</title><rect x="0.0384%" y="405" width="99.9520%" height="15" fill="rgb(221,189,43)" fg:x="4" fg:w="10402"/><text x="0.2884%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>bitbeat::main (10,402 samples, 99.95%)</title><rect x="0.0384%" y="389" width="99.9520%" height="15" fill="rgb(207,36,27)" fg:x="4" fg:w="10402"/><text x="0.2884%" y="399.50">bitbeat::main</text></g><g><title>core::ptr::drop_in_place&lt;bitbeat::Machine&gt; (1,434 samples, 13.78%)</title><rect x="86.2112%" y="373" width="13.7792%" height="15" fill="rgb(217,90,24)" fg:x="8972" fg:w="1434"/><text x="86.4612%" y="383.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (1,434 samples, 13.78%)</title><rect x="86.2112%" y="357" width="13.7792%" height="15" fill="rgb(224,66,35)" fg:x="8972" fg:w="1434"/><text x="86.4612%" y="367.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;,std::hash::random::RandomState&gt;&gt; (1,434 samples, 13.78%)</title><rect x="86.2112%" y="341" width="13.7792%" height="15" fill="rgb(221,13,50)" fg:x="8972" fg:w="1434"/><text x="86.4612%" y="351.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;)&gt;&gt; (1,434 samples, 13.78%)</title><rect x="86.2112%" y="325" width="13.7792%" height="15" fill="rgb(236,68,49)" fg:x="8972" fg:w="1434"/><text x="86.4612%" y="335.50">core::ptr::drop_in_pl..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,434 samples, 13.78%)</title><rect x="86.2112%" y="309" width="13.7792%" height="15" fill="rgb(229,146,28)" fg:x="8972" fg:w="1434"/><text x="86.4612%" y="319.50">&lt;hashbrown::raw::RawT..</text></g><g><title>all (10,407 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(225,31,38)" fg:x="0" fg:w="10407"/><text x="0.2500%" y="527.50"></text></g><g><title>start (10,406 samples, 99.99%)</title><rect x="0.0096%" y="501" width="99.9904%" height="15" fill="rgb(250,208,3)" fg:x="1" fg:w="10406"/><text x="0.2596%" y="511.50">start</text></g><g><title>main (10,403 samples, 99.96%)</title><rect x="0.0384%" y="485" width="99.9616%" height="15" fill="rgb(246,54,23)" fg:x="4" fg:w="10403"/><text x="0.2884%" y="495.50">main</text></g><g><title>std::rt::lang_start (10,403 samples, 99.96%)</title><rect x="0.0384%" y="469" width="99.9616%" height="15" fill="rgb(243,76,11)" fg:x="4" fg:w="10403"/><text x="0.2884%" y="479.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (10,403 samples, 99.96%)</title><rect x="0.0384%" y="453" width="99.9616%" height="15" fill="rgb(245,21,50)" fg:x="4" fg:w="10403"/><text x="0.2884%" y="463.50">std::rt::lang_start_internal</text></g></svg></svg>