<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="7915"><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="373" width="0.0126%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0126%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0126%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0126%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="309" width="0.0126%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0126%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0126%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0126%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0126%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0126%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0126%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0126%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="181" width="0.0126%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="165" width="0.0126%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="149" width="0.0126%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="133" width="0.0126%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="117" width="0.0126%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="101" width="0.0126%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="85" width="0.0126%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="69" width="0.0126%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="79.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="53" width="0.0126%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="63.50"></text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 0.01%)</title><rect x="0.0000%" y="37" width="0.0126%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="47.50"></text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (2 samples, 0.03%)</title><rect x="0.0000%" y="405" width="0.0253%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, mach_o::Header const*) (2 samples, 0.03%)</title><rect x="0.0000%" y="389" width="0.0253%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="399.50"></text></g><g><title>dyld4::RuntimeState::notifyDtrace(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (1 samples, 0.01%)</title><rect x="0.0126%" y="373" width="0.0126%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.2626%" y="383.50"></text></g><g><title>dyld3::MachOFile::forEachDOFSection(Diagnostics&amp;, void (unsigned int) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0126%" y="357" width="0.0126%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.2626%" y="367.50"></text></g><g><title>mach_o::Header::forEachSection(void (mach_o::Header::SegmentInfo const&amp;, mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0126%" y="341" width="0.0126%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.2626%" y="351.50"></text></g><g><title>mach_o::Header::forEachLoadCommand(void (load_command const*, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0126%" y="325" width="0.0126%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="0.2626%" y="335.50"></text></g><g><title>invocation function for block in mach_o::Header::forEachSection(void (mach_o::Header::SegmentInfo const&amp;, mach_o::Header::SectionInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 0.01%)</title><rect x="0.0126%" y="309" width="0.0126%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="1"/><text x="0.2626%" y="319.50"></text></g><g><title>invocation function for block in dyld4::RuntimeState::notifyDtrace(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (1 samples, 0.01%)</title><rect x="0.0126%" y="293" width="0.0126%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="1"/><text x="0.2626%" y="303.50"></text></g><g><title>strrchr (1 samples, 0.01%)</title><rect x="0.0126%" y="277" width="0.0126%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="0.2626%" y="287.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.14%)</title><rect x="1.5414%" y="277" width="0.1390%" height="15" fill="rgb(229,88,8)" fg:x="122" fg:w="11"/><text x="1.7914%" y="287.50"></text></g><g><title>&lt;core::cell::RefMut&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.11%)</title><rect x="1.6804%" y="277" width="0.1137%" height="15" fill="rgb(213,181,19)" fg:x="133" fg:w="9"/><text x="1.9304%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (27 samples, 0.34%)</title><rect x="2.0720%" y="261" width="0.3411%" height="15" fill="rgb(254,191,54)" fg:x="164" fg:w="27"/><text x="2.3220%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="2.3626%" y="245" width="0.0505%" height="15" fill="rgb(241,83,37)" fg:x="187" fg:w="4"/><text x="2.6126%" y="255.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (10 samples, 0.13%)</title><rect x="2.4131%" y="261" width="0.1263%" height="15" fill="rgb(233,36,39)" fg:x="191" fg:w="10"/><text x="2.6631%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (18 samples, 0.23%)</title><rect x="4.3209%" y="245" width="0.2274%" height="15" fill="rgb(226,3,54)" fg:x="342" fg:w="18"/><text x="4.5709%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="4.4978%" y="229" width="0.0505%" height="15" fill="rgb(245,192,40)" fg:x="356" fg:w="4"/><text x="4.7478%" y="239.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (15 samples, 0.19%)</title><rect x="8.0227%" y="229" width="0.1895%" height="15" fill="rgb(238,167,29)" fg:x="635" fg:w="15"/><text x="8.2727%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (391 samples, 4.94%)</title><rect x="8.2123%" y="229" width="4.9400%" height="15" fill="rgb(232,182,51)" fg:x="650" fg:w="391"/><text x="8.4623%" y="239.50">&lt;core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (195 samples, 2.46%)</title><rect x="10.6886%" y="213" width="2.4637%" height="15" fill="rgb(231,60,39)" fg:x="846" fg:w="195"/><text x="10.9386%" y="223.50">&lt;c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (24 samples, 0.30%)</title><rect x="13.1522%" y="229" width="0.3032%" height="15" fill="rgb(208,69,12)" fg:x="1041" fg:w="24"/><text x="13.4022%" y="239.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (55 samples, 0.69%)</title><rect x="13.4555%" y="229" width="0.6949%" height="15" fill="rgb(235,93,37)" fg:x="1065" fg:w="55"/><text x="13.7055%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (15 samples, 0.19%)</title><rect x="13.9608%" y="213" width="0.1895%" height="15" fill="rgb(213,116,39)" fg:x="1105" fg:w="15"/><text x="14.2108%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1,021 samples, 12.90%)</title><rect x="1.7941%" y="277" width="12.8996%" height="15" fill="rgb(222,207,29)" fg:x="142" fg:w="1021"/><text x="2.0441%" y="287.50">alloc::collections:..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (962 samples, 12.15%)</title><rect x="2.5395%" y="261" width="12.1541%" height="15" fill="rgb(206,96,30)" fg:x="201" fg:w="962"/><text x="2.7895%" y="271.50">alloc::collections..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (803 samples, 10.15%)</title><rect x="4.5483%" y="245" width="10.1453%" height="15" fill="rgb(218,138,4)" fg:x="360" fg:w="803"/><text x="4.7983%" y="255.50">alloc::collecti..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (43 samples, 0.54%)</title><rect x="14.1503%" y="229" width="0.5433%" height="15" fill="rgb(250,191,14)" fg:x="1120" fg:w="43"/><text x="14.4003%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="14.8831%" y="245" width="0.0126%" height="15" fill="rgb(239,60,40)" fg:x="1178" fg:w="1"/><text x="15.1331%" y="255.50"></text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (2 samples, 0.03%)</title><rect x="14.9716%" y="229" width="0.0253%" height="15" fill="rgb(206,27,48)" fg:x="1185" fg:w="2"/><text x="15.2216%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (3 samples, 0.04%)</title><rect x="15.1105%" y="213" width="0.0379%" height="15" fill="rgb(225,35,8)" fg:x="1196" fg:w="3"/><text x="15.3605%" y="223.50"></text></g><g><title>_platform_memmove (3 samples, 0.04%)</title><rect x="15.3632%" y="197" width="0.0379%" height="15" fill="rgb(250,213,24)" fg:x="1216" fg:w="3"/><text x="15.6132%" y="207.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_and_affected_ancestors (4 samples, 0.05%)</title><rect x="15.4011%" y="197" width="0.0505%" height="15" fill="rgb(247,123,22)" fg:x="1219" fg:w="4"/><text x="15.6511%" y="207.50"></text></g><g><title>alloc::collections::btree::fix::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::fix_node_through_parent (4 samples, 0.05%)</title><rect x="15.4011%" y="181" width="0.0505%" height="15" fill="rgb(231,138,38)" fg:x="1219" fg:w="4"/><text x="15.6511%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (1 samples, 0.01%)</title><rect x="15.4390%" y="165" width="0.0126%" height="15" fill="rgb(231,145,46)" fg:x="1222" fg:w="1"/><text x="15.6890%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.01%)</title><rect x="15.4390%" y="149" width="0.0126%" height="15" fill="rgb(251,118,11)" fg:x="1222" fg:w="1"/><text x="15.6890%" y="159.50"></text></g><g><title>_free (1 samples, 0.01%)</title><rect x="15.5907%" y="149" width="0.0126%" height="15" fill="rgb(217,147,25)" fg:x="1234" fg:w="1"/><text x="15.8407%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.03%)</title><rect x="15.5907%" y="165" width="0.0253%" height="15" fill="rgb(247,81,37)" fg:x="1234" fg:w="2"/><text x="15.8407%" y="175.50"></text></g><g><title>_nanov2_free (1 samples, 0.01%)</title><rect x="15.6033%" y="149" width="0.0126%" height="15" fill="rgb(209,12,38)" fg:x="1235" fg:w="1"/><text x="15.8533%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (2 samples, 0.03%)</title><rect x="15.6159%" y="165" width="0.0253%" height="15" fill="rgb(227,1,9)" fg:x="1236" fg:w="2"/><text x="15.8659%" y="175.50"></text></g><g><title>_platform_memmove (1 samples, 0.01%)</title><rect x="15.6412%" y="165" width="0.0126%" height="15" fill="rgb(248,47,43)" fg:x="1238" fg:w="1"/><text x="15.8912%" y="175.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (15 samples, 0.19%)</title><rect x="15.6538%" y="165" width="0.1895%" height="15" fill="rgb(221,10,30)" fg:x="1239" fg:w="15"/><text x="15.9038%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (11 samples, 0.14%)</title><rect x="15.7044%" y="149" width="0.1390%" height="15" fill="rgb(210,229,1)" fg:x="1243" fg:w="11"/><text x="15.9544%" y="159.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (2 samples, 0.03%)</title><rect x="15.8181%" y="133" width="0.0253%" height="15" fill="rgb(222,148,37)" fg:x="1252" fg:w="2"/><text x="16.0681%" y="143.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (44 samples, 0.56%)</title><rect x="15.4517%" y="197" width="0.5559%" height="15" fill="rgb(234,67,33)" fg:x="1223" fg:w="44"/><text x="15.7017%" y="207.50"></text></g><g><title>alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (43 samples, 0.54%)</title><rect x="15.4643%" y="181" width="0.5433%" height="15" fill="rgb(247,98,35)" fg:x="1224" fg:w="43"/><text x="15.7143%" y="191.50"></text></g><g><title>alloc::collections::btree::node::slice_remove (13 samples, 0.16%)</title><rect x="15.8433%" y="165" width="0.1642%" height="15" fill="rgb(247,138,52)" fg:x="1254" fg:w="13"/><text x="16.0933%" y="175.50"></text></g><g><title>core::intrinsics::copy::precondition_check (3 samples, 0.04%)</title><rect x="15.9697%" y="149" width="0.0379%" height="15" fill="rgb(213,79,30)" fg:x="1264" fg:w="3"/><text x="16.2197%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (14 samples, 0.18%)</title><rect x="16.1971%" y="181" width="0.1769%" height="15" fill="rgb(246,177,23)" fg:x="1282" fg:w="14"/><text x="16.4471%" y="191.50"></text></g><g><title>DYLD-STUB$$memmove (3 samples, 0.04%)</title><rect x="17.4605%" y="165" width="0.0379%" height="15" fill="rgb(230,62,27)" fg:x="1382" fg:w="3"/><text x="17.7105%" y="175.50"></text></g><g><title>_platform_memmove (6 samples, 0.08%)</title><rect x="17.4984%" y="165" width="0.0758%" height="15" fill="rgb(216,154,8)" fg:x="1385" fg:w="6"/><text x="17.7484%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::remove (159 samples, 2.01%)</title><rect x="16.0076%" y="197" width="2.0088%" height="15" fill="rgb(244,35,45)" fg:x="1267" fg:w="159"/><text x="16.2576%" y="207.50">a..</text></g><g><title>alloc::collections::btree::node::slice_remove (130 samples, 1.64%)</title><rect x="16.3740%" y="181" width="1.6425%" height="15" fill="rgb(251,115,12)" fg:x="1296" fg:w="130"/><text x="16.6240%" y="191.50"></text></g><g><title>core::intrinsics::copy::precondition_check (35 samples, 0.44%)</title><rect x="17.5742%" y="165" width="0.4422%" height="15" fill="rgb(240,54,50)" fg:x="1391" fg:w="35"/><text x="17.8242%" y="175.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (3 samples, 0.04%)</title><rect x="18.0164%" y="197" width="0.0379%" height="15" fill="rgb(233,84,52)" fg:x="1426" fg:w="3"/><text x="18.2664%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.01%)</title><rect x="18.1175%" y="181" width="0.0126%" height="15" fill="rgb(207,117,47)" fg:x="1434" fg:w="1"/><text x="18.3675%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (259 samples, 3.27%)</title><rect x="14.8958%" y="245" width="3.2723%" height="15" fill="rgb(249,43,39)" fg:x="1179" fg:w="259"/><text x="15.1458%" y="255.50">all..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (251 samples, 3.17%)</title><rect x="14.9968%" y="229" width="3.1712%" height="15" fill="rgb(209,38,44)" fg:x="1187" fg:w="251"/><text x="15.2468%" y="239.50">all..</text></g><g><title>alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (239 samples, 3.02%)</title><rect x="15.1485%" y="213" width="3.0196%" height="15" fill="rgb(236,212,23)" fg:x="1199" fg:w="239"/><text x="15.3985%" y="223.50">all..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::choose_parent_kv (9 samples, 0.11%)</title><rect x="18.0543%" y="197" width="0.1137%" height="15" fill="rgb(242,79,21)" fg:x="1429" fg:w="9"/><text x="18.3043%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (3 samples, 0.04%)</title><rect x="18.1301%" y="181" width="0.0379%" height="15" fill="rgb(211,96,35)" fg:x="1435" fg:w="3"/><text x="18.3801%" y="191.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.05%)</title><rect x="18.1680%" y="245" width="0.0505%" height="15" fill="rgb(253,215,40)" fg:x="1438" fg:w="4"/><text x="18.4180%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (9 samples, 0.11%)</title><rect x="19.2419%" y="229" width="0.1137%" height="15" fill="rgb(211,81,21)" fg:x="1523" fg:w="9"/><text x="19.4919%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="19.3430%" y="213" width="0.0126%" height="15" fill="rgb(208,190,38)" fg:x="1531" fg:w="1"/><text x="19.5930%" y="223.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (8 samples, 0.10%)</title><rect x="21.1750%" y="213" width="0.1011%" height="15" fill="rgb(235,213,38)" fg:x="1676" fg:w="8"/><text x="21.4250%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (201 samples, 2.54%)</title><rect x="21.2761%" y="213" width="2.5395%" height="15" fill="rgb(237,122,38)" fg:x="1684" fg:w="201"/><text x="21.5261%" y="223.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 1.40%)</title><rect x="22.4131%" y="197" width="1.4024%" height="15" fill="rgb(244,218,35)" fg:x="1774" fg:w="111"/><text x="22.6631%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (5 samples, 0.06%)</title><rect x="23.8155%" y="213" width="0.0632%" height="15" fill="rgb(240,68,47)" fg:x="1885" fg:w="5"/><text x="24.0655%" y="223.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (30 samples, 0.38%)</title><rect x="23.8787%" y="213" width="0.3790%" height="15" fill="rgb(210,16,53)" fg:x="1890" fg:w="30"/><text x="24.1287%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (6 samples, 0.08%)</title><rect x="24.1819%" y="197" width="0.0758%" height="15" fill="rgb(235,124,12)" fg:x="1914" fg:w="6"/><text x="24.4319%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (776 samples, 9.80%)</title><rect x="14.7315%" y="261" width="9.8042%" height="15" fill="rgb(224,169,11)" fg:x="1166" fg:w="776"/><text x="14.9815%" y="271.50">alloc::collect..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (500 samples, 6.32%)</title><rect x="18.2186%" y="245" width="6.3171%" height="15" fill="rgb(250,166,2)" fg:x="1442" fg:w="500"/><text x="18.4686%" y="255.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (410 samples, 5.18%)</title><rect x="19.3557%" y="229" width="5.1800%" height="15" fill="rgb(242,216,29)" fg:x="1532" fg:w="410"/><text x="19.6057%" y="239.50">alloc:..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (22 samples, 0.28%)</title><rect x="24.2577%" y="213" width="0.2780%" height="15" fill="rgb(230,116,27)" fg:x="1920" fg:w="22"/><text x="24.5077%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (780 samples, 9.85%)</title><rect x="14.6936%" y="277" width="9.8547%" height="15" fill="rgb(228,99,48)" fg:x="1163" fg:w="780"/><text x="14.9436%" y="287.50">alloc::collect..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.01%)</title><rect x="24.5357%" y="261" width="0.0126%" height="15" fill="rgb(253,11,6)" fg:x="1942" fg:w="1"/><text x="24.7857%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove_entry (1 samples, 0.01%)</title><rect x="24.5483%" y="277" width="0.0126%" height="15" fill="rgb(247,143,39)" fg:x="1943" fg:w="1"/><text x="24.7983%" y="287.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.01%)</title><rect x="24.5610%" y="277" width="0.0126%" height="15" fill="rgb(236,97,10)" fg:x="1944" fg:w="1"/><text x="24.8110%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (84 samples, 1.06%)</title><rect x="24.5736%" y="277" width="1.0613%" height="15" fill="rgb(233,208,19)" fg:x="1945" fg:w="84"/><text x="24.8236%" y="287.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="25.5970%" y="261" width="0.0379%" height="15" fill="rgb(216,164,2)" fg:x="2026" fg:w="3"/><text x="25.8470%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.15%)</title><rect x="28.3512%" y="261" width="0.1516%" height="15" fill="rgb(220,129,5)" fg:x="2244" fg:w="12"/><text x="28.6012%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (62 samples, 0.78%)</title><rect x="29.3493%" y="245" width="0.7833%" height="15" fill="rgb(242,17,10)" fg:x="2323" fg:w="62"/><text x="29.5993%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (233 samples, 2.94%)</title><rect x="28.5028%" y="261" width="2.9438%" height="15" fill="rgb(242,107,0)" fg:x="2256" fg:w="233"/><text x="28.7528%" y="271.50">&lt;a..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (104 samples, 1.31%)</title><rect x="30.1327%" y="245" width="1.3140%" height="15" fill="rgb(251,28,31)" fg:x="2385" fg:w="104"/><text x="30.3827%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.01%)</title><rect x="31.4466%" y="261" width="0.0126%" height="15" fill="rgb(233,223,10)" fg:x="2489" fg:w="1"/><text x="31.6966%" y="271.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (6 samples, 0.08%)</title><rect x="31.4593%" y="261" width="0.0758%" height="15" fill="rgb(215,21,27)" fg:x="2490" fg:w="6"/><text x="31.7093%" y="271.50"></text></g><g><title>alloc::string::String::from_utf8 (4 samples, 0.05%)</title><rect x="31.5351%" y="261" width="0.0505%" height="15" fill="rgb(232,23,21)" fg:x="2496" fg:w="4"/><text x="31.7851%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (3 samples, 0.04%)</title><rect x="31.5856%" y="261" width="0.0379%" height="15" fill="rgb(244,5,23)" fg:x="2500" fg:w="3"/><text x="31.8356%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.10%)</title><rect x="31.6235%" y="261" width="0.1011%" height="15" fill="rgb(226,81,46)" fg:x="2503" fg:w="8"/><text x="31.8735%" y="271.50"></text></g><g><title>bitbeat::Process::new (3 samples, 0.04%)</title><rect x="31.7246%" y="261" width="0.0379%" height="15" fill="rgb(247,70,30)" fg:x="2511" fg:w="3"/><text x="31.9746%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="32.1415%" y="245" width="0.0379%" height="15" fill="rgb(212,68,19)" fg:x="2544" fg:w="3"/><text x="32.3915%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.04%)</title><rect x="32.3689%" y="229" width="0.0379%" height="15" fill="rgb(240,187,13)" fg:x="2562" fg:w="3"/><text x="32.6189%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (30 samples, 0.38%)</title><rect x="32.1794%" y="245" width="0.3790%" height="15" fill="rgb(223,113,26)" fg:x="2547" fg:w="30"/><text x="32.4294%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (12 samples, 0.15%)</title><rect x="32.4068%" y="229" width="0.1516%" height="15" fill="rgb(206,192,2)" fg:x="2565" fg:w="12"/><text x="32.6568%" y="239.50"></text></g><g><title>bitbeat::handle_add (67 samples, 0.85%)</title><rect x="31.7625%" y="261" width="0.8465%" height="15" fill="rgb(241,108,4)" fg:x="2514" fg:w="67"/><text x="32.0125%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.05%)</title><rect x="32.5584%" y="245" width="0.0505%" height="15" fill="rgb(247,173,49)" fg:x="2577" fg:w="4"/><text x="32.8084%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.09%)</title><rect x="33.4428%" y="245" width="0.0884%" height="15" fill="rgb(224,114,35)" fg:x="2647" fg:w="7"/><text x="33.6928%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.13%)</title><rect x="33.7713%" y="229" width="0.1263%" height="15" fill="rgb(245,159,27)" fg:x="2673" fg:w="10"/><text x="34.0213%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (45 samples, 0.57%)</title><rect x="33.5313%" y="245" width="0.5685%" height="15" fill="rgb(245,172,44)" fg:x="2654" fg:w="45"/><text x="33.7813%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (16 samples, 0.20%)</title><rect x="33.8977%" y="229" width="0.2021%" height="15" fill="rgb(236,23,11)" fg:x="2683" fg:w="16"/><text x="34.1477%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="34.0998%" y="245" width="0.0126%" height="15" fill="rgb(205,117,38)" fg:x="2699" fg:w="1"/><text x="34.3498%" y="255.50"></text></g><g><title>bitbeat::handle_cmp_le (128 samples, 1.62%)</title><rect x="32.6090%" y="261" width="1.6172%" height="15" fill="rgb(237,72,25)" fg:x="2581" fg:w="128"/><text x="32.8590%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (9 samples, 0.11%)</title><rect x="34.1124%" y="245" width="0.1137%" height="15" fill="rgb(244,70,9)" fg:x="2700" fg:w="9"/><text x="34.3624%" y="255.50"></text></g><g><title>bitbeat::handle_halt (1 samples, 0.01%)</title><rect x="34.2262%" y="261" width="0.0126%" height="15" fill="rgb(217,125,39)" fg:x="2709" fg:w="1"/><text x="34.4762%" y="271.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (20 samples, 0.25%)</title><rect x="35.0347%" y="245" width="0.2527%" height="15" fill="rgb(235,36,10)" fg:x="2773" fg:w="20"/><text x="35.2847%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (16 samples, 0.20%)</title><rect x="35.0853%" y="229" width="0.2021%" height="15" fill="rgb(251,123,47)" fg:x="2777" fg:w="16"/><text x="35.3353%" y="239.50"></text></g><g><title> N]&gt;::try_from (16 samples, 0.20%)</title><rect x="35.0853%" y="213" width="0.2021%" height="15" fill="rgb(221,13,13)" fg:x="2777" fg:w="16"/><text x="35.3353%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="35.2874%" y="245" width="0.0379%" height="15" fill="rgb(238,131,9)" fg:x="2793" fg:w="3"/><text x="35.5374%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.08%)</title><rect x="35.5780%" y="229" width="0.0758%" height="15" fill="rgb(211,50,8)" fg:x="2816" fg:w="6"/><text x="35.8280%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (45 samples, 0.57%)</title><rect x="35.3253%" y="245" width="0.5685%" height="15" fill="rgb(245,182,24)" fg:x="2796" fg:w="45"/><text x="35.5753%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (19 samples, 0.24%)</title><rect x="35.6538%" y="229" width="0.2401%" height="15" fill="rgb(242,14,37)" fg:x="2822" fg:w="19"/><text x="35.9038%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.10%)</title><rect x="35.8939%" y="245" width="0.1011%" height="15" fill="rgb(246,228,12)" fg:x="2841" fg:w="8"/><text x="36.1439%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.05%)</title><rect x="35.9949%" y="245" width="0.0505%" height="15" fill="rgb(213,55,15)" fg:x="2849" fg:w="4"/><text x="36.2449%" y="255.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (1 samples, 0.01%)</title><rect x="36.0455%" y="245" width="0.0126%" height="15" fill="rgb(209,9,3)" fg:x="2853" fg:w="1"/><text x="36.2955%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;u32,anyhow::Error&gt;&gt; (1 samples, 0.01%)</title><rect x="36.0581%" y="245" width="0.0126%" height="15" fill="rgb(230,59,30)" fg:x="2854" fg:w="1"/><text x="36.3081%" y="255.50"></text></g><g><title>bitbeat::handle_jump_if (148 samples, 1.87%)</title><rect x="34.2388%" y="261" width="1.8699%" height="15" fill="rgb(209,121,21)" fg:x="2710" fg:w="148"/><text x="34.4888%" y="271.50">b..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (3 samples, 0.04%)</title><rect x="36.0708%" y="245" width="0.0379%" height="15" fill="rgb(220,109,13)" fg:x="2855" fg:w="3"/><text x="36.3208%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (48 samples, 0.61%)</title><rect x="37.6627%" y="245" width="0.6064%" height="15" fill="rgb(232,18,1)" fg:x="2981" fg:w="48"/><text x="37.9127%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (42 samples, 0.53%)</title><rect x="37.7385%" y="229" width="0.5306%" height="15" fill="rgb(215,41,42)" fg:x="2987" fg:w="42"/><text x="37.9885%" y="239.50"></text></g><g><title> N]&gt;::try_from (42 samples, 0.53%)</title><rect x="37.7385%" y="213" width="0.5306%" height="15" fill="rgb(224,123,36)" fg:x="2987" fg:w="42"/><text x="37.9885%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.10%)</title><rect x="38.2691%" y="245" width="0.1011%" height="15" fill="rgb(240,125,3)" fg:x="3029" fg:w="8"/><text x="38.5191%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.04%)</title><rect x="38.9640%" y="229" width="0.0379%" height="15" fill="rgb(205,98,50)" fg:x="3084" fg:w="3"/><text x="39.2140%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (92 samples, 1.16%)</title><rect x="38.3702%" y="245" width="1.1623%" height="15" fill="rgb(205,185,37)" fg:x="3037" fg:w="92"/><text x="38.6202%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (42 samples, 0.53%)</title><rect x="39.0019%" y="229" width="0.5306%" height="15" fill="rgb(238,207,15)" fg:x="3087" fg:w="42"/><text x="39.2519%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (16 samples, 0.20%)</title><rect x="39.5325%" y="245" width="0.2021%" height="15" fill="rgb(213,199,42)" fg:x="3129" fg:w="16"/><text x="39.7825%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.05%)</title><rect x="39.7347%" y="245" width="0.0505%" height="15" fill="rgb(235,201,11)" fg:x="3145" fg:w="4"/><text x="39.9847%" y="255.50"></text></g><g><title>core::num::_&lt;impl i64&gt;::from_le_bytes (1 samples, 0.01%)</title><rect x="39.7852%" y="245" width="0.0126%" height="15" fill="rgb(207,46,11)" fg:x="3149" fg:w="1"/><text x="40.0352%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;i64,anyhow::Error&gt;&gt; (3 samples, 0.04%)</title><rect x="39.7979%" y="245" width="0.0379%" height="15" fill="rgb(241,35,35)" fg:x="3150" fg:w="3"/><text x="40.0479%" y="255.50"></text></g><g><title>bitbeat::handle_load_imm (298 samples, 3.77%)</title><rect x="36.1087%" y="261" width="3.7650%" height="15" fill="rgb(243,32,47)" fg:x="2858" fg:w="298"/><text x="36.3587%" y="271.50">bitb..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (3 samples, 0.04%)</title><rect x="39.8358%" y="245" width="0.0379%" height="15" fill="rgb(247,202,23)" fg:x="3153" fg:w="3"/><text x="40.0858%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.05%)</title><rect x="40.4296%" y="245" width="0.0505%" height="15" fill="rgb(219,102,11)" fg:x="3200" fg:w="4"/><text x="40.6796%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.08%)</title><rect x="40.6822%" y="229" width="0.0758%" height="15" fill="rgb(243,110,44)" fg:x="3220" fg:w="6"/><text x="40.9322%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (46 samples, 0.58%)</title><rect x="40.4801%" y="245" width="0.5812%" height="15" fill="rgb(222,74,54)" fg:x="3204" fg:w="46"/><text x="40.7301%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (24 samples, 0.30%)</title><rect x="40.7581%" y="229" width="0.3032%" height="15" fill="rgb(216,99,12)" fg:x="3226" fg:w="24"/><text x="41.0081%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (38 samples, 0.48%)</title><rect x="41.0613%" y="245" width="0.4801%" height="15" fill="rgb(226,22,26)" fg:x="3250" fg:w="38"/><text x="41.3113%" y="255.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (3 samples, 0.04%)</title><rect x="41.5035%" y="229" width="0.0379%" height="15" fill="rgb(217,163,10)" fg:x="3285" fg:w="3"/><text x="41.7535%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="41.5414%" y="245" width="0.0126%" height="15" fill="rgb(213,25,53)" fg:x="3288" fg:w="1"/><text x="41.7914%" y="255.50"></text></g><g><title>bitbeat::handle_recv (140 samples, 1.77%)</title><rect x="39.8737%" y="261" width="1.7688%" height="15" fill="rgb(252,105,26)" fg:x="3156" fg:w="140"/><text x="40.1237%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (7 samples, 0.09%)</title><rect x="41.5540%" y="245" width="0.0884%" height="15" fill="rgb(220,39,43)" fg:x="3289" fg:w="7"/><text x="41.8040%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="42.3373%" y="245" width="0.0379%" height="15" fill="rgb(229,68,48)" fg:x="3351" fg:w="3"/><text x="42.5873%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.10%)</title><rect x="42.5142%" y="229" width="0.1011%" height="15" fill="rgb(252,8,32)" fg:x="3365" fg:w="8"/><text x="42.7642%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (24 samples, 0.30%)</title><rect x="42.3752%" y="245" width="0.3032%" height="15" fill="rgb(223,20,43)" fg:x="3354" fg:w="24"/><text x="42.6252%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (5 samples, 0.06%)</title><rect x="42.6153%" y="229" width="0.0632%" height="15" fill="rgb(229,81,49)" fg:x="3373" fg:w="5"/><text x="42.8653%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (15 samples, 0.19%)</title><rect x="42.7290%" y="229" width="0.1895%" height="15" fill="rgb(236,28,36)" fg:x="3382" fg:w="15"/><text x="42.9790%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (4 samples, 0.05%)</title><rect x="42.8680%" y="213" width="0.0505%" height="15" fill="rgb(249,185,26)" fg:x="3393" fg:w="4"/><text x="43.1180%" y="223.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.01%)</title><rect x="42.9185%" y="229" width="0.0126%" height="15" fill="rgb(249,174,33)" fg:x="3397" fg:w="1"/><text x="43.1685%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="43.6766%" y="213" width="0.0253%" height="15" fill="rgb(233,201,37)" fg:x="3457" fg:w="2"/><text x="43.9266%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (11 samples, 0.14%)</title><rect x="43.7018%" y="213" width="0.1390%" height="15" fill="rgb(221,78,26)" fg:x="3459" fg:w="11"/><text x="43.9518%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="43.7903%" y="197" width="0.0505%" height="15" fill="rgb(250,127,30)" fg:x="3466" fg:w="4"/><text x="44.0403%" y="207.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (2 samples, 0.03%)</title><rect x="45.1800%" y="197" width="0.0253%" height="15" fill="rgb(230,49,44)" fg:x="3576" fg:w="2"/><text x="45.4300%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (189 samples, 2.39%)</title><rect x="45.2053%" y="197" width="2.3879%" height="15" fill="rgb(229,67,23)" fg:x="3578" fg:w="189"/><text x="45.4553%" y="207.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 1.30%)</title><rect x="46.2919%" y="181" width="1.3013%" height="15" fill="rgb(249,83,47)" fg:x="3664" fg:w="103"/><text x="46.5419%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (12 samples, 0.15%)</title><rect x="47.5932%" y="197" width="0.1516%" height="15" fill="rgb(215,43,3)" fg:x="3767" fg:w="12"/><text x="47.8432%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (33 samples, 0.42%)</title><rect x="47.7448%" y="197" width="0.4169%" height="15" fill="rgb(238,154,13)" fg:x="3779" fg:w="33"/><text x="47.9948%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (6 samples, 0.08%)</title><rect x="48.0859%" y="181" width="0.0758%" height="15" fill="rgb(219,56,2)" fg:x="3806" fg:w="6"/><text x="48.3359%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get_mut (471 samples, 5.95%)</title><rect x="42.6785%" y="245" width="5.9507%" height="15" fill="rgb(233,0,4)" fg:x="3378" fg:w="471"/><text x="42.9285%" y="255.50">alloc::c..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (451 samples, 5.70%)</title><rect x="42.9311%" y="229" width="5.6980%" height="15" fill="rgb(235,30,7)" fg:x="3398" fg:w="451"/><text x="43.1811%" y="239.50">alloc::..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (379 samples, 4.79%)</title><rect x="43.8408%" y="213" width="4.7884%" height="15" fill="rgb(250,79,13)" fg:x="3470" fg:w="379"/><text x="44.0908%" y="223.50">alloc:..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (37 samples, 0.47%)</title><rect x="48.1617%" y="197" width="0.4675%" height="15" fill="rgb(211,146,34)" fg:x="3812" fg:w="37"/><text x="48.4117%" y="207.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.01%)</title><rect x="48.6292%" y="245" width="0.0126%" height="15" fill="rgb(228,22,38)" fg:x="3849" fg:w="1"/><text x="48.8792%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (1 samples, 0.01%)</title><rect x="49.3746%" y="213" width="0.0126%" height="15" fill="rgb(235,168,5)" fg:x="3908" fg:w="1"/><text x="49.6246%" y="223.50"></text></g><g><title>DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="49.4757%" y="165" width="0.0126%" height="15" fill="rgb(221,155,16)" fg:x="3916" fg:w="1"/><text x="49.7257%" y="175.50"></text></g><g><title>_malloc_zone_malloc (7 samples, 0.09%)</title><rect x="49.4883%" y="165" width="0.0884%" height="15" fill="rgb(215,215,53)" fg:x="3917" fg:w="7"/><text x="49.7383%" y="175.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (23 samples, 0.29%)</title><rect x="49.3367%" y="229" width="0.2906%" height="15" fill="rgb(223,4,10)" fg:x="3905" fg:w="23"/><text x="49.5867%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (19 samples, 0.24%)</title><rect x="49.3872%" y="213" width="0.2401%" height="15" fill="rgb(234,103,6)" fg:x="3909" fg:w="19"/><text x="49.6372%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (18 samples, 0.23%)</title><rect x="49.3999%" y="197" width="0.2274%" height="15" fill="rgb(227,97,0)" fg:x="3910" fg:w="18"/><text x="49.6499%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.15%)</title><rect x="49.4757%" y="181" width="0.1516%" height="15" fill="rgb(234,150,53)" fg:x="3916" fg:w="12"/><text x="49.7257%" y="191.50"></text></g><g><title>nanov2_malloc_type (4 samples, 0.05%)</title><rect x="49.5768%" y="165" width="0.0505%" height="15" fill="rgb(228,201,54)" fg:x="3924" fg:w="4"/><text x="49.8268%" y="175.50"></text></g><g><title>nanov2_allocate_outlined (1 samples, 0.01%)</title><rect x="49.6147%" y="149" width="0.0126%" height="15" fill="rgb(222,22,37)" fg:x="3927" fg:w="1"/><text x="49.8647%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (79 samples, 1.00%)</title><rect x="48.6418%" y="245" width="0.9981%" height="15" fill="rgb(237,53,32)" fg:x="3850" fg:w="79"/><text x="48.8918%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (1 samples, 0.01%)</title><rect x="49.6273%" y="229" width="0.0126%" height="15" fill="rgb(233,25,53)" fg:x="3928" fg:w="1"/><text x="49.8773%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.04%)</title><rect x="49.6399%" y="245" width="0.0379%" height="15" fill="rgb(210,40,34)" fg:x="3929" fg:w="3"/><text x="49.8899%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (10 samples, 0.13%)</title><rect x="49.6778%" y="245" width="0.1263%" height="15" fill="rgb(241,220,44)" fg:x="3932" fg:w="10"/><text x="49.9278%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (9 samples, 0.11%)</title><rect x="49.6905%" y="229" width="0.1137%" height="15" fill="rgb(235,28,35)" fg:x="3933" fg:w="9"/><text x="49.9405%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (11 samples, 0.14%)</title><rect x="49.8042%" y="245" width="0.1390%" height="15" fill="rgb(210,56,17)" fg:x="3942" fg:w="11"/><text x="50.0542%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (4 samples, 0.05%)</title><rect x="49.8926%" y="229" width="0.0505%" height="15" fill="rgb(224,130,29)" fg:x="3949" fg:w="4"/><text x="50.1426%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="49.9179%" y="213" width="0.0253%" height="15" fill="rgb(235,212,8)" fg:x="3951" fg:w="2"/><text x="50.1679%" y="223.50"></text></g><g><title>bitbeat::handle_send (662 samples, 8.36%)</title><rect x="41.6425%" y="261" width="8.3639%" height="15" fill="rgb(223,33,50)" fg:x="3296" fg:w="662"/><text x="41.8925%" y="271.50">bitbeat::han..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (5 samples, 0.06%)</title><rect x="49.9431%" y="245" width="0.0632%" height="15" fill="rgb(219,149,13)" fg:x="3953" fg:w="5"/><text x="50.1931%" y="255.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (80 samples, 1.01%)</title><rect x="54.0114%" y="245" width="1.0107%" height="15" fill="rgb(250,156,29)" fg:x="4275" fg:w="80"/><text x="54.2614%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T (64 samples, 0.81%)</title><rect x="54.2135%" y="229" width="0.8086%" height="15" fill="rgb(216,193,19)" fg:x="4291" fg:w="64"/><text x="54.4635%" y="239.50"></text></g><g><title> N]&gt;::try_from (64 samples, 0.81%)</title><rect x="54.2135%" y="213" width="0.8086%" height="15" fill="rgb(216,135,14)" fg:x="4291" fg:w="64"/><text x="54.4635%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (35 samples, 0.44%)</title><rect x="55.0221%" y="245" width="0.4422%" height="15" fill="rgb(241,47,5)" fg:x="4355" fg:w="35"/><text x="55.2721%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="55.4390%" y="229" width="0.0253%" height="15" fill="rgb(233,42,35)" fg:x="4388" fg:w="2"/><text x="55.6890%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.16%)</title><rect x="55.4643%" y="245" width="0.1642%" height="15" fill="rgb(231,13,6)" fg:x="4390" fg:w="13"/><text x="55.7143%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (28 samples, 0.35%)</title><rect x="55.6917%" y="229" width="0.3538%" height="15" fill="rgb(207,181,40)" fg:x="4408" fg:w="28"/><text x="55.9417%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (23 samples, 0.29%)</title><rect x="55.7549%" y="213" width="0.2906%" height="15" fill="rgb(254,173,49)" fg:x="4413" fg:w="23"/><text x="56.0049%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.44%)</title><rect x="55.6286%" y="245" width="0.4422%" height="15" fill="rgb(221,1,38)" fg:x="4403" fg:w="35"/><text x="55.8786%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.03%)</title><rect x="56.0455%" y="229" width="0.0253%" height="15" fill="rgb(206,124,46)" fg:x="4436" fg:w="2"/><text x="56.2955%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.06%)</title><rect x="57.9280%" y="229" width="0.0632%" height="15" fill="rgb(249,21,11)" fg:x="4585" fg:w="5"/><text x="58.1780%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (230 samples, 2.91%)</title><rect x="56.0708%" y="245" width="2.9059%" height="15" fill="rgb(222,201,40)" fg:x="4438" fg:w="230"/><text x="56.3208%" y="255.50">&lt;a..</text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (78 samples, 0.99%)</title><rect x="57.9912%" y="229" width="0.9855%" height="15" fill="rgb(235,61,29)" fg:x="4590" fg:w="78"/><text x="58.2412%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (51 samples, 0.64%)</title><rect x="58.9766%" y="245" width="0.6443%" height="15" fill="rgb(219,207,3)" fg:x="4668" fg:w="51"/><text x="59.2266%" y="255.50"></text></g><g><title>DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="59.6210%" y="245" width="0.0126%" height="15" fill="rgb(222,56,46)" fg:x="4719" fg:w="1"/><text x="59.8710%" y="255.50"></text></g><g><title>_platform_memmove (13 samples, 0.16%)</title><rect x="59.6336%" y="245" width="0.1642%" height="15" fill="rgb(239,76,54)" fg:x="4720" fg:w="13"/><text x="59.8836%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.01%)</title><rect x="59.7979%" y="245" width="0.0126%" height="15" fill="rgb(231,124,27)" fg:x="4733" fg:w="1"/><text x="60.0479%" y="255.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (36 samples, 0.45%)</title><rect x="60.1642%" y="229" width="0.4548%" height="15" fill="rgb(249,195,6)" fg:x="4762" fg:w="36"/><text x="60.4142%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (6 samples, 0.08%)</title><rect x="60.5433%" y="213" width="0.0758%" height="15" fill="rgb(237,174,47)" fg:x="4792" fg:w="6"/><text x="60.7933%" y="223.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (5 samples, 0.06%)</title><rect x="60.6191%" y="229" width="0.0632%" height="15" fill="rgb(206,201,31)" fg:x="4798" fg:w="5"/><text x="60.8691%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.03%)</title><rect x="61.7814%" y="197" width="0.0253%" height="15" fill="rgb(231,57,52)" fg:x="4890" fg:w="2"/><text x="62.0314%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.64%)</title><rect x="61.8067%" y="197" width="0.6443%" height="15" fill="rgb(248,177,22)" fg:x="4892" fg:w="51"/><text x="62.0567%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.42%)</title><rect x="62.0341%" y="181" width="0.4169%" height="15" fill="rgb(215,211,37)" fg:x="4910" fg:w="33"/><text x="62.2841%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (9 samples, 0.11%)</title><rect x="62.4510%" y="197" width="0.1137%" height="15" fill="rgb(241,128,51)" fg:x="4943" fg:w="9"/><text x="62.7010%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (58 samples, 0.73%)</title><rect x="62.5648%" y="197" width="0.7328%" height="15" fill="rgb(227,165,31)" fg:x="4952" fg:w="58"/><text x="62.8148%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (6 samples, 0.08%)</title><rect x="63.2217%" y="181" width="0.0758%" height="15" fill="rgb(228,167,24)" fg:x="5004" fg:w="6"/><text x="63.4717%" y="191.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (22 samples, 0.28%)</title><rect x="63.4618%" y="165" width="0.2780%" height="15" fill="rgb(228,143,12)" fg:x="5023" fg:w="22"/><text x="63.7118%" y="175.50"></text></g><g><title>alloc::str::_&lt;impl core::borrow::Borrow&lt;str&gt; for alloc::string::String&gt;::borrow (37 samples, 0.47%)</title><rect x="63.2975%" y="197" width="0.4675%" height="15" fill="rgb(249,149,8)" fg:x="5010" fg:w="37"/><text x="63.5475%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (34 samples, 0.43%)</title><rect x="63.3354%" y="181" width="0.4296%" height="15" fill="rgb(243,35,44)" fg:x="5013" fg:w="34"/><text x="63.5854%" y="191.50"></text></g><g><title>core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFull&gt;::index (2 samples, 0.03%)</title><rect x="63.7397%" y="165" width="0.0253%" height="15" fill="rgb(246,89,9)" fg:x="5045" fg:w="2"/><text x="63.9897%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (359 samples, 4.54%)</title><rect x="59.8105%" y="245" width="4.5357%" height="15" fill="rgb(233,213,13)" fg:x="4734" fg:w="359"/><text x="60.0605%" y="255.50">alloc..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (290 samples, 3.66%)</title><rect x="60.6822%" y="229" width="3.6639%" height="15" fill="rgb(233,141,41)" fg:x="4803" fg:w="290"/><text x="60.9322%" y="239.50">allo..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (242 samples, 3.06%)</title><rect x="61.2887%" y="213" width="3.0575%" height="15" fill="rgb(239,167,4)" fg:x="4851" fg:w="242"/><text x="61.5387%" y="223.50">all..</text></g><g><title>core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (46 samples, 0.58%)</title><rect x="63.7650%" y="197" width="0.5812%" height="15" fill="rgb(209,217,16)" fg:x="5047" fg:w="46"/><text x="64.0150%" y="207.50"></text></g><g><title>&lt;A as core::slice::cmp::SliceOrd&gt;::compare (39 samples, 0.49%)</title><rect x="63.8534%" y="181" width="0.4927%" height="15" fill="rgb(219,88,35)" fg:x="5054" fg:w="39"/><text x="64.1034%" y="191.50"></text></g><g><title>_platform_memcmp (9 samples, 0.11%)</title><rect x="64.2325%" y="165" width="0.1137%" height="15" fill="rgb(220,193,23)" fg:x="5084" fg:w="9"/><text x="64.4825%" y="175.50"></text></g><g><title>_platform_memmove (5 samples, 0.06%)</title><rect x="64.5610%" y="229" width="0.0632%" height="15" fill="rgb(230,90,52)" fg:x="5110" fg:w="5"/><text x="64.8110%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="64.7884%" y="213" width="0.0126%" height="15" fill="rgb(252,106,19)" fg:x="5128" fg:w="1"/><text x="65.0384%" y="223.50"></text></g><g><title>_platform_memmove (7 samples, 0.09%)</title><rect x="64.8010%" y="213" width="0.0884%" height="15" fill="rgb(206,74,20)" fg:x="5129" fg:w="7"/><text x="65.0510%" y="223.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.01%)</title><rect x="64.8895%" y="213" width="0.0126%" height="15" fill="rgb(230,138,44)" fg:x="5136" fg:w="1"/><text x="65.1395%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="66.1402%" y="197" width="0.0126%" height="15" fill="rgb(235,182,43)" fg:x="5235" fg:w="1"/><text x="66.3902%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (10 samples, 0.13%)</title><rect x="66.1529%" y="197" width="0.1263%" height="15" fill="rgb(242,16,51)" fg:x="5236" fg:w="10"/><text x="66.4029%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (4 samples, 0.05%)</title><rect x="66.2287%" y="181" width="0.0505%" height="15" fill="rgb(248,9,4)" fg:x="5242" fg:w="4"/><text x="66.4787%" y="191.50"></text></g><g><title>&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (3 samples, 0.04%)</title><rect x="67.4416%" y="181" width="0.0379%" height="15" fill="rgb(210,31,22)" fg:x="5338" fg:w="3"/><text x="67.6916%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (278 samples, 3.51%)</title><rect x="67.4795%" y="181" width="3.5123%" height="15" fill="rgb(239,54,39)" fg:x="5341" fg:w="278"/><text x="67.7295%" y="191.50">&lt;co..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 1.82%)</title><rect x="69.1725%" y="165" width="1.8193%" height="15" fill="rgb(230,99,41)" fg:x="5475" fg:w="144"/><text x="69.4225%" y="175.50">&lt;..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.03%)</title><rect x="70.9918%" y="181" width="0.0253%" height="15" fill="rgb(253,106,12)" fg:x="5619" fg:w="2"/><text x="71.2418%" y="191.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (36 samples, 0.45%)</title><rect x="71.0171%" y="181" width="0.4548%" height="15" fill="rgb(213,46,41)" fg:x="5621" fg:w="36"/><text x="71.2671%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (9 samples, 0.11%)</title><rect x="71.3582%" y="165" width="0.1137%" height="15" fill="rgb(215,133,35)" fg:x="5648" fg:w="9"/><text x="71.6082%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (569 samples, 7.19%)</title><rect x="64.6241%" y="229" width="7.1889%" height="15" fill="rgb(213,28,5)" fg:x="5115" fg:w="569"/><text x="64.8741%" y="239.50">alloc::col..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (547 samples, 6.91%)</title><rect x="64.9021%" y="213" width="6.9109%" height="15" fill="rgb(215,77,49)" fg:x="5137" fg:w="547"/><text x="65.1521%" y="223.50">alloc::co..</text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (438 samples, 5.53%)</title><rect x="66.2792%" y="197" width="5.5338%" height="15" fill="rgb(248,100,22)" fg:x="5246" fg:w="438"/><text x="66.5292%" y="207.50">alloc::..</text></g><g><title>core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (27 samples, 0.34%)</title><rect x="71.4719%" y="181" width="0.3411%" height="15" fill="rgb(208,67,9)" fg:x="5657" fg:w="27"/><text x="71.7219%" y="191.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::into_mut (7 samples, 0.09%)</title><rect x="71.8130%" y="229" width="0.0884%" height="15" fill="rgb(219,133,21)" fg:x="5684" fg:w="7"/><text x="72.0630%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (3 samples, 0.04%)</title><rect x="71.8636%" y="213" width="0.0379%" height="15" fill="rgb(246,46,29)" fg:x="5688" fg:w="3"/><text x="72.1136%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (1 samples, 0.01%)</title><rect x="72.0152%" y="213" width="0.0126%" height="15" fill="rgb(246,185,52)" fg:x="5700" fg:w="1"/><text x="72.2652%" y="223.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (3 samples, 0.04%)</title><rect x="72.0278%" y="213" width="0.0379%" height="15" fill="rgb(252,136,11)" fg:x="5701" fg:w="3"/><text x="72.2778%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="72.3310%" y="197" width="0.0253%" height="15" fill="rgb(219,138,53)" fg:x="5725" fg:w="2"/><text x="72.5810%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (2 samples, 0.03%)</title><rect x="72.4195%" y="165" width="0.0253%" height="15" fill="rgb(211,51,23)" fg:x="5732" fg:w="2"/><text x="72.6695%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (3 samples, 0.04%)</title><rect x="72.4447%" y="149" width="0.0379%" height="15" fill="rgb(247,221,28)" fg:x="5734" fg:w="3"/><text x="72.6947%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.01%)</title><rect x="72.4700%" y="133" width="0.0126%" height="15" fill="rgb(251,222,45)" fg:x="5736" fg:w="1"/><text x="72.7200%" y="143.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::correct_childrens_parent_links (6 samples, 0.08%)</title><rect x="72.4447%" y="165" width="0.0758%" height="15" fill="rgb(217,162,53)" fg:x="5734" fg:w="6"/><text x="72.6947%" y="175.50"></text></g><g><title>core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.04%)</title><rect x="72.4826%" y="149" width="0.0379%" height="15" fill="rgb(229,93,14)" fg:x="5737" fg:w="3"/><text x="72.7326%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.04%)</title><rect x="72.4826%" y="133" width="0.0379%" height="15" fill="rgb(209,67,49)" fg:x="5737" fg:w="3"/><text x="72.7326%" y="143.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.04%)</title><rect x="72.4826%" y="117" width="0.0379%" height="15" fill="rgb(213,87,29)" fg:x="5737" fg:w="3"/><text x="72.7326%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (21 samples, 0.27%)</title><rect x="72.3563%" y="197" width="0.2653%" height="15" fill="rgb(205,151,52)" fg:x="5727" fg:w="21"/><text x="72.6063%" y="207.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (20 samples, 0.25%)</title><rect x="72.3689%" y="181" width="0.2527%" height="15" fill="rgb(253,215,39)" fg:x="5728" fg:w="20"/><text x="72.6189%" y="191.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (8 samples, 0.10%)</title><rect x="72.5205%" y="165" width="0.1011%" height="15" fill="rgb(221,220,41)" fg:x="5740" fg:w="8"/><text x="72.7705%" y="175.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.03%)</title><rect x="73.2407%" y="181" width="0.0253%" height="15" fill="rgb(218,133,21)" fg:x="5797" fg:w="2"/><text x="73.4907%" y="191.50"></text></g><g><title>_platform_memmove (9 samples, 0.11%)</title><rect x="73.2660%" y="181" width="0.1137%" height="15" fill="rgb(221,193,43)" fg:x="5799" fg:w="9"/><text x="73.5160%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (20 samples, 0.25%)</title><rect x="73.6576%" y="165" width="0.2527%" height="15" fill="rgb(240,128,52)" fg:x="5830" fg:w="20"/><text x="73.9076%" y="175.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (68 samples, 0.86%)</title><rect x="73.3797%" y="181" width="0.8591%" height="15" fill="rgb(253,114,12)" fg:x="5808" fg:w="68"/><text x="73.6297%" y="191.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (26 samples, 0.33%)</title><rect x="73.9103%" y="165" width="0.3285%" height="15" fill="rgb(215,223,47)" fg:x="5850" fg:w="26"/><text x="74.1603%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut::precondition_check (1 samples, 0.01%)</title><rect x="74.3399%" y="149" width="0.0126%" height="15" fill="rgb(248,225,23)" fg:x="5884" fg:w="1"/><text x="74.5899%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.03%)</title><rect x="74.3525%" y="149" width="0.0253%" height="15" fill="rgb(250,108,0)" fg:x="5885" fg:w="2"/><text x="74.6025%" y="159.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (22 samples, 0.28%)</title><rect x="74.2514%" y="165" width="0.2780%" height="15" fill="rgb(228,208,7)" fg:x="5877" fg:w="22"/><text x="74.5014%" y="175.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (12 samples, 0.15%)</title><rect x="74.3778%" y="149" width="0.1516%" height="15" fill="rgb(244,45,10)" fg:x="5887" fg:w="12"/><text x="74.6278%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (11 samples, 0.14%)</title><rect x="74.3904%" y="133" width="0.1390%" height="15" fill="rgb(207,125,25)" fg:x="5888" fg:w="11"/><text x="74.6404%" y="143.50"></text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (2 samples, 0.03%)</title><rect x="74.5041%" y="117" width="0.0253%" height="15" fill="rgb(210,195,18)" fg:x="5897" fg:w="2"/><text x="74.7541%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.03%)</title><rect x="74.5925%" y="117" width="0.0253%" height="15" fill="rgb(249,80,12)" fg:x="5904" fg:w="2"/><text x="74.8425%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.03%)</title><rect x="74.5925%" y="101" width="0.0253%" height="15" fill="rgb(221,65,9)" fg:x="5904" fg:w="2"/><text x="74.8425%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.01%)</title><rect x="74.6052%" y="85" width="0.0126%" height="15" fill="rgb(235,49,36)" fg:x="5905" fg:w="1"/><text x="74.8552%" y="95.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (1 samples, 0.01%)</title><rect x="74.6052%" y="69" width="0.0126%" height="15" fill="rgb(225,32,20)" fg:x="5905" fg:w="1"/><text x="74.8552%" y="79.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.01%)</title><rect x="74.6178%" y="117" width="0.0126%" height="15" fill="rgb(215,141,46)" fg:x="5906" fg:w="1"/><text x="74.8678%" y="127.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (7 samples, 0.09%)</title><rect x="74.5546%" y="133" width="0.0884%" height="15" fill="rgb(250,160,47)" fg:x="5901" fg:w="7"/><text x="74.8046%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="74.6304%" y="117" width="0.0126%" height="15" fill="rgb(216,222,40)" fg:x="5907" fg:w="1"/><text x="74.8804%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (33 samples, 0.42%)</title><rect x="74.2388%" y="181" width="0.4169%" height="15" fill="rgb(234,217,39)" fg:x="5876" fg:w="33"/><text x="74.4888%" y="191.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (10 samples, 0.13%)</title><rect x="74.5294%" y="165" width="0.1263%" height="15" fill="rgb(207,178,40)" fg:x="5899" fg:w="10"/><text x="74.7794%" y="175.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (8 samples, 0.10%)</title><rect x="74.5546%" y="149" width="0.1011%" height="15" fill="rgb(221,136,13)" fg:x="5901" fg:w="8"/><text x="74.8046%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="74.6431%" y="133" width="0.0126%" height="15" fill="rgb(249,199,10)" fg:x="5908" fg:w="1"/><text x="74.8931%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (1 samples, 0.01%)</title><rect x="74.6431%" y="117" width="0.0126%" height="15" fill="rgb(249,222,13)" fg:x="5908" fg:w="1"/><text x="74.8931%" y="127.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (162 samples, 2.05%)</title><rect x="72.6216%" y="197" width="2.0467%" height="15" fill="rgb(244,185,38)" fg:x="5748" fg:w="162"/><text x="72.8716%" y="207.50">a..</text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.01%)</title><rect x="74.6557%" y="181" width="0.0126%" height="15" fill="rgb(236,202,9)" fg:x="5909" fg:w="1"/><text x="74.9057%" y="191.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (1 samples, 0.01%)</title><rect x="74.6684%" y="197" width="0.0126%" height="15" fill="rgb(250,229,37)" fg:x="5910" fg:w="1"/><text x="74.9184%" y="207.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (221 samples, 2.79%)</title><rect x="71.9015%" y="229" width="2.7922%" height="15" fill="rgb(206,174,23)" fg:x="5691" fg:w="221"/><text x="72.1515%" y="239.50">al..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (208 samples, 2.63%)</title><rect x="72.0657%" y="213" width="2.6279%" height="15" fill="rgb(211,33,43)" fg:x="5704" fg:w="208"/><text x="72.3157%" y="223.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.01%)</title><rect x="74.6810%" y="197" width="0.0126%" height="15" fill="rgb(245,58,50)" fg:x="5911" fg:w="1"/><text x="74.9310%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (823 samples, 10.40%)</title><rect x="64.3462%" y="245" width="10.3980%" height="15" fill="rgb(244,68,36)" fg:x="5093" fg:w="823"/><text x="64.5962%" y="255.50">alloc::collecti..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.05%)</title><rect x="74.6936%" y="229" width="0.0505%" height="15" fill="rgb(232,229,15)" fg:x="5912" fg:w="4"/><text x="74.9436%" y="239.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert_entry (1 samples, 0.01%)</title><rect x="74.7442%" y="245" width="0.0126%" height="15" fill="rgb(254,30,23)" fg:x="5916" fg:w="1"/><text x="74.9942%" y="255.50"></text></g><g><title>alloc::collections::btree::search::_&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (4 samples, 0.05%)</title><rect x="74.7568%" y="245" width="0.0505%" height="15" fill="rgb(235,160,14)" fg:x="5917" fg:w="4"/><text x="75.0068%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (13 samples, 0.16%)</title><rect x="74.8073%" y="245" width="0.1642%" height="15" fill="rgb(212,155,44)" fg:x="5921" fg:w="13"/><text x="75.0573%" y="255.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.04%)</title><rect x="75.0853%" y="229" width="0.0379%" height="15" fill="rgb(226,2,50)" fg:x="5943" fg:w="3"/><text x="75.3353%" y="239.50"></text></g><g><title>_platform_memmove (26 samples, 0.33%)</title><rect x="75.1232%" y="229" width="0.3285%" height="15" fill="rgb(234,177,6)" fg:x="5946" fg:w="26"/><text x="75.3732%" y="239.50"></text></g><g><title>DYLD-STUB$$malloc (2 samples, 0.03%)</title><rect x="75.8939%" y="181" width="0.0253%" height="15" fill="rgb(217,24,9)" fg:x="6007" fg:w="2"/><text x="76.1439%" y="191.50"></text></g><g><title>__rdl_alloc (3 samples, 0.04%)</title><rect x="75.9191%" y="181" width="0.0379%" height="15" fill="rgb(220,13,46)" fg:x="6009" fg:w="3"/><text x="76.1691%" y="191.50"></text></g><g><title>_malloc_zone_malloc (5 samples, 0.06%)</title><rect x="75.9570%" y="181" width="0.0632%" height="15" fill="rgb(239,221,27)" fg:x="6012" fg:w="5"/><text x="76.2070%" y="191.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (40 samples, 0.51%)</title><rect x="76.0202%" y="181" width="0.5054%" height="15" fill="rgb(222,198,25)" fg:x="6017" fg:w="40"/><text x="76.2702%" y="191.50"></text></g><g><title>nanov2_malloc_type (4 samples, 0.05%)</title><rect x="76.5256%" y="181" width="0.0505%" height="15" fill="rgb(211,99,13)" fg:x="6057" fg:w="4"/><text x="76.7756%" y="191.50"></text></g><g><title>tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="76.5888%" y="165" width="0.0379%" height="15" fill="rgb(232,111,31)" fg:x="6062" fg:w="3"/><text x="76.8388%" y="175.50"></text></g><g><title>rack_get_thread_index (8 samples, 0.10%)</title><rect x="76.7025%" y="149" width="0.1011%" height="15" fill="rgb(245,82,37)" fg:x="6071" fg:w="8"/><text x="76.9525%" y="159.50"></text></g><g><title>szone_malloc_should_clear (45 samples, 0.57%)</title><rect x="76.5761%" y="181" width="0.5685%" height="15" fill="rgb(227,149,46)" fg:x="6061" fg:w="45"/><text x="76.8261%" y="191.50"></text></g><g><title>tiny_malloc_should_clear (41 samples, 0.52%)</title><rect x="76.6267%" y="165" width="0.5180%" height="15" fill="rgb(218,36,50)" fg:x="6065" fg:w="41"/><text x="76.8767%" y="175.50"></text></g><g><title>tiny_malloc_from_free_list (27 samples, 0.34%)</title><rect x="76.8035%" y="149" width="0.3411%" height="15" fill="rgb(226,80,48)" fg:x="6079" fg:w="27"/><text x="77.0535%" y="159.50"></text></g><g><title>_tiny_check_and_zero_inline_meta_from_freelist (3 samples, 0.04%)</title><rect x="77.1068%" y="133" width="0.0379%" height="15" fill="rgb(238,224,15)" fg:x="6103" fg:w="3"/><text x="77.3568%" y="143.50"></text></g><g><title>alloc::alloc::alloc (105 samples, 1.33%)</title><rect x="75.8560%" y="197" width="1.3266%" height="15" fill="rgb(241,136,10)" fg:x="6004" fg:w="105"/><text x="76.1060%" y="207.50"></text></g><g><title>tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="77.1447%" y="181" width="0.0379%" height="15" fill="rgb(208,32,45)" fg:x="6106" fg:w="3"/><text x="77.3947%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (122 samples, 1.54%)</title><rect x="75.6791%" y="213" width="1.5414%" height="15" fill="rgb(207,135,9)" fg:x="5990" fg:w="122"/><text x="75.9291%" y="223.50"></text></g><g><title>nanov2_malloc_type (3 samples, 0.04%)</title><rect x="77.1826%" y="197" width="0.0379%" height="15" fill="rgb(206,86,44)" fg:x="6109" fg:w="3"/><text x="77.4326%" y="207.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new (185 samples, 2.34%)</title><rect x="74.9716%" y="245" width="2.3373%" height="15" fill="rgb(245,177,15)" fg:x="5934" fg:w="185"/><text x="75.2216%" y="255.50">a..</text></g><g><title>alloc::alloc::exchange_malloc (147 samples, 1.86%)</title><rect x="75.4517%" y="229" width="1.8572%" height="15" fill="rgb(206,64,50)" fg:x="5972" fg:w="147"/><text x="75.7017%" y="239.50">a..</text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (7 samples, 0.09%)</title><rect x="77.2205%" y="213" width="0.0884%" height="15" fill="rgb(234,36,40)" fg:x="6112" fg:w="7"/><text x="77.4705%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (7 samples, 0.09%)</title><rect x="77.2205%" y="197" width="0.0884%" height="15" fill="rgb(213,64,8)" fg:x="6112" fg:w="7"/><text x="77.4705%" y="207.50"></text></g><g><title>DYLD-STUB$$memcpy (3 samples, 0.04%)</title><rect x="77.6753%" y="213" width="0.0379%" height="15" fill="rgb(210,75,36)" fg:x="6148" fg:w="3"/><text x="77.9253%" y="223.50"></text></g><g><title>_platform_memmove (10 samples, 0.13%)</title><rect x="77.7132%" y="213" width="0.1263%" height="15" fill="rgb(229,88,21)" fg:x="6151" fg:w="10"/><text x="77.9632%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3 samples, 0.04%)</title><rect x="77.8395%" y="213" width="0.0379%" height="15" fill="rgb(252,204,47)" fg:x="6161" fg:w="3"/><text x="78.0895%" y="223.50"></text></g><g><title>DYLD-STUB$$malloc (2 samples, 0.03%)</title><rect x="79.9368%" y="181" width="0.0253%" height="15" fill="rgb(208,77,27)" fg:x="6327" fg:w="2"/><text x="80.1868%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="79.9621%" y="181" width="0.0126%" height="15" fill="rgb(221,76,26)" fg:x="6329" fg:w="1"/><text x="80.2121%" y="191.50"></text></g><g><title>_malloc_zone_malloc (16 samples, 0.20%)</title><rect x="79.9747%" y="181" width="0.2021%" height="15" fill="rgb(225,139,18)" fg:x="6330" fg:w="16"/><text x="80.2247%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (80 samples, 1.01%)</title><rect x="79.5578%" y="197" width="1.0107%" height="15" fill="rgb(230,137,11)" fg:x="6297" fg:w="80"/><text x="79.8078%" y="207.50"></text></g><g><title>nanov2_malloc_type (31 samples, 0.39%)</title><rect x="80.1769%" y="181" width="0.3917%" height="15" fill="rgb(212,28,1)" fg:x="6346" fg:w="31"/><text x="80.4269%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (218 samples, 2.75%)</title><rect x="77.8774%" y="213" width="2.7543%" height="15" fill="rgb(248,164,17)" fg:x="6164" fg:w="218"/><text x="78.1274%" y="223.50">al..</text></g><g><title>core::hint::assert_unchecked::precondition_check (5 samples, 0.06%)</title><rect x="80.5685%" y="197" width="0.0632%" height="15" fill="rgb(222,171,42)" fg:x="6377" fg:w="5"/><text x="80.8185%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (401 samples, 5.07%)</title><rect x="77.3594%" y="229" width="5.0663%" height="15" fill="rgb(243,84,45)" fg:x="6123" fg:w="401"/><text x="77.6094%" y="239.50">&lt;T as ..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (142 samples, 1.79%)</title><rect x="80.6317%" y="213" width="1.7941%" height="15" fill="rgb(252,49,23)" fg:x="6382" fg:w="142"/><text x="80.8817%" y="223.50">c..</text></g><g><title>core::ub_checks::maybe_is_nonoverlapping::runtime (37 samples, 0.47%)</title><rect x="81.9583%" y="197" width="0.4675%" height="15" fill="rgb(215,19,7)" fg:x="6487" fg:w="37"/><text x="82.2083%" y="207.50"></text></g><g><title>_platform_memmove (2 samples, 0.03%)</title><rect x="82.4258%" y="229" width="0.0253%" height="15" fill="rgb(238,81,41)" fg:x="6524" fg:w="2"/><text x="82.6758%" y="239.50"></text></g><g><title>alloc::slice::_&lt;impl [T]&gt;::to_vec (410 samples, 5.18%)</title><rect x="77.3089%" y="245" width="5.1800%" height="15" fill="rgb(210,199,37)" fg:x="6119" fg:w="410"/><text x="77.5589%" y="255.50">alloc:..</text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.04%)</title><rect x="82.4510%" y="229" width="0.0379%" height="15" fill="rgb(244,192,49)" fg:x="6526" fg:w="3"/><text x="82.7010%" y="239.50"></text></g><g><title>alloc::string::String::as_str (39 samples, 0.49%)</title><rect x="82.4889%" y="245" width="0.4927%" height="15" fill="rgb(226,211,11)" fg:x="6529" fg:w="39"/><text x="82.7389%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (20 samples, 0.25%)</title><rect x="82.7290%" y="229" width="0.2527%" height="15" fill="rgb(236,162,54)" fg:x="6548" fg:w="20"/><text x="82.9790%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (13 samples, 0.16%)</title><rect x="83.2091%" y="229" width="0.1642%" height="15" fill="rgb(220,229,9)" fg:x="6586" fg:w="13"/><text x="83.4591%" y="239.50"></text></g><g><title>alloc::string::String::from_utf8 (47 samples, 0.59%)</title><rect x="82.9817%" y="245" width="0.5938%" height="15" fill="rgb(250,87,22)" fg:x="6568" fg:w="47"/><text x="83.2317%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (16 samples, 0.20%)</title><rect x="83.3733%" y="229" width="0.2021%" height="15" fill="rgb(239,43,17)" fg:x="6599" fg:w="16"/><text x="83.6233%" y="239.50"></text></g><g><title>DYLD-STUB$$memmove (1 samples, 0.01%)</title><rect x="83.8787%" y="229" width="0.0126%" height="15" fill="rgb(231,177,25)" fg:x="6639" fg:w="1"/><text x="84.1287%" y="239.50"></text></g><g><title>_platform_memmove (5 samples, 0.06%)</title><rect x="83.8913%" y="229" width="0.0632%" height="15" fill="rgb(219,179,1)" fg:x="6640" fg:w="5"/><text x="84.1413%" y="239.50"></text></g><g><title>_realloc (1 samples, 0.01%)</title><rect x="84.0682%" y="197" width="0.0126%" height="15" fill="rgb(238,219,53)" fg:x="6654" fg:w="1"/><text x="84.3182%" y="207.50"></text></g><g><title>DYLD-STUB$$realloc (2 samples, 0.03%)</title><rect x="84.0935%" y="181" width="0.0253%" height="15" fill="rgb(232,167,36)" fg:x="6656" fg:w="2"/><text x="84.3435%" y="191.50"></text></g><g><title>_nanov2_free (4 samples, 0.05%)</title><rect x="84.3714%" y="149" width="0.0505%" height="15" fill="rgb(244,19,51)" fg:x="6678" fg:w="4"/><text x="84.6214%" y="159.50"></text></g><g><title>DYLD-STUB$$_platform_memmove (3 samples, 0.04%)</title><rect x="84.5231%" y="133" width="0.0379%" height="15" fill="rgb(224,6,22)" fg:x="6690" fg:w="3"/><text x="84.7731%" y="143.50"></text></g><g><title>_nanov2_free (10 samples, 0.13%)</title><rect x="84.5610%" y="133" width="0.1263%" height="15" fill="rgb(224,145,5)" fg:x="6693" fg:w="10"/><text x="84.8110%" y="143.50"></text></g><g><title>_platform_memmove (2 samples, 0.03%)</title><rect x="84.6873%" y="133" width="0.0253%" height="15" fill="rgb(234,130,49)" fg:x="6703" fg:w="2"/><text x="84.9373%" y="143.50"></text></g><g><title>nanov2_malloc (15 samples, 0.19%)</title><rect x="84.7126%" y="133" width="0.1895%" height="15" fill="rgb(254,6,2)" fg:x="6705" fg:w="15"/><text x="84.9626%" y="143.50"></text></g><g><title>_malloc_zone_realloc (58 samples, 0.73%)</title><rect x="84.2325%" y="165" width="0.7328%" height="15" fill="rgb(208,96,46)" fg:x="6667" fg:w="58"/><text x="84.4825%" y="175.50"></text></g><g><title>nanov2_realloc (43 samples, 0.54%)</title><rect x="84.4220%" y="149" width="0.5433%" height="15" fill="rgb(239,3,39)" fg:x="6682" fg:w="43"/><text x="84.6720%" y="159.50"></text></g><g><title>nanov2_pointer_size (5 samples, 0.06%)</title><rect x="84.9021%" y="133" width="0.0632%" height="15" fill="rgb(233,210,1)" fg:x="6720" fg:w="5"/><text x="85.1521%" y="143.50"></text></g><g><title>nanov2_realloc (1 samples, 0.01%)</title><rect x="84.9653%" y="165" width="0.0126%" height="15" fill="rgb(244,137,37)" fg:x="6725" fg:w="1"/><text x="85.2153%" y="175.50"></text></g><g><title>_realloc (78 samples, 0.99%)</title><rect x="84.1188%" y="181" width="0.9855%" height="15" fill="rgb(240,136,2)" fg:x="6658" fg:w="78"/><text x="84.3688%" y="191.50"></text></g><g><title>nanov2_size (10 samples, 0.13%)</title><rect x="84.9779%" y="165" width="0.1263%" height="15" fill="rgb(239,18,37)" fg:x="6726" fg:w="10"/><text x="85.2279%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (87 samples, 1.10%)</title><rect x="84.0177%" y="213" width="1.0992%" height="15" fill="rgb(218,185,22)" fg:x="6650" fg:w="87"/><text x="84.2677%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (82 samples, 1.04%)</title><rect x="84.0809%" y="197" width="1.0360%" height="15" fill="rgb(225,218,4)" fg:x="6655" fg:w="82"/><text x="84.3309%" y="207.50"></text></g><g><title>nanov2_size (1 samples, 0.01%)</title><rect x="85.1042%" y="181" width="0.0126%" height="15" fill="rgb(230,182,32)" fg:x="6736" fg:w="1"/><text x="85.3542%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (93 samples, 1.17%)</title><rect x="83.9545%" y="229" width="1.1750%" height="15" fill="rgb(242,56,43)" fg:x="6645" fg:w="93"/><text x="84.2045%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="85.1169%" y="213" width="0.0126%" height="15" fill="rgb(233,99,24)" fg:x="6737" fg:w="1"/><text x="85.3669%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (134 samples, 1.69%)</title><rect x="83.5755%" y="245" width="1.6930%" height="15" fill="rgb(234,209,42)" fg:x="6615" fg:w="134"/><text x="83.8255%" y="255.50"></text></g><g><title>core::intrinsics::copy::precondition_check (11 samples, 0.14%)</title><rect x="85.1295%" y="229" width="0.1390%" height="15" fill="rgb(227,7,12)" fg:x="6738" fg:w="11"/><text x="85.3795%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.01%)</title><rect x="85.2685%" y="245" width="0.0126%" height="15" fill="rgb(245,203,43)" fg:x="6749" fg:w="1"/><text x="85.5185%" y="255.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (10 samples, 0.13%)</title><rect x="85.6601%" y="229" width="0.1263%" height="15" fill="rgb(238,205,33)" fg:x="6780" fg:w="10"/><text x="85.9101%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 1.00%)</title><rect x="85.7865%" y="229" width="0.9981%" height="15" fill="rgb(231,56,7)" fg:x="6790" fg:w="79"/><text x="86.0365%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 0.67%)</title><rect x="86.1150%" y="213" width="0.6696%" height="15" fill="rgb(244,186,29)" fg:x="6816" fg:w="53"/><text x="86.3650%" y="223.50"></text></g><g><title>DYLD-STUB$$memcpy (2 samples, 0.03%)</title><rect x="86.7846%" y="229" width="0.0253%" height="15" fill="rgb(234,111,31)" fg:x="6869" fg:w="2"/><text x="87.0346%" y="239.50"></text></g><g><title>DYLD-STUB$$memset (1 samples, 0.01%)</title><rect x="86.8099%" y="229" width="0.0126%" height="15" fill="rgb(241,149,10)" fg:x="6871" fg:w="1"/><text x="87.0599%" y="239.50"></text></g><g><title>_platform_memmove (28 samples, 0.35%)</title><rect x="86.8225%" y="229" width="0.3538%" height="15" fill="rgb(249,206,44)" fg:x="6872" fg:w="28"/><text x="87.0725%" y="239.50"></text></g><g><title>_platform_memset (4 samples, 0.05%)</title><rect x="87.1762%" y="229" width="0.0505%" height="15" fill="rgb(251,153,30)" fg:x="6900" fg:w="4"/><text x="87.4262%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (1 samples, 0.01%)</title><rect x="87.2268%" y="229" width="0.0126%" height="15" fill="rgb(239,152,38)" fg:x="6904" fg:w="1"/><text x="87.4768%" y="239.50"></text></g><g><title>bitbeat::Process::new (159 samples, 2.01%)</title><rect x="85.2811%" y="245" width="2.0088%" height="15" fill="rgb(249,139,47)" fg:x="6750" fg:w="159"/><text x="85.5311%" y="255.50">b..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (4 samples, 0.05%)</title><rect x="87.2394%" y="229" width="0.0505%" height="15" fill="rgb(244,64,35)" fg:x="6905" fg:w="4"/><text x="87.4894%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (3 samples, 0.04%)</title><rect x="87.2521%" y="213" width="0.0379%" height="15" fill="rgb(216,46,15)" fg:x="6906" fg:w="3"/><text x="87.5021%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::new (26 samples, 0.33%)</title><rect x="87.2900%" y="245" width="0.3285%" height="15" fill="rgb(250,74,19)" fg:x="6909" fg:w="26"/><text x="87.5400%" y="255.50"></text></g><g><title>_platform_memmove (21 samples, 0.27%)</title><rect x="87.3531%" y="229" width="0.2653%" height="15" fill="rgb(249,42,33)" fg:x="6914" fg:w="21"/><text x="87.6031%" y="239.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.01%)</title><rect x="87.6943%" y="213" width="0.0126%" height="15" fill="rgb(242,149,17)" fg:x="6941" fg:w="1"/><text x="87.9443%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (31 samples, 0.39%)</title><rect x="88.1617%" y="149" width="0.3917%" height="15" fill="rgb(244,29,21)" fg:x="6978" fg:w="31"/><text x="88.4117%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (31 samples, 0.39%)</title><rect x="88.1617%" y="133" width="0.3917%" height="15" fill="rgb(220,130,37)" fg:x="6978" fg:w="31"/><text x="88.4117%" y="143.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (1 samples, 0.01%)</title><rect x="88.5407%" y="117" width="0.0126%" height="15" fill="rgb(211,67,2)" fg:x="7008" fg:w="1"/><text x="88.7907%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (21 samples, 0.27%)</title><rect x="88.5534%" y="149" width="0.2653%" height="15" fill="rgb(235,68,52)" fg:x="7009" fg:w="21"/><text x="88.8034%" y="159.50"></text></g><g><title>bitbeat::handle_spawn::_{{closure}} (1 samples, 0.01%)</title><rect x="89.3999%" y="85" width="0.0126%" height="15" fill="rgb(246,142,3)" fg:x="7076" fg:w="1"/><text x="89.6499%" y="95.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6 samples, 0.08%)</title><rect x="89.3746%" y="101" width="0.0758%" height="15" fill="rgb(241,25,7)" fg:x="7074" fg:w="6"/><text x="89.6246%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.04%)</title><rect x="89.4125%" y="85" width="0.0379%" height="15" fill="rgb(242,119,39)" fg:x="7077" fg:w="3"/><text x="89.6625%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (3 samples, 0.04%)</title><rect x="89.4125%" y="69" width="0.0379%" height="15" fill="rgb(241,98,45)" fg:x="7077" fg:w="3"/><text x="89.6625%" y="79.50"></text></g><g><title>core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (4 samples, 0.05%)</title><rect x="89.4504%" y="101" width="0.0505%" height="15" fill="rgb(254,28,30)" fg:x="7080" fg:w="4"/><text x="89.7004%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::map_fold&lt;&amp;u8,i64,(),bitbeat::handle_spawn::{{closure}},core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt;::{{closure}}&gt; (14 samples, 0.18%)</title><rect x="89.5009%" y="101" width="0.1769%" height="15" fill="rgb(241,142,54)" fg:x="7084" fg:w="14"/><text x="89.7509%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::traits::iterator::Iterator::for_each::call&lt;i64,alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt;::{{closure}}&gt; (7 samples, 0.09%)</title><rect x="89.5894%" y="85" width="0.0884%" height="15" fill="rgb(222,85,15)" fg:x="7091" fg:w="7"/><text x="89.8394%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;::extend_trusted&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;u8&gt;,bitbeat::handle_spawn::{{closure}}&gt;&gt;::{{closure}}&gt; (2 samples, 0.03%)</title><rect x="89.6526%" y="69" width="0.0253%" height="15" fill="rgb(210,85,47)" fg:x="7096" fg:w="2"/><text x="89.9026%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (2 samples, 0.03%)</title><rect x="89.6526%" y="53" width="0.0253%" height="15" fill="rgb(224,206,25)" fg:x="7096" fg:w="2"/><text x="89.9026%" y="63.50"></text></g><g><title>&lt;alloc::vec::set_len_on_drop::SetLenOnDrop as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="89.6526%" y="37" width="0.0253%" height="15" fill="rgb(243,201,19)" fg:x="7096" fg:w="2"/><text x="89.9026%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (155 samples, 1.96%)</title><rect x="87.9343%" y="181" width="1.9583%" height="15" fill="rgb(236,59,4)" fg:x="6960" fg:w="155"/><text x="88.1843%" y="191.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (152 samples, 1.92%)</title><rect x="87.9722%" y="165" width="1.9204%" height="15" fill="rgb(254,179,45)" fg:x="6963" fg:w="152"/><text x="88.2222%" y="175.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (85 samples, 1.07%)</title><rect x="88.8187%" y="149" width="1.0739%" height="15" fill="rgb(226,14,10)" fg:x="7030" fg:w="85"/><text x="89.0687%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (83 samples, 1.05%)</title><rect x="88.8440%" y="133" width="1.0486%" height="15" fill="rgb(244,27,41)" fg:x="7032" fg:w="83"/><text x="89.0940%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (81 samples, 1.02%)</title><rect x="88.8692%" y="117" width="1.0234%" height="15" fill="rgb(235,35,32)" fg:x="7034" fg:w="81"/><text x="89.1192%" y="127.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (17 samples, 0.21%)</title><rect x="89.6778%" y="101" width="0.2148%" height="15" fill="rgb(218,68,31)" fg:x="7098" fg:w="17"/><text x="89.9278%" y="111.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (6 samples, 0.08%)</title><rect x="89.8168%" y="85" width="0.0758%" height="15" fill="rgb(207,120,37)" fg:x="7109" fg:w="6"/><text x="90.0668%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (19 samples, 0.24%)</title><rect x="89.8926%" y="181" width="0.2401%" height="15" fill="rgb(227,98,0)" fg:x="7115" fg:w="19"/><text x="90.1426%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.21%)</title><rect x="89.9179%" y="165" width="0.2148%" height="15" fill="rgb(207,7,3)" fg:x="7117" fg:w="17"/><text x="90.1679%" y="175.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (11 samples, 0.14%)</title><rect x="89.9937%" y="149" width="0.1390%" height="15" fill="rgb(206,98,19)" fg:x="7123" fg:w="11"/><text x="90.2437%" y="159.50"></text></g><g><title>core::ptr::const_ptr::_&lt;impl *const T&gt;::sub_ptr::precondition_check (2 samples, 0.03%)</title><rect x="90.1074%" y="133" width="0.0253%" height="15" fill="rgb(217,5,26)" fg:x="7132" fg:w="2"/><text x="90.3574%" y="143.50"></text></g><g><title>_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="90.1832%" y="165" width="0.0126%" height="15" fill="rgb(235,190,38)" fg:x="7138" fg:w="1"/><text x="90.4332%" y="175.50"></text></g><g><title>_malloc_zone_malloc (4 samples, 0.05%)</title><rect x="90.2337%" y="149" width="0.0505%" height="15" fill="rgb(247,86,24)" fg:x="7142" fg:w="4"/><text x="90.4837%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (22 samples, 0.28%)</title><rect x="90.1327%" y="181" width="0.2780%" height="15" fill="rgb(205,101,16)" fg:x="7134" fg:w="22"/><text x="90.3827%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (17 samples, 0.21%)</title><rect x="90.1958%" y="165" width="0.2148%" height="15" fill="rgb(246,168,33)" fg:x="7139" fg:w="17"/><text x="90.4458%" y="175.50"></text></g><g><title>nanov2_malloc_type (10 samples, 0.13%)</title><rect x="90.2843%" y="149" width="0.1263%" height="15" fill="rgb(231,114,1)" fg:x="7146" fg:w="10"/><text x="90.5343%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (225 samples, 2.84%)</title><rect x="87.6184%" y="245" width="2.8427%" height="15" fill="rgb(207,184,53)" fg:x="6935" fg:w="225"/><text x="87.8684%" y="255.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (223 samples, 2.82%)</title><rect x="87.6437%" y="229" width="2.8174%" height="15" fill="rgb(224,95,51)" fg:x="6937" fg:w="223"/><text x="87.8937%" y="239.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (218 samples, 2.75%)</title><rect x="87.7069%" y="213" width="2.7543%" height="15" fill="rgb(212,188,45)" fg:x="6942" fg:w="218"/><text x="87.9569%" y="223.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (213 samples, 2.69%)</title><rect x="87.7701%" y="197" width="2.6911%" height="15" fill="rgb(223,154,38)" fg:x="6947" fg:w="213"/><text x="88.0201%" y="207.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 0.05%)</title><rect x="90.4106%" y="181" width="0.0505%" height="15" fill="rgb(251,22,52)" fg:x="7156" fg:w="4"/><text x="90.6606%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (2 samples, 0.03%)</title><rect x="90.4611%" y="245" width="0.0253%" height="15" fill="rgb(229,209,22)" fg:x="7160" fg:w="2"/><text x="90.7111%" y="255.50"></text></g><g><title>core::num::_&lt;impl u32&gt;::from_le_bytes (4 samples, 0.05%)</title><rect x="90.4864%" y="245" width="0.0505%" height="15" fill="rgb(234,138,34)" fg:x="7162" fg:w="4"/><text x="90.7364%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="90.6507%" y="213" width="0.0379%" height="15" fill="rgb(212,95,11)" fg:x="7175" fg:w="3"/><text x="90.9007%" y="223.50"></text></g><g><title>_nanov2_free (2 samples, 0.03%)</title><rect x="90.6886%" y="213" width="0.0253%" height="15" fill="rgb(240,179,47)" fg:x="7178" fg:w="2"/><text x="90.9386%" y="223.50"></text></g><g><title>DYLD-STUB$$free (6 samples, 0.08%)</title><rect x="90.7391%" y="197" width="0.0758%" height="15" fill="rgb(240,163,11)" fg:x="7182" fg:w="6"/><text x="90.9891%" y="207.50"></text></g><g><title>_free (11 samples, 0.14%)</title><rect x="90.8149%" y="197" width="0.1390%" height="15" fill="rgb(236,37,12)" fg:x="7188" fg:w="11"/><text x="91.0649%" y="207.50"></text></g><g><title>_nanov2_free (19 samples, 0.24%)</title><rect x="90.9539%" y="197" width="0.2401%" height="15" fill="rgb(232,164,16)" fg:x="7199" fg:w="19"/><text x="91.2039%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (55 samples, 0.69%)</title><rect x="90.5370%" y="245" width="0.6949%" height="15" fill="rgb(244,205,15)" fg:x="7166" fg:w="55"/><text x="90.7870%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (50 samples, 0.63%)</title><rect x="90.6001%" y="229" width="0.6317%" height="15" fill="rgb(223,117,47)" fg:x="7171" fg:w="50"/><text x="90.8501%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (41 samples, 0.52%)</title><rect x="90.7138%" y="213" width="0.5180%" height="15" fill="rgb(244,107,35)" fg:x="7180" fg:w="41"/><text x="90.9638%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3 samples, 0.04%)</title><rect x="91.1939%" y="197" width="0.0379%" height="15" fill="rgb(205,140,8)" fg:x="7218" fg:w="3"/><text x="91.4439%" y="207.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.03%)</title><rect x="91.2950%" y="197" width="0.0253%" height="15" fill="rgb(228,84,46)" fg:x="7226" fg:w="2"/><text x="91.5450%" y="207.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.03%)</title><rect x="91.3203%" y="197" width="0.0253%" height="15" fill="rgb(254,188,9)" fg:x="7228" fg:w="2"/><text x="91.5703%" y="207.50"></text></g><g><title>_free (4 samples, 0.05%)</title><rect x="91.3455%" y="197" width="0.0505%" height="15" fill="rgb(206,112,54)" fg:x="7230" fg:w="4"/><text x="91.5955%" y="207.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (2 samples, 0.03%)</title><rect x="91.5982%" y="181" width="0.0253%" height="15" fill="rgb(216,84,49)" fg:x="7250" fg:w="2"/><text x="91.8482%" y="191.50"></text></g><g><title>_nanov2_free (21 samples, 0.27%)</title><rect x="91.3961%" y="197" width="0.2653%" height="15" fill="rgb(214,194,35)" fg:x="7234" fg:w="21"/><text x="91.6461%" y="207.50"></text></g><g><title>_platform_memset (3 samples, 0.04%)</title><rect x="91.6235%" y="181" width="0.0379%" height="15" fill="rgb(249,28,3)" fg:x="7252" fg:w="3"/><text x="91.8735%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.52%)</title><rect x="91.2571%" y="213" width="0.5180%" height="15" fill="rgb(222,56,52)" fg:x="7223" fg:w="41"/><text x="91.5071%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (9 samples, 0.11%)</title><rect x="91.6614%" y="197" width="0.1137%" height="15" fill="rgb(245,217,50)" fg:x="7255" fg:w="9"/><text x="91.9114%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (44 samples, 0.56%)</title><rect x="91.2318%" y="245" width="0.5559%" height="15" fill="rgb(213,201,24)" fg:x="7221" fg:w="44"/><text x="91.4818%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (43 samples, 0.54%)</title><rect x="91.2445%" y="229" width="0.5433%" height="15" fill="rgb(248,116,28)" fg:x="7222" fg:w="43"/><text x="91.4945%" y="239.50"></text></g><g><title>_nanov2_free (1 samples, 0.01%)</title><rect x="91.7751%" y="213" width="0.0126%" height="15" fill="rgb(219,72,43)" fg:x="7264" fg:w="1"/><text x="92.0251%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="91.8383%" y="229" width="0.0126%" height="15" fill="rgb(209,138,14)" fg:x="7269" fg:w="1"/><text x="92.0883%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="91.8636%" y="213" width="0.0126%" height="15" fill="rgb(222,18,33)" fg:x="7271" fg:w="1"/><text x="92.1136%" y="223.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.03%)</title><rect x="91.8762%" y="213" width="0.0253%" height="15" fill="rgb(213,199,7)" fg:x="7272" fg:w="2"/><text x="92.1262%" y="223.50"></text></g><g><title>_free (6 samples, 0.08%)</title><rect x="91.9015%" y="213" width="0.0758%" height="15" fill="rgb(250,110,10)" fg:x="7274" fg:w="6"/><text x="92.1515%" y="223.50"></text></g><g><title>_nanov2_free (9 samples, 0.11%)</title><rect x="91.9773%" y="213" width="0.1137%" height="15" fill="rgb(248,123,6)" fg:x="7280" fg:w="9"/><text x="92.2273%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (32 samples, 0.40%)</title><rect x="91.7877%" y="245" width="0.4043%" height="15" fill="rgb(206,91,31)" fg:x="7265" fg:w="32"/><text x="92.0377%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (27 samples, 0.34%)</title><rect x="91.8509%" y="229" width="0.3411%" height="15" fill="rgb(211,154,13)" fg:x="7270" fg:w="27"/><text x="92.1009%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8 samples, 0.10%)</title><rect x="92.0910%" y="213" width="0.1011%" height="15" fill="rgb(225,148,7)" fg:x="7289" fg:w="8"/><text x="92.3410%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (9 samples, 0.11%)</title><rect x="92.1920%" y="245" width="0.1137%" height="15" fill="rgb(220,160,43)" fg:x="7297" fg:w="9"/><text x="92.4420%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (1 samples, 0.01%)</title><rect x="92.3057%" y="245" width="0.0126%" height="15" fill="rgb(213,52,39)" fg:x="7306" fg:w="1"/><text x="92.5557%" y="255.50"></text></g><g><title>bitbeat::handle_spawn (3,372 samples, 42.60%)</title><rect x="50.0063%" y="261" width="42.6027%" height="15" fill="rgb(243,137,7)" fg:x="3958" fg:w="3372"/><text x="50.2563%" y="271.50">bitbeat::handle_spawn</text></g><g><title>core::slice::_&lt;impl [T]&gt;::iter (23 samples, 0.29%)</title><rect x="92.3184%" y="245" width="0.2906%" height="15" fill="rgb(230,79,13)" fg:x="7307" fg:w="23"/><text x="92.5684%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (19 samples, 0.24%)</title><rect x="92.3689%" y="229" width="0.2401%" height="15" fill="rgb(247,105,23)" fg:x="7311" fg:w="19"/><text x="92.6189%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.04%)</title><rect x="93.4807%" y="245" width="0.0379%" height="15" fill="rgb(223,179,41)" fg:x="7399" fg:w="3"/><text x="93.7307%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.03%)</title><rect x="93.7966%" y="229" width="0.0253%" height="15" fill="rgb(218,9,34)" fg:x="7424" fg:w="2"/><text x="94.0466%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (41 samples, 0.52%)</title><rect x="93.5186%" y="245" width="0.5180%" height="15" fill="rgb(222,106,8)" fg:x="7402" fg:w="41"/><text x="93.7686%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (17 samples, 0.21%)</title><rect x="93.8219%" y="229" width="0.2148%" height="15" fill="rgb(211,220,0)" fg:x="7426" fg:w="17"/><text x="94.0719%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.04%)</title><rect x="94.0366%" y="245" width="0.0379%" height="15" fill="rgb(229,52,16)" fg:x="7443" fg:w="3"/><text x="94.2866%" y="255.50"></text></g><g><title>bitbeat::handle_sub (122 samples, 1.54%)</title><rect x="92.6090%" y="261" width="1.5414%" height="15" fill="rgb(212,155,18)" fg:x="7330" fg:w="122"/><text x="92.8590%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (6 samples, 0.08%)</title><rect x="94.0745%" y="245" width="0.0758%" height="15" fill="rgb(242,21,14)" fg:x="7446" fg:w="6"/><text x="94.3245%" y="255.50"></text></g><g><title>bitbeat::Process::step (5,424 samples, 68.53%)</title><rect x="25.6349%" y="277" width="68.5281%" height="15" fill="rgb(222,19,48)" fg:x="2029" fg:w="5424"/><text x="25.8849%" y="287.50">bitbeat::Process::step</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;usize,anyhow::Error&gt;&gt; (1 samples, 0.01%)</title><rect x="94.1503%" y="261" width="0.0126%" height="15" fill="rgb(232,45,27)" fg:x="7452" fg:w="1"/><text x="94.4003%" y="271.50"></text></g><g><title>bitbeat::handle_cmp_le (1 samples, 0.01%)</title><rect x="94.1630%" y="277" width="0.0126%" height="15" fill="rgb(249,103,42)" fg:x="7453" fg:w="1"/><text x="94.4130%" y="287.50"></text></g><g><title>bitbeat::handle_jump_if (4 samples, 0.05%)</title><rect x="94.1756%" y="277" width="0.0505%" height="15" fill="rgb(246,81,33)" fg:x="7454" fg:w="4"/><text x="94.4256%" y="287.50"></text></g><g><title>bitbeat::handle_load_imm (2 samples, 0.03%)</title><rect x="94.2262%" y="277" width="0.0253%" height="15" fill="rgb(252,33,42)" fg:x="7458" fg:w="2"/><text x="94.4762%" y="287.50"></text></g><g><title>bitbeat::handle_recv (3 samples, 0.04%)</title><rect x="94.2514%" y="277" width="0.0379%" height="15" fill="rgb(209,212,41)" fg:x="7460" fg:w="3"/><text x="94.5014%" y="287.50"></text></g><g><title>bitbeat::handle_send (2 samples, 0.03%)</title><rect x="94.2893%" y="277" width="0.0253%" height="15" fill="rgb(207,154,6)" fg:x="7463" fg:w="2"/><text x="94.5393%" y="287.50"></text></g><g><title>bitbeat::handle_sub (2 samples, 0.03%)</title><rect x="94.3146%" y="277" width="0.0253%" height="15" fill="rgb(223,64,47)" fg:x="7465" fg:w="2"/><text x="94.5646%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (41 samples, 0.52%)</title><rect x="94.3399%" y="277" width="0.5180%" height="15" fill="rgb(211,161,38)" fg:x="7467" fg:w="41"/><text x="94.5899%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (29 samples, 0.37%)</title><rect x="94.4915%" y="261" width="0.3664%" height="15" fill="rgb(219,138,40)" fg:x="7479" fg:w="29"/><text x="94.7415%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (6 samples, 0.08%)</title><rect x="94.7821%" y="245" width="0.0758%" height="15" fill="rgb(241,228,46)" fg:x="7502" fg:w="6"/><text x="95.0321%" y="255.50"></text></g><g><title>core::cmp::PartialEq::ne (40 samples, 0.51%)</title><rect x="94.8579%" y="277" width="0.5054%" height="15" fill="rgb(223,209,38)" fg:x="7508" fg:w="40"/><text x="95.1079%" y="287.50"></text></g><g><title>&lt;bitbeat::ProcessState as core::cmp::PartialEq&gt;::eq (22 samples, 0.28%)</title><rect x="95.0853%" y="261" width="0.2780%" height="15" fill="rgb(236,164,45)" fg:x="7526" fg:w="22"/><text x="95.3353%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::clone::Clone&gt;::clone (2 samples, 0.03%)</title><rect x="95.5654%" y="245" width="0.0253%" height="15" fill="rgb(231,15,5)" fg:x="7564" fg:w="2"/><text x="95.8154%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (2 samples, 0.03%)</title><rect x="95.6538%" y="229" width="0.0253%" height="15" fill="rgb(252,35,15)" fg:x="7571" fg:w="2"/><text x="95.9038%" y="239.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (27 samples, 0.34%)</title><rect x="95.3632%" y="277" width="0.3411%" height="15" fill="rgb(248,181,18)" fg:x="7548" fg:w="27"/><text x="95.6132%" y="287.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.28%)</title><rect x="95.4264%" y="261" width="0.2780%" height="15" fill="rgb(233,39,42)" fg:x="7553" fg:w="22"/><text x="95.6764%" y="271.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (9 samples, 0.11%)</title><rect x="95.5907%" y="245" width="0.1137%" height="15" fill="rgb(238,110,33)" fg:x="7566" fg:w="9"/><text x="95.8407%" y="255.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (2 samples, 0.03%)</title><rect x="95.6791%" y="229" width="0.0253%" height="15" fill="rgb(233,195,10)" fg:x="7573" fg:w="2"/><text x="95.9291%" y="239.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.03%)</title><rect x="96.0328%" y="229" width="0.0253%" height="15" fill="rgb(254,105,3)" fg:x="7601" fg:w="2"/><text x="96.2828%" y="239.50"></text></g><g><title>DYLD-STUB$$free (3 samples, 0.04%)</title><rect x="96.7277%" y="165" width="0.0379%" height="15" fill="rgb(221,225,9)" fg:x="7656" fg:w="3"/><text x="96.9777%" y="175.50"></text></g><g><title>_free (4 samples, 0.05%)</title><rect x="96.7656%" y="165" width="0.0505%" height="15" fill="rgb(224,227,45)" fg:x="7659" fg:w="4"/><text x="97.0156%" y="175.50"></text></g><g><title>_nanov2_free (2 samples, 0.03%)</title><rect x="96.8162%" y="165" width="0.0253%" height="15" fill="rgb(229,198,43)" fg:x="7663" fg:w="2"/><text x="97.0662%" y="175.50"></text></g><g><title>_szone_free (5 samples, 0.06%)</title><rect x="96.8414%" y="165" width="0.0632%" height="15" fill="rgb(206,209,35)" fg:x="7665" fg:w="5"/><text x="97.0914%" y="175.50"></text></g><g><title>DYLD-STUB$$_platform_memset (2 samples, 0.03%)</title><rect x="97.0436%" y="149" width="0.0253%" height="15" fill="rgb(245,195,53)" fg:x="7681" fg:w="2"/><text x="97.2936%" y="159.50"></text></g><g><title>_platform_memset (4 samples, 0.05%)</title><rect x="97.0689%" y="149" width="0.0505%" height="15" fill="rgb(240,92,26)" fg:x="7683" fg:w="4"/><text x="97.3189%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (62 samples, 0.78%)</title><rect x="96.6140%" y="181" width="0.7833%" height="15" fill="rgb(207,40,23)" fg:x="7647" fg:w="62"/><text x="96.8640%" y="191.50"></text></g><g><title>free_tiny (39 samples, 0.49%)</title><rect x="96.9046%" y="165" width="0.4927%" height="15" fill="rgb(223,111,35)" fg:x="7670" fg:w="39"/><text x="97.1546%" y="175.50"></text></g><g><title>tiny_free_no_lock (22 samples, 0.28%)</title><rect x="97.1194%" y="149" width="0.2780%" height="15" fill="rgb(229,147,28)" fg:x="7687" fg:w="22"/><text x="97.3694%" y="159.50"></text></g><g><title>get_tiny_previous_free_msize (4 samples, 0.05%)</title><rect x="97.3468%" y="133" width="0.0505%" height="15" fill="rgb(211,29,28)" fg:x="7705" fg:w="4"/><text x="97.5968%" y="143.50"></text></g><g><title>_nanov2_free (4 samples, 0.05%)</title><rect x="97.3973%" y="181" width="0.0505%" height="15" fill="rgb(228,72,33)" fg:x="7709" fg:w="4"/><text x="97.6473%" y="191.50"></text></g><g><title>&lt;&amp;A as core::alloc::Allocator&gt;::deallocate (67 samples, 0.85%)</title><rect x="96.6140%" y="197" width="0.8465%" height="15" fill="rgb(205,214,31)" fg:x="7647" fg:w="67"/><text x="96.8640%" y="207.50"></text></g><g><title>free_tiny (1 samples, 0.01%)</title><rect x="97.4479%" y="181" width="0.0126%" height="15" fill="rgb(224,111,15)" fg:x="7713" fg:w="1"/><text x="97.6979%" y="191.50"></text></g><g><title>alloc::rc::RcInnerPtr::weak (1 samples, 0.01%)</title><rect x="97.4605%" y="197" width="0.0126%" height="15" fill="rgb(253,21,26)" fg:x="7714" fg:w="1"/><text x="97.7105%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Weak&lt;core::cell::RefCell&lt;bitbeat::Process&gt;,&amp;alloc::alloc::Global&gt;&gt; (117 samples, 1.48%)</title><rect x="96.0581%" y="229" width="1.4782%" height="15" fill="rgb(245,139,43)" fg:x="7603" fg:w="117"/><text x="96.3081%" y="239.50"></text></g><g><title>&lt;alloc::rc::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 1.44%)</title><rect x="96.0960%" y="213" width="1.4403%" height="15" fill="rgb(252,170,7)" fg:x="7606" fg:w="114"/><text x="96.3460%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked::precondition_check (5 samples, 0.06%)</title><rect x="97.4732%" y="197" width="0.0632%" height="15" fill="rgb(231,118,14)" fg:x="7715" fg:w="5"/><text x="97.7232%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::is_size_align_valid (4 samples, 0.05%)</title><rect x="97.4858%" y="181" width="0.0505%" height="15" fill="rgb(238,83,0)" fg:x="7716" fg:w="4"/><text x="97.7358%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (35 samples, 0.44%)</title><rect x="97.8143%" y="149" width="0.4422%" height="15" fill="rgb(221,39,39)" fg:x="7742" fg:w="35"/><text x="98.0643%" y="159.50"></text></g><g><title>core::slice::index::range (35 samples, 0.44%)</title><rect x="97.8143%" y="133" width="0.4422%" height="15" fill="rgb(222,119,46)" fg:x="7742" fg:w="35"/><text x="98.0643%" y="143.50"></text></g><g><title>&lt;core::ops::range::RangeFull as core::ops::range::RangeBounds&lt;T&gt;&gt;::start_bound (20 samples, 0.25%)</title><rect x="98.0038%" y="117" width="0.2527%" height="15" fill="rgb(222,165,49)" fg:x="7757" fg:w="20"/><text x="98.2538%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;i64&gt;&gt; (4 samples, 0.05%)</title><rect x="98.2565%" y="149" width="0.0505%" height="15" fill="rgb(219,113,52)" fg:x="7777" fg:w="4"/><text x="98.5065%" y="159.50"></text></g><g><title>&lt;&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::Dropper&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="98.2691%" y="133" width="0.0379%" height="15" fill="rgb(214,7,15)" fg:x="7778" fg:w="3"/><text x="98.5191%" y="143.50"></text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.63%)</title><rect x="97.7258%" y="165" width="0.6317%" height="15" fill="rgb(235,32,4)" fg:x="7735" fg:w="50"/><text x="97.9758%" y="175.50"></text></g><g><title>core::slice::index::range (4 samples, 0.05%)</title><rect x="98.3070%" y="149" width="0.0505%" height="15" fill="rgb(238,90,54)" fg:x="7781" fg:w="4"/><text x="98.5570%" y="159.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::slice_ranges (2 samples, 0.03%)</title><rect x="98.3575%" y="165" width="0.0253%" height="15" fill="rgb(213,208,19)" fg:x="7785" fg:w="2"/><text x="98.6075%" y="175.50"></text></g><g><title>DYLD-STUB$$free (2 samples, 0.03%)</title><rect x="98.4713%" y="133" width="0.0253%" height="15" fill="rgb(233,156,4)" fg:x="7794" fg:w="2"/><text x="98.7213%" y="143.50"></text></g><g><title>_free (5 samples, 0.06%)</title><rect x="98.4965%" y="133" width="0.0632%" height="15" fill="rgb(207,194,5)" fg:x="7796" fg:w="5"/><text x="98.7465%" y="143.50"></text></g><g><title>DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="98.6481%" y="117" width="0.0126%" height="15" fill="rgb(206,111,30)" fg:x="7808" fg:w="1"/><text x="98.8981%" y="127.50"></text></g><g><title>_nanov2_free (10 samples, 0.13%)</title><rect x="98.5597%" y="133" width="0.1263%" height="15" fill="rgb(243,70,54)" fg:x="7801" fg:w="10"/><text x="98.8097%" y="143.50"></text></g><g><title>_platform_memset (2 samples, 0.03%)</title><rect x="98.6608%" y="117" width="0.0253%" height="15" fill="rgb(242,28,8)" fg:x="7809" fg:w="2"/><text x="98.9108%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;i64&gt;&gt; (92 samples, 1.16%)</title><rect x="97.6753%" y="181" width="1.1623%" height="15" fill="rgb(219,106,18)" fg:x="7731" fg:w="92"/><text x="97.9253%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (36 samples, 0.45%)</title><rect x="98.3828%" y="165" width="0.4548%" height="15" fill="rgb(244,222,10)" fg:x="7787" fg:w="36"/><text x="98.6328%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.43%)</title><rect x="98.4081%" y="149" width="0.4296%" height="15" fill="rgb(236,179,52)" fg:x="7789" fg:w="34"/><text x="98.6581%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (12 samples, 0.15%)</title><rect x="98.6860%" y="133" width="0.1516%" height="15" fill="rgb(213,23,39)" fg:x="7811" fg:w="12"/><text x="98.9360%" y="143.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (265 samples, 3.35%)</title><rect x="95.9318%" y="245" width="3.3481%" height="15" fill="rgb(238,48,10)" fg:x="7593" fg:w="265"/><text x="96.1818%" y="255.50">all..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt; (138 samples, 1.74%)</title><rect x="97.5363%" y="229" width="1.7435%" height="15" fill="rgb(251,196,23)" fg:x="7720" fg:w="138"/><text x="97.7863%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;bitbeat::Process&gt;&gt; (135 samples, 1.71%)</title><rect x="97.5742%" y="213" width="1.7056%" height="15" fill="rgb(250,152,24)" fg:x="7723" fg:w="135"/><text x="97.8242%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;bitbeat::Process&gt; (132 samples, 1.67%)</title><rect x="97.6121%" y="197" width="1.6677%" height="15" fill="rgb(209,150,17)" fg:x="7726" fg:w="132"/><text x="97.8621%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;bitbeat::Function&gt;&gt; (35 samples, 0.44%)</title><rect x="98.8377%" y="181" width="0.4422%" height="15" fill="rgb(234,202,34)" fg:x="7823" fg:w="35"/><text x="99.0877%" y="191.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.44%)</title><rect x="98.8377%" y="165" width="0.4422%" height="15" fill="rgb(253,148,53)" fg:x="7823" fg:w="35"/><text x="99.0877%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (304 samples, 3.84%)</title><rect x="95.7044%" y="277" width="3.8408%" height="15" fill="rgb(218,129,16)" fg:x="7575" fg:w="304"/><text x="95.9544%" y="287.50">core..</text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (299 samples, 3.78%)</title><rect x="95.7675%" y="261" width="3.7776%" height="15" fill="rgb(216,85,19)" fg:x="7580" fg:w="299"/><text x="96.0175%" y="271.50">&lt;all..</text></g><g><title>alloc::rc::RcInnerPtr::strong (21 samples, 0.27%)</title><rect x="99.2798%" y="245" width="0.2653%" height="15" fill="rgb(235,228,7)" fg:x="7858" fg:w="21"/><text x="99.5298%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;bitbeat::Process&gt;&gt; (14 samples, 0.18%)</title><rect x="99.5452%" y="277" width="0.1769%" height="15" fill="rgb(245,175,0)" fg:x="7879" fg:w="14"/><text x="99.7952%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (9 samples, 0.11%)</title><rect x="99.6083%" y="261" width="0.1137%" height="15" fill="rgb(208,168,36)" fg:x="7884" fg:w="9"/><text x="99.8583%" y="271.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (5 samples, 0.06%)</title><rect x="99.6589%" y="245" width="0.0632%" height="15" fill="rgb(246,171,24)" fg:x="7888" fg:w="5"/><text x="99.9089%" y="255.50"></text></g><g><title>bitbeat::Machine::run (7,904 samples, 99.86%)</title><rect x="0.0253%" y="293" width="99.8610%" height="15" fill="rgb(215,142,24)" fg:x="2" fg:w="7904"/><text x="0.2753%" y="303.50">bitbeat::Machine::run</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt;&gt; (13 samples, 0.16%)</title><rect x="99.7220%" y="277" width="0.1642%" height="15" fill="rgb(250,187,7)" fg:x="7893" fg:w="13"/><text x="99.9720%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;bitbeat::Process&gt;&gt;&gt; (11 samples, 0.14%)</title><rect x="99.7473%" y="261" width="0.1390%" height="15" fill="rgb(228,66,33)" fg:x="7895" fg:w="11"/><text x="99.9973%" y="271.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.14%)</title><rect x="99.7473%" y="245" width="0.1390%" height="15" fill="rgb(234,215,21)" fg:x="7895" fg:w="11"/><text x="99.9973%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::strong (3 samples, 0.04%)</title><rect x="99.8484%" y="229" width="0.0379%" height="15" fill="rgb(222,191,20)" fg:x="7903" fg:w="3"/><text x="100.0984%" y="239.50"></text></g><g><title>bitbeat::Module::new (1 samples, 0.01%)</title><rect x="99.8863%" y="293" width="0.0126%" height="15" fill="rgb(245,79,54)" fg:x="7906" fg:w="1"/><text x="100.1363%" y="303.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (1 samples, 0.01%)</title><rect x="99.8863%" y="277" width="0.0126%" height="15" fill="rgb(240,10,37)" fg:x="7906" fg:w="1"/><text x="100.1363%" y="287.50"></text></g><g><title>&lt;str as alloc::string::SpecToString&gt;::spec_to_string (1 samples, 0.01%)</title><rect x="99.8863%" y="261" width="0.0126%" height="15" fill="rgb(214,192,32)" fg:x="7906" fg:w="1"/><text x="100.1363%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.01%)</title><rect x="99.8863%" y="245" width="0.0126%" height="15" fill="rgb(209,36,54)" fg:x="7906" fg:w="1"/><text x="100.1363%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.01%)</title><rect x="99.8863%" y="229" width="0.0126%" height="15" fill="rgb(220,10,11)" fg:x="7906" fg:w="1"/><text x="100.1363%" y="239.50"></text></g><g><title>core::hint::assert_unchecked::precondition_check (1 samples, 0.01%)</title><rect x="99.8863%" y="213" width="0.0126%" height="15" fill="rgb(221,106,17)" fg:x="7906" fg:w="1"/><text x="100.1363%" y="223.50"></text></g><g><title>all (7,915 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(251,142,44)" fg:x="0" fg:w="7915"/><text x="0.2500%" y="447.50"></text></g><g><title>start (7,915 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(238,13,15)" fg:x="0" fg:w="7915"/><text x="0.2500%" y="431.50">start</text></g><g><title>main (7,913 samples, 99.97%)</title><rect x="0.0253%" y="405" width="99.9747%" height="15" fill="rgb(208,107,27)" fg:x="2" fg:w="7913"/><text x="0.2753%" y="415.50">main</text></g><g><title>std::rt::lang_start (7,913 samples, 99.97%)</title><rect x="0.0253%" y="389" width="99.9747%" height="15" fill="rgb(205,136,37)" fg:x="2" fg:w="7913"/><text x="0.2753%" y="399.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (7,913 samples, 99.97%)</title><rect x="0.0253%" y="373" width="99.9747%" height="15" fill="rgb(250,205,27)" fg:x="2" fg:w="7913"/><text x="0.2753%" y="383.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (7,913 samples, 99.97%)</title><rect x="0.0253%" y="357" width="99.9747%" height="15" fill="rgb(210,80,43)" fg:x="2" fg:w="7913"/><text x="0.2753%" y="367.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (7,913 samples, 99.97%)</title><rect x="0.0253%" y="341" width="99.9747%" height="15" fill="rgb(247,160,36)" fg:x="2" fg:w="7913"/><text x="0.2753%" y="351.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (7,913 samples, 99.97%)</title><rect x="0.0253%" y="325" width="99.9747%" height="15" fill="rgb(234,13,49)" fg:x="2" fg:w="7913"/><text x="0.2753%" y="335.50">core::ops::function::FnOnce::call_once</text></g><g><title>bitbeat::fib (7,913 samples, 99.97%)</title><rect x="0.0253%" y="309" width="99.9747%" height="15" fill="rgb(234,122,0)" fg:x="2" fg:w="7913"/><text x="0.2753%" y="319.50">bitbeat::fib</text></g><g><title>core::cmp::PartialEq::ne (8 samples, 0.10%)</title><rect x="99.8989%" y="293" width="0.1011%" height="15" fill="rgb(207,146,38)" fg:x="7907" fg:w="8"/><text x="100.1489%" y="303.50"></text></g></svg></svg>